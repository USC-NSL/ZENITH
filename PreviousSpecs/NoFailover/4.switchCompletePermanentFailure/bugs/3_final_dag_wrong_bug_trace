<<
[
 _TEAction |-> [
   position |-> 1,
   name |-> "Initial predicate",
   location |-> "Unknown location"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 0,
 DAGQueue |-> (rc0 :> <<>>),
 DAGStaleOrNot |-> <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [dag |-> 0]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 1),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 0),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 2,
   name |-> "ControllerTEProc",
   location |-> "line 3625, col 27 to line 3669, col 68 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 0,
 DAGQueue |-> (rc0 :> <<>>),
 DAGStaleOrNot |-> <<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [dag |-> 0]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 1),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 0),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 3,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 3671, col 38 to line 3753, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [dag |-> 0]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTERemovePastIRs" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 4,
   name |-> "ControllerTERemovePastIRs",
   location |-> "line 3755, col 36 to line 3830, col 77 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [dag |-> 0]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 5,
   name |-> "ControllerSeqProc",
   location |-> "line 3883, col 28 to line 3928, col 69 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 6,
   name |-> "ControllerSeqScheduleDAG",
   location |-> "line 3930, col 35 to line 3989, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 7,
   name |-> "SchedulerMechanism",
   location |-> "line 3991, col 29 to line 4053, col 70 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 8,
   name |-> "ScheduleTheIR",
   location |-> "line 4055, col 24 to line 4110, col 65 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 0),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 9,
   name |-> "ControllerThread",
   location |-> "line 4199, col 27 to line 4264, col 68 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 10,
   name |-> "ControllerThreadSendIR",
   location |-> "line 4266, col 33 to line 4331, col 80 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 11,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 4333, col 36 to line 4412, col 77 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<[type |-> INSTALL_FLOW, flow |-> 1, to |-> s0]>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<SW_SIMPLE_ID, s0>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 12,
   name |-> "SwitchSimpleProcess",
   location |-> "line 2437, col 30 to line 2498, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<1>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 13,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 5355, col 40 to line 5431, col 81 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<1>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 14,
   name |-> "SwitchFailure",
   location |-> "line 3189, col 24 to line 3334, col 65 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 15,
   name |-> "ControllerEventHandlerProc",
   location |-> "line 4755, col 37 to line 4821, col 78 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> t0 @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 16,
   name |-> "ControllerThreadUnlockSemaphore",
   location |-> "line 4414, col 42 to line 4498, col 83 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<0, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 17,
   name |-> "ControllerUpdateIR2",
   location |-> "line 5516, col 30 to line 5573, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT], [IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 18,
   name |-> "MonitoringServerRemoveFromQueue",
   location |-> "line 5433, col 42 to line 5514, col 83 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT], [IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 19,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 20,
   name |-> "ControllerSuspendSW",
   location |-> "line 4921, col 30 to line 4977, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 21,
   name |-> "ControllerEvenHanlderRemoveEventFromQueue",
   location |-> "line 4823, col 52 to line 4919, col 93 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 22,
   name |-> "RemoveFromScheduledIRSet",
   location |-> "line 4500, col 35 to line 4578, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 23,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 24,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 25,
   name |-> "ControllerTEProc",
   location |-> "line 3625, col 27 to line 3669, col 68 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 26,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 3671, col 38 to line 3753, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 27,
   name |-> "ControllerSeqScheduleDAG",
   location |-> "line 3930, col 35 to line 3989, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {2}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 28,
   name |-> "SchedulerMechanism",
   location |-> "line 3991, col 29 to line 4053, col 70 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {2}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 29,
   name |-> "ScheduleTheIR",
   location |-> "line 4055, col 24 to line 4110, col 65 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 30,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 3671, col 38 to line 3753, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTERemovePastIRs" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 31,
   name |-> "ControllerSeqScheduleDAG",
   location |-> "line 3930, col 35 to line 3989, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 1),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTERemovePastIRs" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 32,
   name |-> "ControllerThread",
   location |-> "line 4199, col 27 to line 4264, col 68 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTERemovePastIRs" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 33,
   name |-> "ControllerTERemovePastIRs",
   location |-> "line 3755, col 36 to line 3830, col 77 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 34,
   name |-> "ControllerSeqProc",
   location |-> "line 3883, col 28 to line 3928, col 69 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 35,
   name |-> "ControllerThreadSendIR",
   location |-> "line 4266, col 33 to line 4331, col 80 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 36,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 4333, col 36 to line 4412, col 77 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<[type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<SW_SIMPLE_ID, s1>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 37,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<[type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<SW_SIMPLE_ID, s1>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 38,
   name |-> "SwitchSimpleProcess",
   location |-> "line 2437, col 30 to line 2498, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 39,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 5355, col 40 to line 5431, col 81 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 40,
   name |-> "ControllerSeqScheduleDAG",
   location |-> "line 3930, col 35 to line 3989, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {4}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 41,
   name |-> "SchedulerMechanism",
   location |-> "line 3991, col 29 to line 4053, col 70 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2, 4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 4] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {4}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 42,
   name |-> "ScheduleTheIR",
   location |-> "line 4055, col 24 to line 4110, col 65 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2], [tag |-> NO_TAG, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2, 4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> t0 @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 43,
   name |-> "ControllerThreadUnlockSemaphore",
   location |-> "line 4414, col 42 to line 4498, col 83 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2], [tag |-> NO_TAG, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2, 4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 44,
   name |-> "ControllerUpdateIR2",
   location |-> "line 5516, col 30 to line 5573, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 2], [tag |-> NO_TAG, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2, 4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 45,
   name |-> "RemoveFromScheduledIRSet",
   location |-> "line 4500, col 35 to line 4578, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 46,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 2),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 47,
   name |-> "ControllerThread",
   location |-> "line 4199, col 27 to line 4264, col 68 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 48,
   name |-> "MonitoringServerRemoveFromQueue",
   location |-> "line 5433, col 42 to line 5514, col 83 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 49,
   name |-> "ControllerThreadSendIR",
   location |-> "line 4266, col 33 to line 4331, col 80 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 50,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 4333, col 36 to line 4412, col 77 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<[type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 2, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<SW_SIMPLE_ID, s1>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 51,
   name |-> "SwitchSimpleProcess",
   location |-> "line 2437, col 30 to line 2498, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 52,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 53,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 5355, col 40 to line 5431, col 81 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> t0 @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 54,
   name |-> "ControllerThreadUnlockSemaphore",
   location |-> "line 4414, col 42 to line 4498, col 83 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {4}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 55,
   name |-> "RemoveFromScheduledIRSet",
   location |-> "line 4500, col 35 to line 4578, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 56,
   name |-> "ControllerUpdateIR2",
   location |-> "line 5516, col 30 to line 5573, col 71 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 1>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>),
 RCNIBEventQueue |-> (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_DONE]>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 57,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3555, col 32 to line 3621, col 79 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 1>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 58,
   name |-> "MonitoringServerRemoveFromQueue",
   location |-> "line 5433, col 42 to line 5514, col 83 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 1>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 59,
   name |-> "ControllerSeqScheduleDAG",
   location |-> "line 3930, col 35 to line 3989, col 76 of module SwitchPermanentFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>},
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGStaleOrNot |-> <<1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1>>,
 FirstInstall |-> <<1, 1, 0, 1>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2, 4>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currDAG_ |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 currIR |-> (<<rc0, CONT_TE>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 idThreadWorkingOnIR |-> (1 :> IR_UNLOCK @@ 2 :> IR_UNLOCK @@ 3 :> IR_UNLOCK @@ 4 :> IR_UNLOCK @@ 14 :> IR_UNLOCK @@ 15 :> IR_UNLOCK @@ 16 :> IR_UNLOCK @@ 17 :> IR_UNLOCK @@ 18 :> IR_UNLOCK @@ 19 :> IR_UNLOCK @@ 20 :> IR_UNLOCK @@ 21 :> IR_UNLOCK @@ 22 :> IR_UNLOCK @@ 23 :> IR_UNLOCK @@ 24 :> IR_UNLOCK),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> INSTALL_FLOW, flow |-> 1, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> INSTALL_FLOW, flow |-> 4, to |-> s1]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2, 4>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s0, s1>>,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 4),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3], [type |-> INSTALL_FLOW, flow |-> 4]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, flow |-> 4, from |-> s1]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 4),
 nextIRToSent |-> (<<ofc0, t0>> :> 4),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {4}),
 nxtRCIRID |-> 14,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 2),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 workerThreadRanking |-> (t0 :> 1)
]
>>

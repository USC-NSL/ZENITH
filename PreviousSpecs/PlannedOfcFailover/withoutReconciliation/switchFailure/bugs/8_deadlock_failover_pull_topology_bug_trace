<<
[
 _TEAction |-> [
   position |-> 1,
   name |-> "Initial predicate",
   location |-> "Unknown location"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> 0] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_NONE),
 ofcID |-> (<<rc0, CONT_SEQ>> :> 0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "OfcFailoverNewMasterInitialization"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 2,
   name |-> "ControllerSeqProc",
   location |-> "line 4776, col 28 to line 4841, col 69 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> 0] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 0),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_NONE),
 ofcID |-> (<<rc0, CONT_SEQ>> :> 0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "OfcFailoverNewMasterInitialization"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 workerLocalQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 3,
   name |-> "SchedulerMechanism",
   location |-> "line 4843, col 29 to line 4924, col 70 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> 0] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_NONE),
 ofcID |-> (<<rc0, CONT_SEQ>> :> 0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "OfcFailoverNewMasterInitialization"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 workerLocalQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 4,
   name |-> "OfcFailoverNewMasterInitialization",
   location |-> "line 7523, col 45 to line 7623, col 86 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> 0] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> 0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 workerLocalQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 5,
   name |-> "ScheduleTheIR",
   location |-> "line 4926, col 24 to line 4987, col 80 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<rc0, CONT_SEQ>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> 0] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> 0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "sendIRQueueModNotification" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {ofc0}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 workerLocalQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 6,
   name |-> "sendIRQueueModNotification",
   location |-> "line 4989, col 37 to line 5077, col 78 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<rc0, CONT_SEQ>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> 0] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "sendIRQueueModNotification" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 workerLocalQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 7,
   name |-> "NibEventHandlerProc",
   location |-> "line 5268, col 30 to line 5346, col 71 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<rc0, CONT_SEQ>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "sendIRQueueModNotification" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {1}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> NO_TAG, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> -1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 8,
   name |-> "sendIRQueueModNotification",
   location |-> "line 4989, col 37 to line 5077, col 78 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<rc0, CONT_SEQ>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "sequencerApplyFailure" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> NO_TAG, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> -1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 9,
   name |-> "sequencerApplyFailure",
   location |-> "line 5079, col 32 to line 5151, col 73 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_NONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 0,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> 0] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> NO_TAG, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> -1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 10,
   name |-> "ControllerThread",
   location |-> "line 6042, col 27 to line 6175, col 68 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 11,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 6431, col 36 to line 6539, col 77 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NIC_ASIC_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 12,
   name |-> "SwitchRcvPacket",
   location |-> "line 3010, col 26 to line 3074, col 67 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchNicAsicInsertToOfaBuff" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NIC_ASIC_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 13,
   name |-> "SwitchNicAsicInsertToOfaBuff",
   location |-> "line 3076, col 39 to line 3167, col 80 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<OFA_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 14,
   name |-> "SwitchOfaProcIn",
   location |-> "line 3332, col 26 to line 3402, col 67 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcessPacket" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<OFA_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 15,
   name |-> "SwitchOfaProcessPacket",
   location |-> "line 3404, col 33 to line 3522, col 74 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<[IR |-> 1, from |-> ofc0]>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [type |-> 0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<INSTALLER, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 16,
   name |-> "SwitchInstallerProc",
   location |-> "line 3771, col 30 to line 3838, col 71 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{}>>,
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerInsert2TCAM" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<INSTALLER, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 17,
   name |-> "SwitchInstallerInsert2TCAM",
   location |-> "line 3840, col 37 to line 3929, col 78 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerSendConfirmation" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<INSTALLER, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 18,
   name |-> "SwitchInstallerSendConfirmation",
   location |-> "line 3931, col 42 to line 4032, col 83 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<[IR |-> 1, from |-> ofc0]>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [type |-> 0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<OFA_OUT, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 19,
   name |-> "SwitchOfaProcOut",
   location |-> "line 3602, col 27 to line 3665, col 68 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SendInstallationConfirmation" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<OFA_OUT, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 20,
   name |-> "SendInstallationConfirmation",
   location |-> "line 3667, col 39 to line 3766, col 80 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<[type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NIC_ASIC_OUT, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 21,
   name |-> "SwitchFromOFAPacket",
   location |-> "line 3172, col 30 to line 3240, col 71 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 0,
 controlMsgCounter |-> (s0 :> 0),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchNicAsicSendOutMsg" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 0),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<{s0}>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {}),
 switchLock |-> <<NIC_ASIC_OUT, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 22,
   name |-> "SwitchFailure",
   location |-> "line 4038, col 24 to line 4204, col 80 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {ofc0, ofc1}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ""),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "swFailureSendStatusMsg" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchNicAsicSendOutMsg" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<SW_FAILURE_PROC, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 23,
   name |-> "swFailureSendStatusMsg",
   location |-> "line 4206, col 33 to line 4284, col 74 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {ofc1}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc0),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "swFailureSendStatusMsg" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchNicAsicSendOutMsg" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>> @@ ofc1 :> <<>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<SW_FAILURE_PROC, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 24,
   name |-> "swFailureSendStatusMsg",
   location |-> "line 4206, col 33 to line 4284, col 74 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "swFailureSendStatusMsg" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchNicAsicSendOutMsg" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<SW_FAILURE_PROC, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 25,
   name |-> "swFailureSendStatusMsg",
   location |-> "line 4206, col 33 to line 4284, col 74 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchNicAsicSendOutMsg" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NIC_ASIC_OUT, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 26,
   name |-> "SwitchNicAsicSendOutMsg",
   location |-> "line 3242, col 34 to line 3327, col 75 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<[type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 27,
   name |-> "ControllerEventHandlerProc",
   location |-> "line 6684, col 37 to line 6884, col 78 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<[sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<[type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 28,
   name |-> "ControllerEvenHanlderRemoveEventFromQueue",
   location |-> "line 6886, col 52 to line 7009, col 93 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<0>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_SENT>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<[sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<[type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 29,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 7299, col 40 to line 7441, col 81 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<[sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 30,
   name |-> "NibEventHandlerProc",
   location |-> "line 5268, col 30 to line 5346, col 71 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> FALSE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 31,
   name |-> "ofcFailoverHandlerProc",
   location |-> "line 5350, col 33 to line 5449, col 74 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> <<[type |-> INSTALL_FLOW, to |-> s0, IR |-> 1]>>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {1}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], index |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ScheduleRoleUpdateEqual" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {s0}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> <<[tag |-> <<ofc0, t0>>, item |-> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1], id |-> 1]>> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 32,
   name |-> "ControllerThreadReleaseSemaphoreAndScheduledSet",
   location |-> "line 6177, col 58 to line 6337, col 99 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> 0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ScheduleRoleUpdateEqual" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {s0}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 33,
   name |-> "ScheduleRoleUpdateEqual",
   location |-> "line 5451, col 34 to line 5546, col 75 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<ofc1, FAILOVER_HANDLER>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<ofc1, FAILOVER_HANDLER>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "ScheduleRoleUpdateEqual" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> NO_TAG, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> -1]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 34,
   name |-> "ScheduleRoleUpdateEqual",
   location |-> "line 5451, col 34 to line 5546, col 75 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 1,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> 0]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_NONE, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> NO_TAG, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> -1]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 35,
   name |-> "ControllerThread",
   location |-> "line 6042, col 27 to line 6175, col 68 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_LOCKING, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadForwardIR" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 36,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 6431, col 36 to line 6539, col 77 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<[type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NIC_ASIC_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 37,
   name |-> "SwitchRcvPacket",
   location |-> "line 3010, col 26 to line 3074, col 67 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchNicAsicInsertToOfaBuff" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NIC_ASIC_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 38,
   name |-> "SwitchNicAsicInsertToOfaBuff",
   location |-> "line 3076, col 39 to line 3167, col 80 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<[type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<OFA_IN, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 39,
   name |-> "ghostProc",
   location |-> "line 4704, col 20 to line 4772, col 76 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<[type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 1,
 controlMsgCounter |-> (s0 :> 1),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> NotFailed,
        ofa |-> Failed,
        installer |-> Failed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 40,
   name |-> "SwitchResolveFailure",
   location |-> "line 4288, col 31 to line 4464, col 72 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {ofc0, ofc1}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ""),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "swRecoverySendStatusMsg" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<SW_RESOLVE_PROC, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 41,
   name |-> "swRecoverySendStatusMsg",
   location |-> "line 4466, col 34 to line 4549, col 75 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {ofc1}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc0),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "swRecoverySendStatusMsg" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<SW_RESOLVE_PROC, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 42,
   name |-> "swRecoverySendStatusMsg",
   location |-> "line 4466, col 34 to line 4549, col 75 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "swRecoverySendStatusMsg" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<SW_RESOLVE_PROC, s0>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 43,
   name |-> "swRecoverySendStatusMsg",
   location |-> "line 4466, col 34 to line 4549, col 75 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_SUSPEND),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_SUSPEND) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 44,
   name |-> "ControllerEventHandlerProc",
   location |-> "line 6684, col 37 to line 6884, col 78 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [sw |-> s0, type |-> START_RESET_IR] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_SUSPEND]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<[sw |-> s0, type |-> TOPO_MOD, status |-> SW_RUN]>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "getIRsToBeChecked" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 45,
   name |-> "NibEventHandlerProc",
   location |-> "line 5268, col 30 to line 5346, col 71 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [sw |-> s0, type |-> START_RESET_IR] @@ <<ofc1, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], index |-> 2] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_RUN]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "getIRsToBeChecked" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThreadReleaseSemaphoreAndScheduledSet" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> <<[tag |-> <<ofc1, t0>>, item |-> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL], id |-> 2]>>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 46,
   name |-> "ControllerThreadReleaseSemaphoreAndScheduledSet",
   location |-> "line 6177, col 58 to line 6337, col 99 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [sw |-> s0, type |-> START_RESET_IR] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_RUN]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "getIRsToBeChecked" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> << >>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 47,
   name |-> "getIRsToBeChecked",
   location |-> "line 7011, col 28 to line 7088, col 69 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [sw |-> s0, type |-> START_RESET_IR] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_RUN]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<[swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> << >>),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 48,
   name |-> "ControllerEvenHanlderRemoveEventFromQueue",
   location |-> "line 6886, col 52 to line 7009, col 93 of module PlannedOfcFailoverWithoutReconciliation"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc1, t0>>, <<ofc1, CONT_MONITOR>>, <<ofc1, CONT_EVENT>>, <<rc0, CONT_SEQ>>},
 FirstInstall |-> <<1>>,
 IR2SW |-> <<s0>>,
 IRQueueEntries |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 IRQueueNIB |-> << >>,
 IRStatus |-> <<IR_DONE>>,
 Installer2OfaBuff |-> (s0 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 NIBEventLog |-> (s0 :> <<>>),
 NIBSwSuspensionStatus |-> (s0 :> SW_RUN),
 NicAsic2OfaBuff |-> (s0 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>>),
 SetScheduledIRs |-> (s0 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<NIC_ASIC_IN, s0>>, <<SW_FAILURE_PROC, s0>>, <<INSTALLER, s0>>, <<OFA_IN, s0>>, <<OFA_OUT, s0>>, <<NIC_ASIC_OUT, s0>>},
 TCAM |-> (s0 :> <<1>>),
 auxEventCounter |-> 2,
 controlMsgCounter |-> (s0 :> 2),
 controller2Switch |-> (s0 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<ofc1, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerGlobalLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerLocalLock |-> (ofc0 :> <<NO_LOCK, NO_LOCK>> @@ ofc1 :> <<NO_LOCK, NO_LOCK>> @@ rc0 :> <<NO_LOCK, NO_LOCK>>),
 controllerRoleInSW |-> (ofc0 :> (s0 :> ROLE_MASTER) @@ ofc1 :> (s0 :> ROLE_SLAVE)),
 controllerSet |-> (<<ASYNC_NET_EVE_GEN, s0>> :> {}),
 controllerSet_ |-> (<<SW_FAILURE_PROC, s0>> :> {}),
 controllerSet_s |-> (<<SW_RESOLVE_PROC, s0>> :> {}),
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc1, t0>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc1, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ ofc1 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc1, t0>> :> NotFailed @@ <<ofc1, CONT_MONITOR>> :> NotFailed @@ <<ofc1, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed),
 currSW |-> (<<ofc0, FAILOVER_HANDLER>> :> 0 @@ <<ofc1, FAILOVER_HANDLER>> :> s0),
 dependencyGraph |-> {},
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0]),
 entry |-> (<<ofc0, FAILOVER_HANDLER>> :> [type |-> 0] @@ <<ofc1, FAILOVER_HANDLER>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 2),
 event |-> (<<ofc0, NIB_EVENT_HANDLER>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, status |-> SW_RUN]),
 eventID |-> (<<ASYNC_NET_EVE_GEN, s0>> :> 0),
 eventMsg |-> (<<ASYNC_NET_EVE_GEN, s0>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "cpu"),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {"cpu"}),
 idThreadWorkingOnIR |-> (ofc0 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>> @@ ofc1 :> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>),
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> ROLE_REQ, to |-> s0, from |-> ofc1, roletype |-> ROLE_EQUAL]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0]),
 installedBy |-> <<{ofc0}>>,
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> [IR |-> 1, from |-> ofc0]),
 irCounter |-> 2,
 isOfcEnabled |-> (ofc0 :> TRUE @@ ofc1 :> TRUE),
 localEventLog |-> (ofc0 :> (s0 :> <<>>) @@ ofc1 :> (s0 :> <<>>)),
 masterState |-> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE @@ rc0 :> ROLE_MASTER),
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2] @@ <<ofc1, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> INSTALLED_SUCCESSFULLY, to |-> ofc0, IR |-> 1, from |-> s0] @@ <<ofc1, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_SEQ>> :> 1),
 nextToSent |-> (<<ofc0, t0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1] @@ <<ofc1, t0>> :> [type |-> ROLE_REQ, to |-> s0, roletype |-> ROLE_EQUAL]),
 nibEventQueue |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {"cpu"}),
 notifOFC |-> (<<ofc0, CONT_EVENT>> :> ofc1 @@ <<ofc1, CONT_EVENT>> :> 0),
 nxtController |-> (<<ASYNC_NET_EVE_GEN, s0>> :> ""),
 nxtController_ |-> (<<SW_FAILURE_PROC, s0>> :> ofc1),
 nxtController_s |-> (<<SW_RESOLVE_PROC, s0>> :> ofc1),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> INSTALL_FLOW, to |-> s0, IR |-> 1, from |-> ofc0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> [IR |-> 1, from |-> ofc0]),
 ofcFailoverStateNIB |-> (ofc0 :> FAILOVER_NONE @@ ofc1 :> FAILOVER_INIT),
 ofcID |-> (<<rc0, CONT_SEQ>> :> ofc0),
 ofcModuleInitStatus |-> (ofc0 :> (CONT_EVENT :> INIT_RUN) @@ ofc1 :> (CONT_EVENT :> INIT_NONE)),
 ofcModuleTerminationStatus |-> (ofc0 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE) @@ ofc1 :> (t0 :> TERMINATE_NONE @@ CONT_MONITOR :> TERMINATE_NONE @@ CONT_EVENT :> TERMINATE_NONE)),
 ofcSwSuspensionStatus |-> (ofc0 :> (s0 :> SW_RUN) @@ ofc1 :> (s0 :> SW_RUN)),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc0, FAILOVER_HANDLER>> :> "ofcFailoverHandlerProc" @@ <<ofc1, t0>> :> "ControllerThread" @@ <<ofc1, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc1, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc1, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc1, NIB_EVENT_HANDLER>> :> "NibEventHandlerProc" @@ <<ofc1, FAILOVER_HANDLER>> :> "WaitForSwitchUpdateRoleACK" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<ASYNC_NET_EVE_GEN, s0>> :> "asyncNetEventGenProc" @@ <<"proc", OFC_FAILOVER>> :> "ofcFailoverCurrMasterTerminate"),
 prevLockHolder |-> (<<SW_RESOLVE_PROC, s0>> :> <<NO_LOCK, NO_LOCK>>),
 prevLockHolder_ |-> (<<SW_FAILURE_PROC, s0>> :> <<NIC_ASIC_OUT, s0>>),
 processedEvents |-> (ofc0 :> {1, 2} @@ ofc1 :> {}),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "cpu"),
 removeRow |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> -1),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 roleUpdateStatus |-> (ofc0 :> (s0 :> [status |-> IR_NONE, roletpye |-> ROLE_EMPTY]) @@ ofc1 :> (s0 :> [status |-> IR_SENT, roletype |-> ROLE_EQUAL])),
 rowIndex |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1 @@ <<ofc1, t0>> :> 1),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {} @@ <<ofc1, CONT_EVENT>> :> {}),
 setRecoveredSwWithSlaveRole |-> (ofc0 :> {} @@ ofc1 :> {}),
 setScheduledRoleUpdates |-> (ofc0 :> {} @@ ofc1 :> {s0}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0]),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [type |-> 0]),
 stepOfFailure |-> (<<ofc0, CONT_MONITOR>> :> 0 @@ <<ofc1, CONT_MONITOR>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0 @@ <<ofc1, t0>> :> 0),
 stepOfFailure_co |-> (<<ofc0, CONT_EVENT>> :> 0 @@ <<ofc1, CONT_EVENT>> :> 0),
 subscribeList |-> [IRQueueNIB |-> {ofc0}, SwSuspensionStatus |-> {ofc0, ofc1}],
 subscriberOfcSet |-> (<<rc0, CONT_SEQ>> :> {}),
 swFailedNum |-> (s0 :> 1),
 swNumEvent |-> (s0 :> 0),
 swSeqChangedStatus |-> (ofc0 :> <<>> @@ ofc1 :> <<[swID |-> s0, type |-> OFA_DOWN, num |-> 1, auxNum |-> 1], [swID |-> s0, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP], num |-> 2, auxNum |-> 2]>>),
 swSet |-> (<<ofc0, FAILOVER_HANDLER>> :> {} @@ <<ofc1, FAILOVER_HANDLER>> :> {}),
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> (ofc0 :> <<>> @@ ofc1 :> <<>>),
 switchControllerRoleStatus |-> (s0 :> (ofc0 :> ROLE_MASTER @@ ofc1 :> ROLE_SLAVE)),
 switchGeneratedEventSet |-> (s0 :> {1, 2}),
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_SEQ>> :> {}),
 workerLocalQueue |-> (ofc0 :> << >> @@ ofc1 :> << >>),
 workerThreadRanking |-> (t0 :> 1)
]
>>

@!@!@STARTMSG 2262:0 @!@!@
TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
@!@!@ENDMSG 2262 @!@!@
@!@!@STARTMSG 2187:0 @!@!@
Running breadth-first search Model-Checking with fp 0 and seed 1917868887991569517 with 2 workers on 4 cores with 1433MB heap and 3221MB offheap memory [pid: 51597] (Mac OS X 10.14.4 x86_64, AdoptOpenJDK 14.0.1 x86_64, OffHeapDiskFPSet, DiskStateQueue).
@!@!@ENDMSG 2187 @!@!@
@!@!@STARTMSG 2220:0 @!@!@
Starting SANY...
@!@!@ENDMSG 2220 @!@!@
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/RCUnplannedFailover/bothTransientFailuresNIB/ScenarioIII.toolbox/Model_SnapShot_1613371972005/MC.tla
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/RCUnplannedFailover/bothTransientFailuresNIB/ScenarioIII.toolbox/Model_SnapShot_1613371972005/ScenarioIII.tla
Warning: symbols were renamed.
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/TLC.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Integers.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Sequences.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/FiniteSets.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Naturals.tla
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module ScenarioIII
Semantic processing of module MC
@!@!@STARTMSG 2219:0 @!@!@
SANY finished.
@!@!@ENDMSG 2219 @!@!@
@!@!@STARTMSG 2185:0 @!@!@
Starting... (2021-03-25 22:38:00)
@!@!@ENDMSG 2185 @!@!@
@!@!@STARTMSG 2212:0 @!@!@
Implied-temporal checking--satisfiability problem has 1 branches.
@!@!@ENDMSG 2212 @!@!@
@!@!@STARTMSG 2189:0 @!@!@
Computing initial states...
@!@!@ENDMSG 2189 @!@!@
@!@!@STARTMSG 2190:0 @!@!@
Finished computing initial states: 1 distinct state generated at 2021-03-25 22:38:06.
@!@!@ENDMSG 2190 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 466 total distinct states at (2021-03-25 22:38:09)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-03-25 22:38:09
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(18) at 2021-03-25 22:38:09: 957 states generated (957 s/min), 562 distinct states found (562 ds/min), 94 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 41010 total distinct states at (2021-03-25 22:39:09)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2116:1 @!@!@
Temporal properties were violated.

@!@!@ENDMSG 2116 @!@!@
@!@!@STARTMSG 2264:1 @!@!@
The following behavior constitutes a counter-example:

@!@!@ENDMSG 2264 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
1: <Initial predicate>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> <<>>)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [type |-> 0])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendReadTransaction" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
2: <RCSendReadTransaction line 4456, col 32 to line 4520, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [type |-> 0])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "SeqReadNIBStates"]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
3: <NIBEventHandling line 3731, col 27 to line 3986, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
4: <NIBSendBackIfAny line 3988, col 27 to line 4048, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
5: <RCNIBEventHanderProc line 4291, col 31 to line 4379, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
6: <SequencerProc line 4522, col 24 to line 4573, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
7: <RCComputeNextIR2Schedule line 4575, col 35 to line 4643, col 64 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
8: <SchedulerMechanism line 4645, col 29 to line 4703, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendPrepareIR2NIB" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
9: <RCSendPrepareIR2NIB line 4705, col 30 to line 4767, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
10: <NIBEventHandling line 3731, col 27 to line 3986, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2OFC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
11: <SequencerProc line 4522, col 24 to line 4573, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2OFC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
12: <NIBSendBackIfAny line 3988, col 27 to line 4048, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
13: <OFCNIBEventHanderProc line 4931, col 32 to line 4997, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
14: <ControllerThread line 5001, col 27 to line 5054, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadGetNextIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
15: <OFCThreadGetNextIR line 5056, col 29 to line 5112, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCUpdateIRQueueIRTag" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
16: <OFCUpdateIRQueueIRTag line 5114, col 32 to line 5175, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCStartSchedulingIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
17: <OFCStartSchedulingIR line 5177, col 31 to line 5250, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
18: <NIBEventHandling line 3731, col 27 to line 3986, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
19: <NIBSendBackIfAny line 3988, col 27 to line 4048, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
20: <ControllerThreadSendIR line 5331, col 33 to line 5413, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
21: <ControllerThreadForwardIRInner line 5415, col 41 to line 5512, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
22: <NIBEventHandling line 3731, col 27 to line 3986, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
23: <SwitchSimpleProcess line 2530, col 30 to line 2595, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
24: <ControllerThreadUnlockSemaphore line 5514, col 42 to line 5609, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
25: <NIBSendBackIfAny line 3988, col 27 to line 4048, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
26: <RCFailure line 4179, col 20 to line 4220, col 67 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
27: <RCNIBEventHanderProc line 4291, col 31 to line 4379, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
28: <OFCMonitorCheckIfMastr line 6526, col 33 to line 6600, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
29: <ControllerUpdateIR2 line 6696, col 30 to line 6767, col 75 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
30: <NIBEventHandling line 3731, col 27 to line 3986, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
31: <MonitoringServerRemoveFromQueue line 6602, col 42 to line 6694, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
32: <OFCRemoveIRFromIRQueueOFC line 5611, col 36 to line 5705, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
33: <NIBSendBackIfAny line 3988, col 27 to line 4048, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverReadFromNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
34: <RCFailoverReadFromNIB line 4224, col 32 to line 4287, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
35: <RCNIBEventHandlerFailover line 4381, col 36 to line 4451, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
36: <RCNIBEventHanderProc line 4291, col 31 to line 4379, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
37: <RCComputeNextIR2Schedule line 4575, col 35 to line 4643, col 64 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
38: <NIBEventHandling line 3731, col 27 to line 3986, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
39: <NIBSendBackIfAny line 3988, col 27 to line 4048, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2218:4 @!@!@
40: Stuttering
@!@!@ENDMSG 2218 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 01s at 2021-03-25 22:39:10
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2201:0 @!@!@
The coverage statistics at 2021-03-25 22:39:10
@!@!@ENDMSG 2201 @!@!@
@!@!@STARTMSG 2773:0 @!@!@
<Init line 2390, col 1 to line 2390, col 4 of module ScenarioIII>: 2:2
@!@!@ENDMSG 2773 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2391, col 12 to line 2391, col 44 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2392, col 12 to line 2392, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2393, col 12 to line 2393, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2394, col 12 to line 2394, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2395, col 12 to line 2397, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2398, col 12 to line 2401, col 59 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2402, col 12 to line 2402, col 36 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2403, col 12 to line 2403, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2404, col 12 to line 2404, col 35 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2405, col 12 to line 2406, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2407, col 12 to line 2407, col 30 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2408, col 12 to line 2408, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2409, col 12 to line 2409, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2410, col 12 to line 2410, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2411, col 12 to line 2411, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2412, col 12 to line 2412, col 37 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2413, col 12 to line 2413, col 47 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2414, col 12 to line 2414, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2415, col 12 to line 2415, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2416, col 30 to line 2416, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2416, col 71 to line 2416, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2416, col 72 to line 2416, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2416, col 88 to line 2416, col 107 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2416, col 88 to line 2416, col 92 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2416, col 97 to line 2416, col 107 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2416, col 84 to line 2416, col 85 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2416, col 43 to line 2416, col 68 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2417, col 32 to line 2417, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2205, col 28 to line 2220, col 114 of module ScenarioIII: 2:32
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2205, col 52 to line 2220, col 113 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2205, col 55 to line 2205, col 81 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2205, col 56 to line 2205, col 81 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2205, col 68 to line 2205, col 81 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2205, col 65 to line 2205, col 65 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2206, col 55 to line 2207, col 88 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2206, col 56 to line 2207, col 88 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2206, col 71 to line 2207, col 88 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2206, col 75 to line 2206, col 88 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2207, col 75 to line 2207, col 88 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2206, col 68 to line 2206, col 68 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2208, col 55 to line 2209, col 88 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2208, col 67 to line 2209, col 88 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2208, col 68 to line 2209, col 88 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2208, col 80 to line 2209, col 88 of module ScenarioIII: 20
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2208, col 83 to line 2208, col 96 of module ScenarioIII: 20
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2209, col 83 to line 2209, col 88 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2208, col 77 to line 2208, col 77 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2208, col 64 to line 2208, col 64 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2210, col 55 to line 2212, col 98 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2210, col 58 to line 2210, col 75 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2211, col 58 to line 2212, col 98 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2211, col 70 to line 2212, col 98 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2211, col 82 to line 2212, col 98 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2211, col 85 to line 2211, col 98 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2212, col 85 to line 2212, col 98 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2211, col 79 to line 2211, col 79 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2211, col 67 to line 2211, col 67 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2213, col 55 to line 2216, col 126 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2217, col 55 to line 2217, col 90 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2218, col 56 to line 2220, col 113 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2205, col 35 to line 2205, col 49 of module ScenarioIII: 2:14
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2417, col 53 to line 2417, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2418, col 21 to line 2419, col 125 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2418, col 56 to line 2419, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2418, col 57 to line 2419, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2418, col 79 to line 2419, col 125 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2418, col 82 to line 2418, col 86 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2419, col 82 to line 2419, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2418, col 69 to line 2418, col 76 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2418, col 34 to line 2418, col 53 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2420, col 12 to line 2420, col 33 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2421, col 12 to line 2421, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2422, col 12 to line 2422, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2423, col 12 to line 2423, col 27 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2424, col 12 to line 2424, col 55 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2425, col 12 to line 2425, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2426, col 12 to line 2426, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2427, col 12 to line 2427, col 42 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2428, col 12 to line 2428, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2429, col 12 to line 2429, col 159 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2430, col 12 to line 2430, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2431, col 12 to line 2431, col 57 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2432, col 12 to line 2432, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2433, col 12 to line 2433, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2434, col 12 to line 2434, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2435, col 12 to line 2435, col 25 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2436, col 12 to line 2436, col 24 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2437, col 12 to line 2437, col 23 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2438, col 12 to line 2438, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2439, col 12 to line 2439, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2440, col 12 to line 2440, col 54 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2441, col 12 to line 2441, col 53 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2442, col 12 to line 2442, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2443, col 12 to line 2443, col 46 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2445, col 12 to line 2445, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2446, col 12 to line 2446, col 41 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2448, col 12 to line 2448, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2450, col 12 to line 2450, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2452, col 12 to line 2452, col 73 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2454, col 12 to line 2454, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2456, col 12 to line 2456, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2458, col 12 to line 2458, col 63 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2460, col 12 to line 2460, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2461, col 12 to line 2461, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2462, col 12 to line 2462, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2464, col 12 to line 2464, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2465, col 12 to line 2465, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2466, col 12 to line 2466, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2468, col 12 to line 2468, col 82 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2469, col 12 to line 2469, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2470, col 12 to line 2470, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2471, col 12 to line 2471, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2472, col 12 to line 2472, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2473, col 12 to line 2473, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2474, col 12 to line 2474, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2476, col 12 to line 2476, col 91 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2477, col 12 to line 2477, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2479, col 12 to line 2479, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2480, col 12 to line 2480, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2481, col 12 to line 2481, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2482, col 12 to line 2482, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2483, col 12 to line 2483, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2484, col 12 to line 2484, col 58 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2485, col 12 to line 2485, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2487, col 12 to line 2487, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2488, col 12 to line 2488, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2489, col 12 to line 2489, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2490, col 12 to line 2490, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2492, col 12 to line 2492, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2493, col 12 to line 2493, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2494, col 12 to line 2494, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2495, col 12 to line 2495, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2496, col 12 to line 2496, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2497, col 12 to line 2497, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2498, col 12 to line 2498, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2499, col 12 to line 2499, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2500, col 12 to line 2500, col 98 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2502, col 12 to line 2502, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2503, col 12 to line 2503, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2504, col 12 to line 2504, col 62 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2505, col 12 to line 2505, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2507, col 12 to line 2507, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2508, col 12 to line 2508, col 89 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2509, col 12 to line 2509, col 86 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2510, col 12 to line 2510, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2511, col 12 to line 2528, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchSimpleProcess line 2530, col 1 to line 2530, col 25 of module ScenarioIII>: 856:5262
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2530, col 33 to line 2530, col 64 of module ScenarioIII: 87357
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2530, col 33 to line 2530, col 40 of module ScenarioIII: 82095
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2531, col 33 to line 2531, col 75 of module ScenarioIII: 87357
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2531, col 33 to line 2531, col 57 of module ScenarioIII: 82095
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2531, col 61 to line 2531, col 75 of module ScenarioIII: 82095
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2532, col 33 to line 2532, col 67 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2532, col 33 to line 2532, col 63 of module ScenarioIII: 82095
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2533, col 33 to line 2533, col 69 of module ScenarioIII: 10524
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2533, col 33 to line 2533, col 46 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2533, col 50 to line 2533, col 69 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2534, col 33 to line 2534, col 75 of module ScenarioIII: 10524
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2534, col 33 to line 2534, col 42 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2534, col 48 to line 2534, col 75 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2535, col 33 to line 2535, col 108 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2536, col 33 to line 2537, col 86 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2538, col 33 to line 2538, col 125 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2539, col 33 to line 2539, col 90 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2540, col 33 to line 2540, col 110 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2541, col 33 to line 2543, col 109 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2544, col 33 to line 2546, col 124 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2544, col 40 to line 2545, col 65 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2544, col 43 to line 2544, col 65 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2545, col 43 to line 2545, col 65 of module ScenarioIII: 4242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2547, col 33 to line 2547, col 66 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2548, col 33 to line 2548, col 81 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2549, col 33 to line 2595, col 77 of module ScenarioIII: 5262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchRcvPacket line 2599, col 1 to line 2599, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2599, col 29 to line 2599, col 56 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2600, col 29 to line 2600, col 72 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2603, col 29 to line 2603, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2609, col 29 to line 2609, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2610, col 29 to line 2610, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2611, col 29 to line 2611, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2612, col 29 to line 2656, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicInsertToOfaBuff line 2658, col 1 to line 2658, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2658, col 42 to line 2658, col 82 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2662, col 53 to line 2662, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2663, col 53 to line 2663, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2664, col 53 to line 2664, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2665, col 53 to line 2665, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2666, col 53 to line 2666, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2667, col 53 to line 2667, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2668, col 53 to line 2669, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2670, col 42 to line 2736, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFromOFAPacket line 2741, col 1 to line 2741, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2741, col 33 to line 2741, col 64 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2742, col 33 to line 2742, col 60 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2743, col 33 to line 2743, col 65 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2744, col 33 to line 2744, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2747, col 33 to line 2747, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2752, col 33 to line 2752, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2753, col 33 to line 2753, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2754, col 33 to line 2801, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicSendOutMsg line 2803, col 1 to line 2803, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2803, col 37 to line 2803, col 72 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2810, col 48 to line 2810, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2811, col 48 to line 2811, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2812, col 48 to line 2812, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2813, col 48 to line 2813, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2814, col 48 to line 2814, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2815, col 48 to line 2815, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2816, col 48 to line 2817, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2818, col 37 to line 2875, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcIn line 2880, col 1 to line 2880, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2880, col 29 to line 2880, col 56 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2881, col 29 to line 2881, col 55 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2882, col 29 to line 2882, col 61 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2885, col 29 to line 2885, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2886, col 29 to line 2886, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2891, col 29 to line 2891, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2892, col 29 to line 2892, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2893, col 29 to line 2937, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcessPacket line 2939, col 1 to line 2939, col 28 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2939, col 36 to line 2939, col 70 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2943, col 47 to line 2943, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2945, col 58 to line 2945, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2948, col 58 to line 2948, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2949, col 47 to line 2949, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2950, col 47 to line 2950, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2951, col 47 to line 2951, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2952, col 47 to line 2952, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2953, col 47 to line 2954, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2955, col 36 to line 3009, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcOut line 3014, col 1 to line 3014, col 22 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3014, col 30 to line 3014, col 58 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3015, col 30 to line 3015, col 56 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3016, col 30 to line 3016, col 62 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3019, col 30 to line 3019, col 47 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3020, col 30 to line 3020, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3021, col 30 to line 3021, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3024, col 30 to line 3024, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3025, col 30 to line 3070, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SendInstallationConfirmation line 3072, col 1 to line 3072, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3072, col 42 to line 3072, col 82 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3076, col 53 to line 3076, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3077, col 53 to line 3079, col 176 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3080, col 53 to line 3080, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3081, col 53 to line 3081, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3082, col 53 to line 3082, col 113 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3083, col 53 to line 3083, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3084, col 53 to line 3085, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3086, col 42 to line 3151, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerProc line 3156, col 1 to line 3156, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3156, col 33 to line 3156, col 64 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3157, col 33 to line 3157, col 56 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3158, col 33 to line 3158, col 67 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3161, col 33 to line 3161, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3162, col 33 to line 3162, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3165, col 33 to line 3165, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3166, col 33 to line 3166, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3167, col 33 to line 3214, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerInsert2TCAM line 3216, col 1 to line 3216, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3216, col 40 to line 3216, col 78 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3220, col 51 to line 3220, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3221, col 51 to line 3221, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3222, col 51 to line 3222, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3223, col 51 to line 3223, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3224, col 51 to line 3224, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3225, col 51 to line 3225, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3226, col 51 to line 3226, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3227, col 51 to line 3229, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3230, col 40 to line 3295, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerSendConfirmation line 3297, col 1 to line 3297, col 37 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3297, col 45 to line 3297, col 88 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3301, col 56 to line 3301, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3302, col 56 to line 3302, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3303, col 56 to line 3303, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3304, col 56 to line 3304, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3305, col 56 to line 3305, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3306, col 56 to line 3306, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3307, col 56 to line 3308, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3309, col 45 to line 3384, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFailure line 3390, col 1 to line 3390, col 19 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3390, col 27 to line 3390, col 52 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3391, col 27 to line 3391, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3391, col 43 to line 3391, col 112 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3391, col 44 to line 3391, col 55 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3391, col 64 to line 3391, col 111 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3391, col 74 to line 3391, col 111 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2242, col 38 to line 2242, col 101 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2242, col 70 to line 2242, col 100 of module ScenarioIII: 328376
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2242, col 45 to line 2242, col 67 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3391, col 104 to line 3391, col 110 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3392, col 27 to line 3392, col 50 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3393, col 27 to line 3393, col 37 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3393, col 28 to line 3393, col 37 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2350, col 15 to line 2350, col 58 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2350, col 38 to line 2350, col 58 of module ScenarioIII: 109378
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2350, col 24 to line 2350, col 35 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3394, col 27 to line 3396, col 55 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3397, col 65 to line 3397, col 85 of module ScenarioIII: 81075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3397, col 36 to line 3397, col 62 of module ScenarioIII: 81075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2244, col 28 to line 2244, col 63 of module ScenarioIII: 81075:162150
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2244, col 49 to line 2244, col 62 of module ScenarioIII: 162150
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2244, col 35 to line 2244, col 46 of module ScenarioIII: 81075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3397, col 55 to line 3397, col 61 of module ScenarioIII: 81075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3398, col 27 to line 3398, col 53 of module ScenarioIII: 67433
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3403, col 38 to line 3403, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3404, col 38 to line 3404, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3406, col 29 to line 3406, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3411, col 38 to line 3413, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3414, col 38 to line 3414, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3415, col 38 to line 3415, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3416, col 38 to line 3416, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3417, col 38 to line 3417, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3419, col 49 to line 3419, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3420, col 49 to line 3422, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3423, col 49 to line 3423, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3425, col 49 to line 3427, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3428, col 38 to line 3428, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3433, col 49 to line 3433, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3435, col 60 to line 3435, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3436, col 60 to line 3438, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3439, col 60 to line 3439, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3441, col 60 to line 3443, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3444, col 49 to line 3444, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3449, col 60 to line 3449, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3453, col 71 to line 3453, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3454, col 71 to line 3457, col 199 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3458, col 71 to line 3458, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3460, col 71 to line 3462, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3463, col 60 to line 3463, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3468, col 71 to line 3468, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3469, col 71 to line 3469, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3470, col 71 to line 3470, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3471, col 71 to line 3473, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3474, col 71 to line 3474, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3477, col 71 to line 3481, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3482, col 38 to line 3485, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3486, col 27 to line 3486, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3487, col 27 to line 3522, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchResolveFailure line 3526, col 1 to line 3526, col 26 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3526, col 34 to line 3526, col 66 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3527, col 34 to line 3527, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3527, col 47 to line 3527, col 110 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3527, col 48 to line 3527, col 56 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3527, col 65 to line 3527, col 109 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3527, col 75 to line 3527, col 109 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2247, col 35 to line 2249, col 102 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2247, col 67 to line 2249, col 101 of module ScenarioIII: 328376
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2247, col 42 to line 2247, col 64 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3527, col 102 to line 3527, col 108 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3528, col 34 to line 3528, col 66 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3533, col 36 to line 3533, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3538, col 45 to line 3540, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3541, col 45 to line 3541, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3542, col 45 to line 3542, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3543, col 45 to line 3543, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3544, col 45 to line 3544, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3546, col 56 to line 3546, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3547, col 56 to line 3550, col 198 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3551, col 56 to line 3551, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3553, col 56 to line 3555, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3556, col 45 to line 3556, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3561, col 56 to line 3561, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3562, col 56 to line 3562, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3564, col 67 to line 3564, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3565, col 67 to line 3567, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3568, col 67 to line 3568, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3569, col 67 to line 3572, col 209 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3573, col 56 to line 3573, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3578, col 67 to line 3578, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3580, col 78 to line 3580, col 168 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3581, col 78 to line 3584, col 220 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3585, col 78 to line 3585, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3587, col 78 to line 3589, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3594, col 78 to line 3594, col 147 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3598, col 89 to line 3598, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3599, col 89 to line 3602, col 231 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3603, col 89 to line 3603, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3605, col 89 to line 3607, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3610, col 78 to line 3613, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3614, col 56 to line 3614, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3615, col 45 to line 3618, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3619, col 34 to line 3619, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3620, col 34 to line 3664, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ghostProc line 3668, col 1 to line 3668, col 15 of module ScenarioIII>: 972:1019
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3668, col 23 to line 3668, col 44 of module ScenarioIII: 83113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3668, col 23 to line 3668, col 30 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3669, col 26 to line 3669, col 58 of module ScenarioIII: 83113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3669, col 26 to line 3669, col 35 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3669, col 39 to line 3669, col 58 of module ScenarioIII: 82094
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3670, col 26 to line 3670, col 48 of module ScenarioIII: 3057
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3670, col 26 to line 3670, col 38 of module ScenarioIII: 2038
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3670, col 42 to line 3670, col 48 of module ScenarioIII: 2038
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3671, col 26 to line 3671, col 62 of module ScenarioIII: 2038
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3671, col 26 to line 3671, col 39 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3671, col 43 to line 3671, col 62 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3672, col 23 to line 3685, col 70 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3686, col 23 to line 3688, col 114 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3689, col 23 to line 3689, col 56 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3690, col 23 to line 3690, col 61 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3691, col 23 to line 3727, col 67 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBEventHandling line 3731, col 1 to line 3731, col 22 of module ScenarioIII>: 3197:15589
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3731, col 30 to line 3731, col 58 of module ScenarioIII: 56636
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3731, col 30 to line 3731, col 37 of module ScenarioIII: 41047
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2260, col 25 to line 2260, col 73 of module ScenarioIII: 40991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 25 to line 2260, col 61 of module ScenarioIII: 25402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 65 to line 2260, col 73 of module ScenarioIII: 25402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3732, col 41 to line 3732, col 44 of module ScenarioIII: 25402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3733, col 30 to line 3733, col 41 of module ScenarioIII: 40991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3733, col 30 to line 3733, col 34 of module ScenarioIII: 25402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3733, col 38 to line 3733, col 41 of module ScenarioIII: 25402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3734, col 34 to line 3734, col 105 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3736, col 43 to line 3736, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3737, col 38 to line 3737, col 93 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3738, col 33 to line 3738, col 57 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3739, col 41 to line 3739, col 93 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3740, col 41 to line 3740, col 60 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3741, col 44 to line 3741, col 68 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3742, col 56 to line 3742, col 90 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3747, col 63 to line 3747, col 174 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3750, col 63 to line 3750, col 168 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3751, col 63 to line 3758, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3759, col 67 to line 3759, col 102 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3762, col 74 to line 3762, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3767, col 74 to line 3767, col 185 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3768, col 74 to line 3771, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3772, col 74 to line 3772, col 132 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3773, col 74 to line 3778, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3779, col 78 to line 3779, col 124 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3780, col 85 to line 3781, col 177 of module ScenarioIII: 2706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3782, col 85 to line 3782, col 147 of module ScenarioIII: 2706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3783, col 85 to line 3786, col 170 of module ScenarioIII: 2706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3787, col 85 to line 3787, col 143 of module ScenarioIII: 2706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3788, col 85 to line 3794, col 107 of module ScenarioIII: 2706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3795, col 89 to line 3795, col 130 of module ScenarioIII: 12883
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3796, col 96 to line 3799, col 181 of module ScenarioIII: 25
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3800, col 96 to line 3800, col 153 of module ScenarioIII: 25
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3801, col 96 to line 3808, col 118 of module ScenarioIII: 25
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3809, col 100 to line 3809, col 141 of module ScenarioIII: 12858
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3810, col 107 to line 3813, col 192 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3814, col 107 to line 3814, col 165 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3815, col 107 to line 3822, col 129 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3823, col 111 to line 3823, col 157 of module ScenarioIII: 12858
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3828, col 118 to line 3828, col 229 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3829, col 118 to line 3837, col 140 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3838, col 122 to line 3838, col 155 of module ScenarioIII: 12858
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3839, col 129 to line 3840, col 222 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3841, col 129 to line 3841, col 197 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3842, col 132 to line 3842, col 194 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3843, col 140 to line 3843, col 233 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3844, col 140 to line 3844, col 197 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3844, col 154 to line 3844, col 197 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2159, col 30 to line 2160, col 76 of module ScenarioIII: 3839:1908
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3844, col 168 to line 3844, col 177 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3844, col 180 to line 3844, col 196 of module ScenarioIII: 1526
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3846, col 140 to line 3847, col 165 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3848, col 129 to line 3853, col 151 of module ScenarioIII: 3839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3854, col 133 to line 3854, col 180 of module ScenarioIII: 9019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3855, col 140 to line 3856, col 234 of module ScenarioIII: 3029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3857, col 140 to line 3858, col 234 of module ScenarioIII: 3029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3859, col 140 to line 3859, col 231 of module ScenarioIII: 3029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3860, col 140 to line 3863, col 225 of module ScenarioIII: 3029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3864, col 140 to line 3864, col 197 of module ScenarioIII: 3029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3865, col 140 to line 3868, col 162 of module ScenarioIII: 3029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3869, col 144 to line 3869, col 190 of module ScenarioIII: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3874, col 151 to line 3874, col 256 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3875, col 151 to line 3880, col 173 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3881, col 155 to line 3881, col 191 of module ScenarioIII: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3882, col 162 to line 3883, col 256 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3884, col 162 to line 3885, col 256 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3886, col 162 to line 3887, col 256 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3888, col 162 to line 3888, col 277 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3889, col 162 to line 3890, col 256 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3891, col 162 to line 3891, col 248 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3892, col 162 to line 3895, col 190 of module ScenarioIII: 2951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3896, col 166 to line 3896, col 205 of module ScenarioIII: 3039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3897, col 170 to line 3909, col 230 of module ScenarioIII: 3039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3911, col 173 to line 3914, col 201 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3915, col 162 to line 3916, col 184 of module ScenarioIII: 3039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3917, col 151 to line 3917, col 175 of module ScenarioIII: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3918, col 129 to line 3919, col 153 of module ScenarioIII: 9019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3920, col 118 to line 3920, col 145 of module ScenarioIII: 12858
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3922, col 52 to line 3931, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3933, col 41 to line 3939, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3940, col 34 to line 3940, col 58 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3941, col 41 to line 3941, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3942, col 41 to line 3942, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3943, col 41 to line 3943, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3944, col 41 to line 3944, col 86 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3945, col 41 to line 3946, col 83 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3947, col 30 to line 3986, col 74 of module ScenarioIII: 15589
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBSendBackIfAny line 3988, col 1 to line 3988, col 22 of module ScenarioIII>: 3159:15645
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3988, col 30 to line 3988, col 58 of module ScenarioIII: 56686
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3988, col 30 to line 3988, col 37 of module ScenarioIII: 41041
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3989, col 33 to line 3989, col 62 of module ScenarioIII: 15645
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3990, col 44 to line 3990, col 61 of module ScenarioIII: 6984
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2302, col 15 to line 2303, col 81 of module ScenarioIII: 6984
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2302, col 15 to line 2302, col 71 of module ScenarioIII: 6984
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2303, col 16 to line 2303, col 81 of module ScenarioIII: 6735
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3991, col 49 to line 3991, col 100 of module ScenarioIII: 6735
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3992, col 52 to line 3992, col 55 of module ScenarioIII: 249
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3993, col 52 to line 3993, col 67 of module ScenarioIII: 249
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3994, col 41 to line 3994, col 57 of module ScenarioIII: 6984
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3995, col 44 to line 3995, col 74 of module ScenarioIII: 8661
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3996, col 49 to line 3996, col 102 of module ScenarioIII: 2354
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3997, col 52 to line 3997, col 55 of module ScenarioIII: 6307
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3998, col 52 to line 3998, col 68 of module ScenarioIII: 6307
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3999, col 41 to line 3999, col 56 of module ScenarioIII: 8661
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4000, col 30 to line 4000, col 81 of module ScenarioIII: 15645
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4001, col 30 to line 4001, col 75 of module ScenarioIII: 15645
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4002, col 30 to line 4048, col 74 of module ScenarioIII: 15645
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBReconciliation line 4050, col 1 to line 4050, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4050, col 31 to line 4050, col 60 of module ScenarioIII: 41035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4051, col 31 to line 4051, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4052, col 31 to line 4052, col 53 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4053, col 31 to line 4053, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4054, col 31 to line 4054, col 53 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4055, col 31 to line 4055, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4056, col 31 to line 4056, col 44 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4057, col 31 to line 4057, col 45 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4058, col 31 to line 4058, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4059, col 31 to line 4059, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4060, col 31 to line 4104, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ChangeNIBStatusToNormal line 4106, col 1 to line 4106, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4106, col 37 to line 4106, col 72 of module ScenarioIII: 41035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4107, col 37 to line 4107, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4108, col 37 to line 4111, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4112, col 37 to line 4112, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4113, col 37 to line 4113, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4114, col 37 to line 4114, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4115, col 37 to line 4173, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCFailure line 4179, col 1 to line 4179, col 15 of module ScenarioIII>: 79:564
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4179, col 23 to line 4179, col 44 of module ScenarioIII: 41599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4179, col 23 to line 4179, col 30 of module ScenarioIII: 41035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4180, col 23 to line 4180, col 59 of module ScenarioIII: 1141
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4180, col 23 to line 4180, col 36 of module ScenarioIII: 577
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4180, col 40 to line 4180, col 59 of module ScenarioIII: 577
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4181, col 23 to line 4181, col 55 of module ScenarioIII: 1141
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4181, col 23 to line 4181, col 32 of module ScenarioIII: 577
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4181, col 36 to line 4181, col 55 of module ScenarioIII: 577
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4182, col 23 to line 4183, col 127 of module ScenarioIII: 564
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4184, col 23 to line 4184, col 56 of module ScenarioIII: 564
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4185, col 23 to line 4220, col 67 of module ScenarioIII: 564
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCFailoverReadFromNIB line 4224, col 1 to line 4224, col 27 of module ScenarioIII>: 168:1714
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4224, col 35 to line 4224, col 68 of module ScenarioIII: 42748
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4224, col 35 to line 4224, col 42 of module ScenarioIII: 41034
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4225, col 35 to line 4225, col 71 of module ScenarioIII: 4044
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4225, col 35 to line 4225, col 48 of module ScenarioIII: 2330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4225, col 52 to line 4225, col 71 of module ScenarioIII: 2330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4226, col 35 to line 4226, col 67 of module ScenarioIII: 4044
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4226, col 35 to line 4226, col 44 of module ScenarioIII: 2330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4226, col 48 to line 4226, col 67 of module ScenarioIII: 2330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4227, col 35 to line 4227, col 88 of module ScenarioIII: 3991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4227, col 35 to line 4227, col 79 of module ScenarioIII: 2277
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4227, col 83 to line 4227, col 88 of module ScenarioIII: 2277
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4228, col 37 to line 4228, col 99 of module ScenarioIII: 3428
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4228, col 37 to line 4228, col 90 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4228, col 94 to line 4228, col 99 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4229, col 35 to line 4229, col 56 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4230, col 35 to line 4230, col 76 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4231, col 35 to line 4231, col 70 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4232, col 35 to line 4232, col 56 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4233, col 35 to line 4234, col 142 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4235, col 35 to line 4235, col 68 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4236, col 35 to line 4287, col 79 of module ScenarioIII: 1714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHanderProc line 4291, col 1 to line 4291, col 26 of module ScenarioIII>: 436:10753
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4291, col 34 to line 4291, col 66 of module ScenarioIII: 51786
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4291, col 34 to line 4291, col 41 of module ScenarioIII: 41033
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4292, col 34 to line 4292, col 70 of module ScenarioIII: 41711
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4292, col 34 to line 4292, col 47 of module ScenarioIII: 30958
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4292, col 51 to line 4292, col 70 of module ScenarioIII: 30958
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4293, col 34 to line 4293, col 66 of module ScenarioIII: 41711
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4293, col 34 to line 4293, col 43 of module ScenarioIII: 30958
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4293, col 47 to line 4293, col 66 of module ScenarioIII: 30958
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4294, col 37 to line 4294, col 52 of module ScenarioIII: 30209
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2300, col 19 to line 2301, col 78 of module ScenarioIII: 30209
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2300, col 19 to line 2300, col 72 of module ScenarioIII: 30209
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 16 to line 2301, col 78 of module ScenarioIII: 868
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4295, col 45 to line 4295, col 81 of module ScenarioIII: 868
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4296, col 45 to line 4296, col 99 of module ScenarioIII: 868
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4297, col 45 to line 4302, col 72 of module ScenarioIII: 868
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4303, col 45 to line 4303, col 57 of module ScenarioIII: 39226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4303, col 45 to line 4303, col 50 of module ScenarioIII: 29341
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4303, col 54 to line 4303, col 57 of module ScenarioIII: 29341
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4304, col 45 to line 4304, col 94 of module ScenarioIII: 9885
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4305, col 45 to line 4305, col 66 of module ScenarioIII: 9885
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4306, col 48 to line 4306, col 72 of module ScenarioIII: 9885
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4307, col 56 to line 4307, col 101 of module ScenarioIII: 4108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4308, col 56 to line 4308, col 99 of module ScenarioIII: 4108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4309, col 56 to line 4309, col 121 of module ScenarioIII: 4108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4310, col 56 to line 4310, col 77 of module ScenarioIII: 4108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4311, col 56 to line 4311, col 108 of module ScenarioIII: 4108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4312, col 56 to line 4312, col 82 of module ScenarioIII: 4108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4313, col 61 to line 4314, col 126 of module ScenarioIII: 5777
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4313, col 61 to line 4313, col 105 of module ScenarioIII: 5777
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4314, col 62 to line 4314, col 126 of module ScenarioIII: 738
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4315, col 64 to line 4322, col 88 of module ScenarioIII: 5039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4323, col 67 to line 4323, col 70 of module ScenarioIII: 738
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4324, col 67 to line 4328, col 99 of module ScenarioIII: 738
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4329, col 56 to line 4329, col 77 of module ScenarioIII: 5777
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4330, col 45 to line 4330, col 94 of module ScenarioIII: 9885
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4331, col 45 to line 4331, col 83 of module ScenarioIII: 9885
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4332, col 34 to line 4379, col 78 of module ScenarioIII: 10753
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHandlerFailover line 4381, col 1 to line 4381, col 31 of module ScenarioIII>: 118:8961
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4381, col 39 to line 4381, col 76 of module ScenarioIII: 49991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4381, col 39 to line 4381, col 46 of module ScenarioIII: 41030
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4382, col 39 to line 4382, col 75 of module ScenarioIII: 19036
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4382, col 39 to line 4382, col 52 of module ScenarioIII: 10075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4382, col 56 to line 4382, col 75 of module ScenarioIII: 10075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4383, col 39 to line 4383, col 71 of module ScenarioIII: 19036
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4383, col 39 to line 4383, col 48 of module ScenarioIII: 10075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4383, col 52 to line 4383, col 71 of module ScenarioIII: 10075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4384, col 39 to line 4384, col 95 of module ScenarioIII: 18767
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4384, col 39 to line 4384, col 83 of module ScenarioIII: 9806
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4384, col 87 to line 4384, col 95 of module ScenarioIII: 9806
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4385, col 45 to line 4385, col 110 of module ScenarioIII: 17922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4385, col 45 to line 4385, col 98 of module ScenarioIII: 8961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4385, col 102 to line 4385, col 110 of module ScenarioIII: 8961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4386, col 39 to line 4386, col 90 of module ScenarioIII: 8961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4387, col 39 to line 4387, col 88 of module ScenarioIII: 8961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4388, col 39 to line 4451, col 65 of module ScenarioIII: 8961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendReadTransaction line 4456, col 1 to line 4456, col 27 of module ScenarioIII>: 6:7
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4456, col 35 to line 4456, col 68 of module ScenarioIII: 41036
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4456, col 35 to line 4456, col 42 of module ScenarioIII: 41029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4457, col 35 to line 4457, col 71 of module ScenarioIII: 14
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4457, col 35 to line 4457, col 48 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4457, col 52 to line 4457, col 71 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4458, col 35 to line 4458, col 67 of module ScenarioIII: 14
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4458, col 35 to line 4458, col 44 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4458, col 48 to line 4458, col 67 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4459, col 38 to line 4459, col 53 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2300, col 19 to line 2301, col 78 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2300, col 19 to line 2300, col 72 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 16 to line 2301, col 78 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4460, col 46 to line 4460, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4461, col 46 to line 4461, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4462, col 46 to line 4462, col 80 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2280, col 22 to line 2280, col 70 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 22 to line 2280, col 58 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 62 to line 2280, col 70 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4463, col 54 to line 4463, col 64 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4464, col 46 to line 4464, col 122 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4465, col 46 to line 4465, col 86 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4466, col 46 to line 4466, col 88 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4467, col 46 to line 4467, col 78 of module ScenarioIII: 5
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4468, col 35 to line 4520, col 79 of module ScenarioIII: 7
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SequencerProc line 4522, col 1 to line 4522, col 19 of module ScenarioIII>: 1674:15786
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4522, col 27 to line 4522, col 52 of module ScenarioIII: 56814
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4522, col 27 to line 4522, col 34 of module ScenarioIII: 41028
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4523, col 27 to line 4523, col 63 of module ScenarioIII: 32584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4523, col 27 to line 4523, col 40 of module ScenarioIII: 16798
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4523, col 44 to line 4523, col 63 of module ScenarioIII: 16798
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4524, col 27 to line 4524, col 59 of module ScenarioIII: 32584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4524, col 27 to line 4524, col 36 of module ScenarioIII: 16798
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4524, col 40 to line 4524, col 59 of module ScenarioIII: 16798
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2261, col 42 to line 2261, col 59 of module ScenarioIII: 16385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2261, col 64 to line 2261, col 90 of module ScenarioIII: 32171
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2261, col 64 to line 2261, col 78 of module ScenarioIII: 16385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4525, col 46 to line 4525, col 52 of module ScenarioIII: 16385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2260, col 25 to line 2260, col 73 of module ScenarioIII: 32171
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 25 to line 2260, col 61 of module ScenarioIII: 16385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 65 to line 2260, col 73 of module ScenarioIII: 16385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4526, col 38 to line 4526, col 41 of module ScenarioIII: 16385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4527, col 30 to line 4527, col 45 of module ScenarioIII: 15786
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4528, col 38 to line 4528, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4529, col 38 to line 4529, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4530, col 38 to line 4530, col 91 of module ScenarioIII: 15786
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4531, col 38 to line 4531, col 70 of module ScenarioIII: 15786
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4532, col 27 to line 4573, col 71 of module ScenarioIII: 15786
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCComputeNextIR2Schedule line 4575, col 1 to line 4575, col 30 of module ScenarioIII>: 707:5811
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4575, col 38 to line 4575, col 74 of module ScenarioIII: 46837
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4575, col 38 to line 4575, col 45 of module ScenarioIII: 41026
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4576, col 38 to line 4576, col 74 of module ScenarioIII: 24706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4576, col 38 to line 4576, col 51 of module ScenarioIII: 18895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4576, col 55 to line 4576, col 74 of module ScenarioIII: 18895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4577, col 38 to line 4577, col 70 of module ScenarioIII: 24706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4577, col 38 to line 4577, col 47 of module ScenarioIII: 18895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4577, col 51 to line 4577, col 70 of module ScenarioIII: 18895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4578, col 38 to line 4578, col 51 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4579, col 38 to line 4579, col 131 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4579, col 58 to line 4579, col 131 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4579, col 59 to line 4579, col 74 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4579, col 83 to line 4579, col 130 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4579, col 93 to line 4579, col 130 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2293, col 40 to line 2296, col 98 of module ScenarioIII: 5811:19914
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2293, col 61 to line 2296, col 97 of module ScenarioIII: 11622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2293, col 61 to line 2295, col 100 of module ScenarioIII: 11622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2293, col 61 to line 2294, col 87 of module ScenarioIII: 11622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2293, col 61 to line 2293, col 86 of module ScenarioIII: 11622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2294, col 62 to line 2294, col 87 of module ScenarioIII: 7421
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2286, col 32 to line 2287, col 79 of module ScenarioIII: 7421
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2286, col 33 to line 2287, col 79 of module ScenarioIII: 7421
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2286, col 56 to line 2287, col 79 of module ScenarioIII: 9880
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2286, col 56 to line 2286, col 87 of module ScenarioIII: 9880
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2287, col 57 to line 2287, col 79 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2286, col 42 to line 2286, col 53 of module ScenarioIII: 7421
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2294, col 86 to line 2294, col 86 of module ScenarioIII: 7421
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2295, col 62 to line 2295, col 100 of module ScenarioIII: 2459
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2296, col 62 to line 2296, col 97 of module ScenarioIII: 2459
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2293, col 47 to line 2293, col 58 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4580, col 38 to line 4580, col 60 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4581, col 41 to line 4581, col 68 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4582, col 46 to line 4582, col 102 of module ScenarioIII: 4240
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4583, col 46 to line 4583, col 96 of module ScenarioIII: 1571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4584, col 38 to line 4643, col 64 of module ScenarioIII: 5811
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SchedulerMechanism line 4645, col 1 to line 4645, col 24 of module ScenarioIII>: 366:1835
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4645, col 32 to line 4645, col 62 of module ScenarioIII: 42859
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4645, col 32 to line 4645, col 39 of module ScenarioIII: 41024
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4646, col 32 to line 4646, col 68 of module ScenarioIII: 3704
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4646, col 32 to line 4646, col 45 of module ScenarioIII: 1869
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4646, col 49 to line 4646, col 68 of module ScenarioIII: 1869
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4647, col 32 to line 4647, col 64 of module ScenarioIII: 3704
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4647, col 32 to line 4647, col 41 of module ScenarioIII: 1869
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4647, col 45 to line 4647, col 64 of module ScenarioIII: 1869
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4648, col 32 to line 4648, col 108 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4649, col 32 to line 4649, col 165 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4650, col 32 to line 4650, col 125 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4651, col 32 to line 4651, col 101 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4652, col 35 to line 4652, col 50 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2300, col 19 to line 2301, col 78 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2300, col 19 to line 2300, col 72 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 16 to line 2301, col 78 of module ScenarioIII: 26
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4653, col 40 to line 4654, col 91 of module ScenarioIII: 26
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4655, col 43 to line 4655, col 91 of module ScenarioIII: 1809
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4656, col 43 to line 4656, col 75 of module ScenarioIII: 1809
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4657, col 32 to line 4703, col 76 of module ScenarioIII: 1835
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendPrepareIR2NIB line 4705, col 1 to line 4705, col 25 of module ScenarioIII>: 1039:1970
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4705, col 33 to line 4705, col 64 of module ScenarioIII: 42993
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4705, col 33 to line 4705, col 40 of module ScenarioIII: 41023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4706, col 33 to line 4706, col 69 of module ScenarioIII: 3976
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4706, col 33 to line 4706, col 46 of module ScenarioIII: 2006
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4706, col 50 to line 4706, col 69 of module ScenarioIII: 2006
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4707, col 33 to line 4707, col 65 of module ScenarioIII: 3976
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4707, col 33 to line 4707, col 42 of module ScenarioIII: 2006
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4707, col 46 to line 4707, col 65 of module ScenarioIII: 2006
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2280, col 22 to line 2280, col 70 of module ScenarioIII: 3940
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 22 to line 2280, col 58 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 62 to line 2280, col 70 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4708, col 41 to line 4708, col 51 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4709, col 33 to line 4709, col 152 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4710, col 33 to line 4710, col 139 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4711, col 33 to line 4711, col 73 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4712, col 36 to line 4712, col 51 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2300, col 19 to line 2301, col 78 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2300, col 19 to line 2300, col 72 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 16 to line 2301, col 78 of module ScenarioIII: 26
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4713, col 41 to line 4714, col 92 of module ScenarioIII: 26
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4715, col 47 to line 4715, col 73 of module ScenarioIII: 1944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4716, col 52 to line 4716, col 97 of module ScenarioIII: 1944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4717, col 55 to line 4717, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4718, col 44 to line 4718, col 76 of module ScenarioIII: 1944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4719, col 33 to line 4767, col 77 of module ScenarioIII: 1970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqStateReconciliation line 4769, col 1 to line 4769, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4769, col 46 to line 4769, col 90 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4775, col 46 to line 4775, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4777, col 57 to line 4777, col 227 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4779, col 57 to line 4779, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4780, col 46 to line 4780, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4781, col 46 to line 4863, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSequencerFailover line 4865, col 1 to line 4865, col 25 of module ScenarioIII>: 91:1065
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4865, col 33 to line 4865, col 64 of module ScenarioIII: 42087
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4865, col 33 to line 4865, col 40 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4866, col 33 to line 4866, col 69 of module ScenarioIII: 2519
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4866, col 33 to line 4866, col 46 of module ScenarioIII: 1454
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4866, col 50 to line 4866, col 69 of module ScenarioIII: 1454
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4867, col 33 to line 4867, col 65 of module ScenarioIII: 2519
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4867, col 33 to line 4867, col 42 of module ScenarioIII: 1454
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4867, col 46 to line 4867, col 65 of module ScenarioIII: 1454
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4868, col 33 to line 4868, col 90 of module ScenarioIII: 1065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4868, col 53 to line 4868, col 90 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4869, col 33 to line 4869, col 89 of module ScenarioIII: 2483
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4869, col 33 to line 4869, col 77 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4869, col 81 to line 4869, col 89 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4870, col 39 to line 4870, col 104 of module ScenarioIII: 2130
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4870, col 39 to line 4870, col 92 of module ScenarioIII: 1065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4870, col 96 to line 4870, col 104 of module ScenarioIII: 1065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4871, col 33 to line 4871, col 75 of module ScenarioIII: 1065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4872, col 33 to line 4921, col 77 of module ScenarioIII: 1065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCNIBEventHanderProc line 4931, col 1 to line 4931, col 27 of module ScenarioIII>: 1644:5475
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4931, col 35 to line 4931, col 68 of module ScenarioIII: 46497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4931, col 35 to line 4931, col 42 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4932, col 35 to line 4932, col 71 of module ScenarioIII: 46497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4932, col 35 to line 4932, col 48 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4932, col 52 to line 4932, col 71 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4933, col 35 to line 4933, col 67 of module ScenarioIII: 46497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4933, col 35 to line 4933, col 44 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4933, col 48 to line 4933, col 67 of module ScenarioIII: 41022
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4934, col 35 to line 4934, col 48 of module ScenarioIII: 45479
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4934, col 35 to line 4934, col 41 of module ScenarioIII: 40004
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4934, col 45 to line 4934, col 48 of module ScenarioIII: 40004
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4935, col 35 to line 4935, col 87 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4936, col 35 to line 4936, col 58 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4937, col 35 to line 4937, col 121 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4937, col 49 to line 4937, col 121 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4937, col 50 to line 4937, col 59 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4937, col 68 to line 4937, col 120 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4937, col 78 to line 4937, col 120 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 4937, col 79 to line 4937, col 94 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 4937, col 103 to line 4937, col 119 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4938, col 35 to line 4938, col 161 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4938, col 47 to line 4938, col 161 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4938, col 48 to line 4938, col 55 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4938, col 64 to line 4938, col 160 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4938, col 74 to line 4938, col 160 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 4938, col 75 to line 4938, col 112 of module ScenarioIII: 10657
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 4938, col 121 to line 4938, col 159 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4939, col 38 to line 4939, col 72 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4940, col 43 to line 4942, col 100 of module ScenarioIII: 2928
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4943, col 46 to line 4943, col 49 of module ScenarioIII: 2547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4944, col 46 to line 4944, col 65 of module ScenarioIII: 2547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4945, col 35 to line 4945, col 85 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4946, col 35 to line 4997, col 79 of module ScenarioIII: 5475
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThread line 5001, col 1 to line 5001, col 22 of module ScenarioIII>: 228:266
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5001, col 30 to line 5001, col 58 of module ScenarioIII: 41287
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5001, col 30 to line 5001, col 37 of module ScenarioIII: 41021
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2261, col 42 to line 2261, col 90 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2262, col 42 to line 2262, col 60 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2262, col 65 to line 2262, col 92 of module ScenarioIII: 21295
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2262, col 65 to line 2262, col 80 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5002, col 49 to line 5002, col 55 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2260, col 25 to line 2260, col 73 of module ScenarioIII: 21295
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 25 to line 2260, col 61 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 65 to line 2260, col 73 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5003, col 41 to line 5003, col 44 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2313, col 83 to line 2313, col 98 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2313, col 64 to line 2313, col 80 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2158, col 18 to line 2158, col 43 of module ScenarioIII: 21029:21295
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2158, col 19 to line 2158, col 24 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2158, col 33 to line 2158, col 42 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2313, col 73 to line 2313, col 79 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2314, col 77 to line 2314, col 90 of module ScenarioIII: 532
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2314, col 77 to line 2314, col 81 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2314, col 85 to line 2314, col 90 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2314, col 58 to line 2314, col 74 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2158, col 18 to line 2158, col 43 of module ScenarioIII: 21029:21295
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2158, col 19 to line 2158, col 24 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2158, col 33 to line 2158, col 42 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2314, col 67 to line 2314, col 73 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2269, col 41 to line 2269, col 85 of module ScenarioIII: 532
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2269, col 42 to line 2269, col 85 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2315, col 67 to line 2315, col 74 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2315, col 77 to line 2315, col 83 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 49 to line 2316, col 148 of module ScenarioIII: 532
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 49 to line 2316, col 80 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 84 to line 2316, col 148 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5004, col 54 to line 5004, col 60 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5004, col 63 to line 5004, col 66 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5004, col 69 to line 5004, col 78 of module ScenarioIII: 21029
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5005, col 30 to line 5005, col 66 of module ScenarioIII: 532
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5005, col 30 to line 5005, col 43 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5005, col 47 to line 5005, col 66 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5006, col 30 to line 5006, col 62 of module ScenarioIII: 532
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5006, col 30 to line 5006, col 39 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5006, col 43 to line 5006, col 62 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5007, col 30 to line 5007, col 77 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5008, col 30 to line 5054, col 74 of module ScenarioIII: 266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCThreadGetNextIR line 5056, col 1 to line 5056, col 24 of module ScenarioIII>: 162:169
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5056, col 32 to line 5056, col 62 of module ScenarioIII: 41189
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5056, col 32 to line 5056, col 39 of module ScenarioIII: 41020
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5057, col 32 to line 5057, col 68 of module ScenarioIII: 338
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5057, col 32 to line 5057, col 45 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5057, col 49 to line 5057, col 68 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5058, col 32 to line 5058, col 64 of module ScenarioIII: 338
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5058, col 32 to line 5058, col 41 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5058, col 45 to line 5058, col 64 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5059, col 32 to line 5059, col 50 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5060, col 32 to line 5060, col 110 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5061, col 32 to line 5061, col 109 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5062, col 32 to line 5062, col 94 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5063, col 32 to line 5063, col 82 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5064, col 32 to line 5112, col 76 of module ScenarioIII: 169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCUpdateIRQueueIRTag line 5114, col 1 to line 5114, col 27 of module ScenarioIII>: 134:136
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5114, col 35 to line 5114, col 68 of module ScenarioIII: 41155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5114, col 35 to line 5114, col 42 of module ScenarioIII: 41019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5115, col 35 to line 5115, col 71 of module ScenarioIII: 272
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5115, col 35 to line 5115, col 48 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5115, col 52 to line 5115, col 71 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5116, col 35 to line 5116, col 67 of module ScenarioIII: 272
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5116, col 35 to line 5116, col 44 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5116, col 48 to line 5116, col 67 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2280, col 22 to line 2280, col 70 of module ScenarioIII: 272
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 22 to line 2280, col 58 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 62 to line 2280, col 70 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5117, col 43 to line 5117, col 53 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5118, col 35 to line 5118, col 133 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5119, col 35 to line 5119, col 132 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5120, col 35 to line 5120, col 76 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5121, col 35 to line 5121, col 84 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5122, col 35 to line 5175, col 79 of module ScenarioIII: 136
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCStartSchedulingIR line 5177, col 1 to line 5177, col 26 of module ScenarioIII>: 399:412
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5177, col 34 to line 5177, col 66 of module ScenarioIII: 41430
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5177, col 34 to line 5177, col 41 of module ScenarioIII: 41018
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5178, col 34 to line 5178, col 70 of module ScenarioIII: 824
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5178, col 34 to line 5178, col 47 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5178, col 51 to line 5178, col 70 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5179, col 34 to line 5179, col 66 of module ScenarioIII: 824
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5179, col 34 to line 5179, col 43 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5179, col 47 to line 5179, col 66 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5180, col 38 to line 5180, col 109 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5182, col 47 to line 5182, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5183, col 42 to line 5183, col 101 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5184, col 38 to line 5184, col 64 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5185, col 45 to line 5185, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5186, col 45 to line 5186, col 162 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5187, col 45 to line 5187, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5188, col 45 to line 5188, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5189, col 49 to line 5189, col 75 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5190, col 56 to line 5190, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5191, col 56 to line 5191, col 173 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5192, col 56 to line 5192, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5193, col 56 to line 5193, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5194, col 59 to line 5194, col 109 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5195, col 64 to line 5196, col 118 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5197, col 67 to line 5197, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5198, col 67 to line 5198, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5199, col 56 to line 5200, col 98 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5201, col 34 to line 5250, col 78 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadRemoveQueue1 line 5252, col 1 to line 5252, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5252, col 42 to line 5252, col 82 of module ScenarioIII: 41017
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5255, col 42 to line 5255, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5256, col 42 to line 5256, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5258, col 42 to line 5258, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5259, col 42 to line 5259, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5260, col 42 to line 5260, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5261, col 42 to line 5261, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5262, col 42 to line 5329, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadSendIR line 5331, col 1 to line 5331, col 28 of module ScenarioIII>: 395:412
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5331, col 36 to line 5331, col 70 of module ScenarioIII: 41429
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5331, col 36 to line 5331, col 43 of module ScenarioIII: 41017
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5332, col 36 to line 5332, col 72 of module ScenarioIII: 824
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5332, col 36 to line 5332, col 49 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5332, col 53 to line 5332, col 72 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5333, col 36 to line 5333, col 68 of module ScenarioIII: 824
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5333, col 36 to line 5333, col 45 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5333, col 49 to line 5333, col 68 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5334, col 40 to line 5335, col 119 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5336, col 53 to line 5336, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5337, col 53 to line 5337, col 170 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5339, col 53 to line 5339, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5340, col 47 to line 5340, col 50 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5341, col 47 to line 5342, col 89 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5343, col 40 to line 5343, col 85 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5344, col 50 to line 5344, col 139 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5345, col 58 to line 5345, col 124 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2280, col 22 to line 2280, col 70 of module ScenarioIII: 824
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 22 to line 2280, col 58 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 62 to line 2280, col 70 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5346, col 66 to line 5346, col 76 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5347, col 58 to line 5347, col 194 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5348, col 58 to line 5348, col 183 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5349, col 58 to line 5349, col 99 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5350, col 58 to line 5350, col 117 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5351, col 58 to line 5351, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5352, col 58 to line 5355, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5356, col 47 to line 5356, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5357, col 47 to line 5359, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5360, col 36 to line 5413, col 80 of module ScenarioIII: 412
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadForwardIRInner line 5415, col 1 to line 5415, col 36 of module ScenarioIII>: 1010:1019
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5415, col 44 to line 5415, col 86 of module ScenarioIII: 42035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5415, col 44 to line 5415, col 51 of module ScenarioIII: 41016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5416, col 44 to line 5416, col 80 of module ScenarioIII: 2038
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5416, col 44 to line 5416, col 57 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5416, col 61 to line 5416, col 80 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5417, col 44 to line 5417, col 76 of module ScenarioIII: 2038
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5417, col 44 to line 5417, col 53 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5417, col 57 to line 5417, col 76 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5418, col 48 to line 5418, col 119 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5420, col 57 to line 5420, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5421, col 52 to line 5421, col 111 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5422, col 48 to line 5422, col 74 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5423, col 55 to line 5425, col 214 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5426, col 58 to line 5426, col 119 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5427, col 66 to line 5427, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5428, col 63 to line 5428, col 122 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5429, col 55 to line 5431, col 69 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5433, col 55 to line 5434, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5435, col 48 to line 5435, col 74 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5436, col 55 to line 5436, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5437, col 55 to line 5437, col 172 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5438, col 55 to line 5438, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5439, col 55 to line 5439, col 115 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5440, col 55 to line 5441, col 97 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5442, col 44 to line 5512, col 70 of module ScenarioIII: 1019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadUnlockSemaphore line 5514, col 1 to line 5514, col 37 of module ScenarioIII>: 2340:8604
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5514, col 45 to line 5514, col 88 of module ScenarioIII: 49619
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5514, col 45 to line 5514, col 52 of module ScenarioIII: 41015
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5515, col 45 to line 5515, col 81 of module ScenarioIII: 18226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5515, col 45 to line 5515, col 58 of module ScenarioIII: 9622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5515, col 62 to line 5515, col 81 of module ScenarioIII: 9622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5516, col 45 to line 5516, col 77 of module ScenarioIII: 18226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5516, col 45 to line 5516, col 54 of module ScenarioIII: 9622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5516, col 58 to line 5516, col 77 of module ScenarioIII: 9622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5517, col 49 to line 5518, col 128 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5519, col 62 to line 5519, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5520, col 62 to line 5520, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5522, col 62 to line 5522, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5523, col 56 to line 5523, col 59 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5524, col 56 to line 5525, col 98 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5526, col 49 to line 5526, col 94 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5527, col 59 to line 5527, col 107 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5528, col 64 to line 5528, col 151 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5530, col 67 to line 5530, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5531, col 56 to line 5531, col 110 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5532, col 56 to line 5532, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5533, col 56 to line 5533, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5534, col 45 to line 5609, col 71 of module ScenarioIII: 8604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCRemoveIRFromIRQueueOFC line 5611, col 1 to line 5611, col 31 of module ScenarioIII>: 4837:8222
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5611, col 39 to line 5611, col 76 of module ScenarioIII: 49236
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5611, col 39 to line 5611, col 46 of module ScenarioIII: 41014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5612, col 39 to line 5612, col 75 of module ScenarioIII: 16444
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5612, col 39 to line 5612, col 52 of module ScenarioIII: 8222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5612, col 56 to line 5612, col 75 of module ScenarioIII: 8222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5613, col 39 to line 5613, col 71 of module ScenarioIII: 16444
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5613, col 39 to line 5613, col 48 of module ScenarioIII: 8222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5613, col 52 to line 5613, col 71 of module ScenarioIII: 8222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5614, col 42 to line 5614, col 106 of module ScenarioIII: 8222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5615, col 54 to line 5615, col 125 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5617, col 63 to line 5617, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5618, col 58 to line 5618, col 117 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5619, col 54 to line 5619, col 80 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5620, col 61 to line 5620, col 157 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5621, col 61 to line 5621, col 117 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2280, col 22 to line 2280, col 70 of module ScenarioIII: 16226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 22 to line 2280, col 58 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2280, col 62 to line 2280, col 70 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5622, col 69 to line 5622, col 79 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5623, col 61 to line 5623, col 143 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5624, col 61 to line 5624, col 155 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5625, col 61 to line 5625, col 102 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5627, col 61 to line 5631, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5632, col 54 to line 5632, col 80 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5633, col 61 to line 5633, col 144 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5634, col 61 to line 5634, col 178 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5635, col 61 to line 5635, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5636, col 61 to line 5636, col 106 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5637, col 61 to line 5638, col 103 of module ScenarioIII: 8113
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5639, col 50 to line 5639, col 95 of module ScenarioIII: 109
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5640, col 50 to line 5646, col 68 of module ScenarioIII: 109
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5647, col 39 to line 5705, col 65 of module ScenarioIII: 8222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadStateReconciliation line 5707, col 1 to line 5707, col 41 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5707, col 49 to line 5707, col 96 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5715, col 49 to line 5715, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5718, col 71 to line 5718, col 142 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5720, col 71 to line 5720, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5722, col 71 to line 5722, col 166 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5724, col 71 to line 5724, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5725, col 60 to line 5725, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5727, col 71 to line 5727, col 246 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5729, col 82 to line 5729, col 177 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5731, col 82 to line 5731, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5733, col 71 to line 5734, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5735, col 60 to line 5735, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5736, col 49 to line 5736, col 94 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5737, col 49 to line 5824, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerProc line 5837, col 1 to line 5837, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5837, col 40 to line 5837, col 78 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5838, col 40 to line 5838, col 66 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5839, col 40 to line 5839, col 55 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5840, col 40 to line 5840, col 64 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5843, col 40 to line 5843, col 117 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5845, col 51 to line 5845, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5847, col 62 to line 5847, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5848, col 62 to line 5848, col 132 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5849, col 40 to line 5914, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEvenHanlderRemoveEventFromQueue line 5916, col 1 to line 5916, col 47 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5916, col 55 to line 5916, col 108 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5921, col 68 to line 5921, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5922, col 66 to line 5922, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5924, col 66 to line 5924, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5926, col 77 to line 5926, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5928, col 77 to line 5928, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5930, col 66 to line 5931, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5933, col 66 to line 5933, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5934, col 66 to line 5934, col 183 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5935, col 66 to line 5935, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5936, col 66 to line 5936, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5937, col 66 to line 5938, col 108 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5939, col 55 to line 6029, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSuspendSW line 6031, col 1 to line 6031, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6031, col 33 to line 6031, col 64 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6036, col 50 to line 6036, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6037, col 50 to line 6037, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6039, col 50 to line 6039, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6041, col 44 to line 6042, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6044, col 44 to line 6044, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6045, col 44 to line 6045, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6046, col 44 to line 6046, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6047, col 44 to line 6047, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6048, col 33 to line 6095, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerFreeSuspendedSW line 6097, col 1 to line 6097, col 31 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6097, col 39 to line 6097, col 76 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6102, col 52 to line 6102, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6103, col 50 to line 6103, col 100 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6105, col 50 to line 6105, col 169 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6107, col 61 to line 6107, col 148 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6109, col 61 to line 6109, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6111, col 50 to line 6112, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6114, col 50 to line 6114, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6115, col 50 to line 6115, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6116, col 50 to line 6116, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6117, col 50 to line 6117, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6118, col 50 to line 6119, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6120, col 39 to line 6177, col 65 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerCheckIfThisIsLastEvent line 6179, col 1 to line 6179, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6179, col 46 to line 6179, col 90 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6184, col 63 to line 6184, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6185, col 63 to line 6185, col 180 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6187, col 63 to line 6187, col 131 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6189, col 57 to line 6190, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6193, col 68 to line 6193, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6194, col 68 to line 6194, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6195, col 57 to line 6195, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6196, col 46 to line 6278, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<getIRsToBeChecked line 6280, col 1 to line 6280, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6280, col 31 to line 6280, col 60 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6285, col 48 to line 6285, col 131 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6286, col 48 to line 6286, col 165 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6288, col 48 to line 6288, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6290, col 42 to line 6291, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6293, col 42 to line 6293, col 134 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6295, col 53 to line 6295, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6296, col 53 to line 6296, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6297, col 42 to line 6297, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6298, col 42 to line 6298, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6299, col 31 to line 6345, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ResetAllIRs line 6347, col 1 to line 6347, col 17 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6347, col 25 to line 6347, col 48 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6352, col 42 to line 6352, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6353, col 42 to line 6353, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6355, col 42 to line 6355, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6357, col 36 to line 6358, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6360, col 36 to line 6360, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6361, col 36 to line 6361, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6363, col 47 to line 6363, col 103 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6365, col 47 to line 6365, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6367, col 47 to line 6367, col 117 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6368, col 47 to line 6368, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6369, col 36 to line 6369, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6370, col 36 to line 6371, col 58 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6372, col 25 to line 6407, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerStateReconciliation line 6409, col 1 to line 6409, col 47 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6409, col 55 to line 6409, col 108 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6416, col 55 to line 6416, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6418, col 66 to line 6418, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6420, col 66 to line 6420, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6421, col 55 to line 6421, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6422, col 55 to line 6515, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCMonitorCheckIfMastr line 6526, col 1 to line 6526, col 28 of module ScenarioIII>: 3907:4243
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6526, col 36 to line 6526, col 70 of module ScenarioIII: 45256
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6526, col 36 to line 6526, col 43 of module ScenarioIII: 41013
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2261, col 42 to line 2261, col 90 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2262, col 42 to line 2262, col 60 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2262, col 65 to line 2262, col 92 of module ScenarioIII: 28024
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2262, col 65 to line 2262, col 80 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6527, col 55 to line 6527, col 61 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2260, col 25 to line 2260, col 73 of module ScenarioIII: 28024
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 25 to line 2260, col 61 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2260, col 65 to line 2260, col 73 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6528, col 47 to line 6528, col 50 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6529, col 36 to line 6529, col 59 of module ScenarioIII: 28024
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6529, col 36 to line 6529, col 52 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6529, col 56 to line 6529, col 59 of module ScenarioIII: 23781
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6530, col 39 to line 6530, col 59 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6531, col 39 to line 6531, col 75 of module ScenarioIII: 8486
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6531, col 39 to line 6531, col 52 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6531, col 56 to line 6531, col 75 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6532, col 36 to line 6532, col 68 of module ScenarioIII: 8486
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6532, col 36 to line 6532, col 45 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6532, col 49 to line 6532, col 68 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6533, col 36 to line 6533, col 73 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6534, col 36 to line 6534, col 88 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6535, col 36 to line 6536, col 89 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6537, col 36 to line 6538, col 89 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6539, col 39 to line 6539, col 78 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6540, col 44 to line 6540, col 95 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6543, col 47 to line 6543, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6544, col 36 to line 6600, col 80 of module ScenarioIII: 4243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<MonitoringServerRemoveFromQueue line 6602, col 1 to line 6602, col 37 of module ScenarioIII>: 12217:13065
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6602, col 45 to line 6602, col 88 of module ScenarioIII: 54077
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6602, col 45 to line 6602, col 52 of module ScenarioIII: 41012
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6603, col 45 to line 6603, col 81 of module ScenarioIII: 26130
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6603, col 45 to line 6603, col 58 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6603, col 62 to line 6603, col 81 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6604, col 45 to line 6604, col 77 of module ScenarioIII: 26130
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6604, col 45 to line 6604, col 54 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6604, col 58 to line 6604, col 77 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6605, col 49 to line 6606, col 128 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6607, col 62 to line 6607, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6608, col 62 to line 6608, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6610, col 62 to line 6610, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6611, col 56 to line 6611, col 59 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6612, col 56 to line 6613, col 98 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6614, col 49 to line 6614, col 94 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6615, col 53 to line 6616, col 107 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6617, col 56 to line 6617, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6618, col 56 to line 6618, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6619, col 45 to line 6694, col 71 of module ScenarioIII: 13065
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerUpdateIR2 line 6696, col 1 to line 6696, col 25 of module ScenarioIII>: 4027:4167
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6696, col 33 to line 6696, col 64 of module ScenarioIII: 45178
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6696, col 33 to line 6696, col 40 of module ScenarioIII: 41011
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6697, col 33 to line 6697, col 69 of module ScenarioIII: 8334
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6697, col 33 to line 6697, col 46 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6697, col 50 to line 6697, col 69 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6698, col 33 to line 6698, col 65 of module ScenarioIII: 8334
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6698, col 33 to line 6698, col 42 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6698, col 46 to line 6698, col 65 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6699, col 37 to line 6700, col 116 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6701, col 50 to line 6701, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6702, col 50 to line 6702, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6704, col 50 to line 6704, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6705, col 44 to line 6705, col 47 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6706, col 44 to line 6707, col 86 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6708, col 37 to line 6708, col 82 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6709, col 41 to line 6715, col 104 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6716, col 44 to line 6716, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6717, col 44 to line 6720, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6721, col 33 to line 6767, col 75 of module ScenarioIII: 4167
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<IRCriticalSection line 6906, col 1 to line 6906, col 17 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6909, col 25 to line 6912, col 107 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<RedundantInstallation line 6914, col 1 to line 6914, col 21 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6914, col 26 to line 6915, col 70 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6914, col 49 to line 6915, col 70 of module ScenarioIII: 88338
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6914, col 52 to line 6914, col 72 of module ScenarioIII: 88338
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6915, col 52 to line 6915, col 70 of module ScenarioIII: 72073
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6914, col 35 to line 6914, col 46 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<ConsistencyReq line 6917, col 1 to line 6917, col 14 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6917, col 19 to line 6921, col 91 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6917, col 55 to line 6921, col 91 of module ScenarioIII: 36182
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6917, col 31 to line 6917, col 52 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2158, col 18 to line 2158, col 43 of module ScenarioIII: 44169:188897
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2158, col 19 to line 2158, col 24 of module ScenarioIII: 36182
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2158, col 33 to line 2158, col 42 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6917, col 40 to line 6917, col 51 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<Debug line 6922, col 1 to line 6922, col 5 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6922, col 11 to line 6922, col 25 of module ScenarioIII: 44169
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2202:0 @!@!@
End of statistics.
@!@!@ENDMSG 2202 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(42) at 2021-03-25 22:39:10: 132,099 states generated (109,801 s/min), 44,169 distinct states found (36,713 ds/min), 3,159 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2199:0 @!@!@
132099 states generated, 44169 distinct states found, 3159 states left on queue.
@!@!@ENDMSG 2199 @!@!@
@!@!@STARTMSG 2186:0 @!@!@
Finished in 72187ms at (2021-03-25 22:39:10)
@!@!@ENDMSG 2186 @!@!@

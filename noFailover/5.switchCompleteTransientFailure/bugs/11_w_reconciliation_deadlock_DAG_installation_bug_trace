<<
[
 _TEAction |-> [
   position |-> 1,
   name |-> "Initial predicate",
   location |-> "Unknown location"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 0,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 1),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {}, e |-> {}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 0),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> 0]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 2,
   name |-> "ControllerTEProc",
   location |-> "line 3982, col 27 to line 4031, col 68 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 0,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<rc0, CONT_TE>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 1),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {}, e |-> {}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 0),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> 0]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 3,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 4033, col 38 to line 4112, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 0,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 1),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEComputeDagBasedOnTopo" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {}, e |-> {}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 0),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> 0]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 4,
   name |-> "ControllerTEComputeDagBasedOnTopo",
   location |-> "line 4114, col 44 to line 4214, col 85 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTERemoveUnnecessaryIRs" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> 0]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 5,
   name |-> "ControllerTERemoveUnnecessaryIRs",
   location |-> "line 4383, col 43 to line 4480, col 84 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTESubmitNewDAG" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> 0]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 6,
   name |-> "ControllerTESubmitNewDAG",
   location |-> "line 4545, col 35 to line 4608, col 76 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<[type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> 0]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 7,
   name |-> "ControllerBossSeqProc",
   location |-> "line 4619, col 32 to line 4691, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [dag |-> 0]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 8,
   name |-> "ControllerWorkerSeqProc",
   location |-> "line 4766, col 34 to line 4828, col 75 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 9,
   name |-> "ControllerWorkerSeqScheduleDAG",
   location |-> "line 4830, col 41 to line 4911, col 82 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {1}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 10,
   name |-> "SchedulerMechanism",
   location |-> "line 4913, col 29 to line 4981, col 70 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {1}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 11,
   name |-> "ScheduleTheIR",
   location |-> "line 4983, col 24 to line 5042, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> -1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 0,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [type |-> 0]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> -1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 12,
   name |-> "ControllerThread",
   location |-> "line 5138, col 27 to line 5214, col 68 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 13,
   name |-> "ControllerThreadSendIR",
   location |-> "line 5216, col 33 to line 5300, col 74 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {1} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 14,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 15,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 5302, col 36 to line 5397, col 77 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<[to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0]>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<SW_SIMPLE_ID, s0>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 16,
   name |-> "SwitchSimpleProcess",
   location |-> "line 2605, col 30 to line 2709, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<1>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 0 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<{[sw |-> s0, partial |-> 0, transient |-> 1]}>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 17,
   name |-> "SwitchFailure",
   location |-> "line 3515, col 24 to line 3662, col 65 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 1] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 1 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 18,
   name |-> "SwitchResolveFailure",
   location |-> "line 3666, col 31 to line 3828, col 80 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [type |-> 0]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 19,
   name |-> "ControllerEventHandlerProc",
   location |-> "line 5771, col 37 to line 5844, col 78 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 0),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [type |-> 0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 20,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 6232, col 40 to line 6337, col 81 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 21,
   name |-> "ControllerSuspendSW",
   location |-> "line 5955, col 30 to line 6017, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 22,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<0, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_SENT, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 23,
   name |-> "ControllerUpdateIR2",
   location |-> "line 6429, col 30 to line 6491, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 24,
   name |-> "ControllerThreadUnlockSemaphore",
   location |-> "line 5399, col 42 to line 5490, col 83 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1], id |-> 1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> -1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 25,
   name |-> "RemoveFromScheduledIRSet",
   location |-> "line 5492, col 35 to line 5569, col 76 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN], [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 26,
   name |-> "ControllerEvenHanlderRemoveEventFromQueue",
   location |-> "line 5846, col 52 to line 5953, col 93 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_SENT, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 27,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 28,
   name |-> "ControllerWorkerSeqScheduleDAG",
   location |-> "line 4830, col 41 to line 4911, col 82 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {2}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 29,
   name |-> "MonitoringServerRemoveFromQueue",
   location |-> "line 6339, col 42 to line 6427, col 83 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 1),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {2}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 30,
   name |-> "SchedulerMechanism",
   location |-> "line 4913, col 29 to line 4981, col 70 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {2}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 31,
   name |-> "ControllerEventHandlerProc",
   location |-> "line 5771, col 37 to line 5844, col 78 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerCheckIfThisIsLastEvent" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {2}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 32,
   name |-> "ScheduleTheIR",
   location |-> "line 4983, col 24 to line 5042, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerCheckIfThisIsLastEvent" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 33,
   name |-> "ControllerCheckIfThisIsLastEvent",
   location |-> "line 6019, col 43 to line 6121, col 84 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> -1], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<[swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 34,
   name |-> "ControllerEvenHanlderRemoveEventFromQueue",
   location |-> "line 5846, col 52 to line 5953, col 93 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> -1], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 1),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 1,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> INSTALL_FLOW, IR |-> 1]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 35,
   name |-> "ControllerThread",
   location |-> "line 5138, col 27 to line 5214, col 68 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 36,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_NONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 37,
   name |-> "ControllerThreadSendIR",
   location |-> "line 5216, col 33 to line 5300, col 74 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 38,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 5302, col 36 to line 5397, col 77 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<[to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<SW_SIMPLE_ID, s1>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 39,
   name |-> "SwitchSimpleProcess",
   location |-> "line 2605, col 30 to line 2709, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_NONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {2}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 40,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 41,
   name |-> "ControllerThreadUnlockSemaphore",
   location |-> "line 5399, col 42 to line 5490, col 83 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 1),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 1, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 42,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 6232, col 40 to line 6337, col 81 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 0, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_SENT, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 43,
   name |-> "ControllerUpdateIR2",
   location |-> "line 6429, col 30 to line 6491, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_SENT, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_SENT]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 44,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<CONT_WORKER_SEQ, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqScheduleDAG" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 45,
   name |-> "ControllerWorkerSeqScheduleDAG",
   location |-> "line 4830, col 41 to line 4911, col 82 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2], id |-> 2], [tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 46,
   name |-> "RemoveFromScheduledIRSet",
   location |-> "line 5492, col 35 to line 5569, col 76 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> NO_TAG, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> -1]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 2),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 2,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s1, type |-> INSTALL_FLOW, IR |-> 2]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 47,
   name |-> "ControllerThread",
   location |-> "line 5138, col 27 to line 5214, col 68 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_NONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 48,
   name |-> "ControllerThreadSendIR",
   location |-> "line 5216, col 33 to line 5300, col 74 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_SENT @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 49,
   name |-> "ControllerThreadForwardIR",
   location |-> "line 5302, col 36 to line 5397, col 77 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<[to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0]>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_SENT @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> INSTALL_FLOW, flow |-> 1, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]>>,
 switchLock |-> <<SW_SIMPLE_ID, s0>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 50,
   name |-> "SwitchSimpleProcess",
   location |-> "line 2605, col 30 to line 2709, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_SENT @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1], [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 51,
   name |-> "ControllerThreadUnlockSemaphore",
   location |-> "line 5399, col 42 to line 5490, col 83 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_SENT @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1], [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 52,
   name |-> "MonitoringServerRemoveFromQueue",
   location |-> "line 6339, col 42 to line 6427, col 83 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_SENT @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> INSTALLED_SUCCESSFULLY, flow |-> 2, from |-> s1]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 53,
   name |-> "ControllerMonitorCheckIfMastr",
   location |-> "line 6232, col 40 to line 6337, col 81 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 54,
   name |-> "ControllerTEProc",
   location |-> "line 3982, col 27 to line 4031, col 68 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RECONCILE @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<rc0, CONT_TE>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 2, state |-> IR_DONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 55,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<rc0, CONT_TE>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [type |-> 0]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 56,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 4033, col 38 to line 4112, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<rc0, CONT_TE>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {s0}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 57,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 4033, col 38 to line 4112, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<rc0, CONT_TE>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RECONCILE]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 58,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 4033, col 38 to line 4112, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<rc0, CONT_TE>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEEventProcessing" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 59,
   name |-> "ControllerTEEventProcessing",
   location |-> "line 4033, col 38 to line 4112, col 79 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, item |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW], id |-> 3]>>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEComputeDagBasedOnTopo" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 60,
   name |-> "RemoveFromScheduledIRSet",
   location |-> "line 5492, col 35 to line 5569, col 76 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 1,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEComputeDagBasedOnTopo" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 61,
   name |-> "ControllerTEComputeDagBasedOnTopo",
   location |-> "line 4114, col 44 to line 4214, col 85 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_DONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 0),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "changeStatusOfIRsUponAllFlow" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {1}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 62,
   name |-> "changeStatusOfIRsUponAllFlow",
   location |-> "line 6493, col 39 to line 6576, col 80 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_NONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 1),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<[to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 63,
   name |-> "MonitoringServerRemoveFromQueue",
   location |-> "line 6339, col 42 to line 6427, col 83 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_DONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<[type |-> IR_MOD, IR |-> 1, state |-> IR_NONE]>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 1),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
],
[
 _TEAction |-> [
   position |-> 64,
   name |-> "RCSNIBEventHndlerProc",
   location |-> "line 3894, col 32 to line 3978, col 73 of module SwitchCompleteTransientFailure"
 ],
 ContProcSet |-> {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, NIB_EVENT_HANDLER>>, <<rc0, CONT_TE>>, <<rc0, CONT_WORKER_SEQ>>, <<rc0, CONT_BOSS_SEQ>>},
 DAGEventQueue |-> (rc0 :> <<>>),
 DAGID |-> 2,
 DAGQueue |-> (rc0 :> <<>>),
 DAGState |-> <<DAG_SUBMIT, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE, DAG_NONE>>,
 FirstInstall |-> <<1, 1, 0>>,
 IRQueueNIB |-> << >>,
 Installer2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 MAX_IR_COUNTER |-> 15,
 MaxDAGID |-> 15,
 NIBIRStatus |-> <<IR_NONE, IR_DONE, IR_NONE>>,
 NicAsic2OfaBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2InstallerBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 Ofa2NicAsicBuff |-> (s0 :> <<>> @@ s1 :> <<>>),
 RCIRStatus |-> (rc0 :> <<IR_NONE, IR_DONE, IR_NONE>>),
 RCNIBEventQueue |-> (rc0 :> <<>>),
 RCSeqWorkerStatus |-> (CONT_WORKER_SEQ :> SEQ_WORKER_RUN),
 RCSwSuspensionStatus |-> (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN)),
 RecoveryStatus |-> ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] ),
 SetScheduledIRs |-> (s0 :> {} @@ s1 :> {}),
 SwProcSet |-> {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>},
 SwSuspensionStatus |-> (s0 :> SW_RUN @@ s1 :> SW_RUN),
 TCAM |-> (s0 :> <<>> @@ s1 :> <<2>>),
 TEEventQueue |-> (rc0 :> <<>>),
 controlMsgCounter |-> (s0 :> 2 @@ s1 :> 0),
 controller2Switch |-> (s0 :> <<>> @@ s1 :> <<>>),
 controllerFailedModules |-> (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {}),
 controllerLock |-> <<NO_LOCK, NO_LOCK>>,
 controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_WORKER_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_BOSS_SEQ>> :> [type |-> NO_STATUS]),
 controllerSubmoduleFailNum |-> (ofc0 :> 0 @@ rc0 :> 0),
 controllerSubmoduleFailStat |-> (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, CONT_WORKER_SEQ>> :> NotFailed @@ <<rc0, CONT_BOSS_SEQ>> :> NotFailed),
 currDAG |-> (<<rc0, CONT_WORKER_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 currIR |-> (<<ofc0, CONT_MONITOR>> :> 1),
 currIRInDAG |-> (<<rc0, CONT_TE>> :> 0),
 currIR_ |-> (<<rc0, CONT_TE>> :> 0),
 currSetDownSw |-> (<<rc0, CONT_TE>> :> {}),
 egressMsg |-> (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0]),
 entryIndex |-> (<<ofc0, t0>> :> 3),
 event |-> (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> IR_MOD, IR |-> 1, state |-> IR_NONE]),
 failedElem |-> (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> ""),
 failedSet |-> (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {}),
 flowStatReqStatus |-> (ofc0 :> (s0 :> IR_DONE @@ s1 :> IR_NONE)),
 idThreadWorkingOnIR |-> <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>,
 idWorkerWorkingOnDAG |-> <<DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK, DAG_UNLOCK>>,
 ingressIR |-> (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0]),
 ingressPkt |-> (<<SW_SIMPLE_ID, s0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW, from |-> ofc0] @@ <<SW_SIMPLE_ID, s1>> :> [to |-> s1, type |-> INSTALL_FLOW, flow |-> 2, from |-> ofc0]),
 init |-> (<<rc0, CONT_TE>> :> 0),
 installedIRs |-> <<1, 2>>,
 installerInIR |-> (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0),
 ir2sw |-> <<s0, s1, s1>>,
 irCounter |-> 3,
 irID |-> (<<ofc0, CONT_MONITOR>> :> 2),
 irTypeMapping |-> <<[type |-> INSTALL_FLOW, flow |-> 1], [type |-> INSTALL_FLOW, flow |-> 2], [type |-> INSTALL_FLOW, flow |-> 3]>>,
 masterState |-> [ofc0 |-> "primary", rc0 |-> "primary"],
 monitoringEvent |-> (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]]),
 msg |-> (<<ofc0, CONT_MONITOR>> :> [to |-> ofc0, type |-> FLOW_STAT_REPLY, status |-> ALL_FLOW, flow |-> {}, from |-> s0]),
 nextIR |-> (<<rc0, CONT_WORKER_SEQ>> :> 2),
 nextIRToSent |-> (<<ofc0, t0>> :> [to |-> s0, type |-> FLOW_STAT_REQ, flow |-> ALL_FLOW]),
 notFailedSet |-> (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {}),
 nxtDAG |-> (<<rc0, CONT_TE>> :> [id |-> 2, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]),
 nxtDAGVertices |-> (<<rc0, CONT_TE>> :> {1, 2}),
 nxtRCIRID |-> 13,
 obj |-> (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 1] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0]),
 ofaInMsg |-> (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0]),
 ofaOutConfirmation |-> (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0),
 pc |-> (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, CONT_WORKER_SEQ>> :> "ControllerWorkerSeqProc" @@ <<rc0, CONT_BOSS_SEQ>> :> "ControllerBossSeqProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket"),
 prev_dag |-> (<<rc0, CONT_TE>> :> [v |-> {1, 2}, e |-> {<<1, 2>>}]),
 prev_dag_id |-> (<<rc0, CONT_TE>> :> 1),
 recoveredElem |-> (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> ""),
 resetIR |-> (<<ofc0, CONT_EVENT>> :> 0),
 rowIndex |-> (<<ofc0, t0>> :> 1),
 rowRemove |-> (<<ofc0, t0>> :> 1),
 seqEvent |-> (<<rc0, CONT_BOSS_SEQ>> :> [type |-> DAG_NEW, dag_obj |-> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]]),
 setIRs |-> (<<ofc0, CONT_MONITOR>> :> {}),
 setIRsInDAG |-> (<<rc0, CONT_TE>> :> {}),
 setIRsToReset |-> (<<ofc0, CONT_EVENT>> :> {}),
 setRemovableIRs |-> (<<rc0, CONT_TE>> :> {}),
 statusMsg |-> (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>),
 statusResolveMsg |-> (<<SW_RESOLVE_PROC, s0>> :> [swID |-> s0, num |-> 2, type |-> KEEP_ALIVE, status |-> [installerStatus |-> INSTALLER_UP]] @@ <<SW_RESOLVE_PROC, s1>> :> <<>>),
 stepOfFailure |-> (<<ofc0, CONT_EVENT>> :> 0),
 stepOfFailure_ |-> (<<rc0, CONT_WORKER_SEQ>> :> 0),
 stepOfFailure_c |-> (<<ofc0, t0>> :> 0),
 swSeqChangedStatus |-> <<>>,
 sw_fail_ordering_var |-> <<>>,
 switch2Controller |-> <<>>,
 switchLock |-> <<NO_LOCK, NO_LOCK>>,
 switchOrdering |-> (s0 :> 1 @@ s1 :> 2),
 switchStatus |-> ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] ),
 toBeScheduledIRs |-> (<<rc0, CONT_WORKER_SEQ>> :> {}),
 topoChangeEvent |-> (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_RUN]),
 worker |-> (<<rc0, CONT_BOSS_SEQ>> :> 0),
 workerThreadRanking |-> (t0 :> 1)
]
>>

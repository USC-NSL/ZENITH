@!@!@STARTMSG 2262:0 @!@!@
TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
@!@!@ENDMSG 2262 @!@!@
@!@!@STARTMSG 2187:0 @!@!@
Running breadth-first search Model-Checking with fp 33 and seed 4022517918820067489 with 8 workers on 16 cores with 2379MB heap and 5348MB offheap memory [pid: 10305] (Linux 4.15.0-140-generic amd64, AdoptOpenJDK 14.0.1 x86_64, OffHeapDiskFPSet, DiskStateQueue).
@!@!@ENDMSG 2187 @!@!@
@!@!@STARTMSG 2220:0 @!@!@
Starting SANY...
@!@!@ENDMSG 2220 @!@!@
Parsing file /home/pooria/RoutingConsistency/noFailover/switchPermanentFailure/SwitchPermanentFailure.toolbox/Model_1/MC.tla
Parsing file /home/pooria/RoutingConsistency/noFailover/switchPermanentFailure/SwitchPermanentFailure.toolbox/Model_1/SwitchPermanentFailure.tla
Warning: symbols were renamed.
Parsing file /home/pooria/TLAToolBox/toolbox/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/TLC.tla
Parsing file /home/pooria/TLAToolBox/toolbox/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Integers.tla
Parsing file /home/pooria/TLAToolBox/toolbox/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Sequences.tla
Parsing file /usr/local/lib/tlaps/FiniteSets.tla
Parsing file /home/pooria/TLAToolBox/toolbox/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Naturals.tla
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module SwitchPermanentFailure
Semantic processing of module MC
@!@!@STARTMSG 2219:0 @!@!@
SANY finished.
@!@!@ENDMSG 2219 @!@!@
@!@!@STARTMSG 2185:0 @!@!@
Starting... (2021-03-26 03:54:29)
@!@!@ENDMSG 2185 @!@!@
@!@!@STARTMSG 2212:0 @!@!@
Implied-temporal checking--satisfiability problem has 1 branches.
@!@!@ENDMSG 2212 @!@!@
@!@!@STARTMSG 2189:0 @!@!@
Computing initial states...
@!@!@ENDMSG 2189 @!@!@
@!@!@STARTMSG 2190:0 @!@!@
Finished computing initial states: 1 distinct state generated at 2021-03-26 03:54:30.
@!@!@ENDMSG 2190 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 12454 total distinct states at (2021-03-26 03:54:33)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-03-26 03:54:33
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(44) at 2021-03-26 03:54:33: 43,919 states generated (43,919 s/min), 13,132 distinct states found (13,132 ds/min), 670 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(64) at 2021-03-26 03:54:34: 71,571 states generated, 19,925 distinct states found, 0 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the complete state space with 19925 total distinct states at (2021-03-26 03:54:34)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2116:1 @!@!@
Temporal properties were violated.

@!@!@ENDMSG 2116 @!@!@
@!@!@STARTMSG 2264:1 @!@!@
The following behavior constitutes a counter-example:

@!@!@ENDMSG 2264 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
1: <Initial predicate>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 0)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 0
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 1)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGQueue = (rc0 :> <<>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [dag |-> 0])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
2: <ControllerTEProc line 3458, col 27 to line 3515, col 68 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [dag |-> 0])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
3: <ControllerSeqProc line 3519, col 28 to line 3560, col 69 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
4: <ControllerSeqScheduleDAG line 3562, col 35 to line 3615, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
5: <SchedulerMechanism line 3617, col 29 to line 3675, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
6: <ScheduleTheIR line 3677, col 24 to line 3729, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
7: <ControllerSeqProc line 3519, col 28 to line 3560, col 69 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
8: <ControllerThread line 3810, col 27 to line 3872, col 68 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
9: <ControllerThreadSendIR line 3874, col 33 to line 3935, col 74 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
10: <ControllerThreadForwardIR line 3937, col 36 to line 4007, col 77 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [type |-> 0])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_NONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_SENT]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
11: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
12: <SwitchSimpleProcess line 2360, col 30 to line 2412, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
13: <ControllerMonitorCheckIfMastr line 4870, col 40 to line 4940, col 81 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
14: <ControllerThreadUnlockSemaphore line 4009, col 42 to line 4085, col 83 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<0, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
15: <ControllerUpdateIR2 line 5017, col 30 to line 5070, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [type |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<{[sw |-> s0, partial |-> 0, transient |-> 0]}>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
16: <SwitchFailure line 3038, col 24 to line 3179, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
17: <ControllerEventHandlerProc line 4320, col 37 to line 4380, col 78 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerSuspendSW" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
18: <ControllerSuspendSW line 4470, col 30 to line 4523, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 1] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
19: <RemoveFromScheduledIRSet line 4087, col 35 to line 4159, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_SENT, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 1, type |-> IR_MOD, state |-> IR_DONE], [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
20: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<[swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN]>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEvenHanlderRemoveEventFromQueue" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
21: <ControllerEvenHanlderRemoveEventFromQueue line 4382, col 52 to line 4468, col 93 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 1, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_RUN @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
22: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
23: <ControllerSeqScheduleDAG line 3562, col 35 to line 3615, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
24: <MonitoringServerRemoveFromQueue line 4942, col 42 to line 5015, col 83 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
25: <SchedulerMechanism line 3617, col 29 to line 3675, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
26: <ScheduleTheIR line 3677, col 24 to line 3729, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [type |-> 0])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 1)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<[sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND]>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 1
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = (rc0 :> <<[id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 0 @@
  2 :> 1 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
27: <ControllerTEProc line 3458, col 27 to line 3515, col 68 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
28: <ControllerThread line 3810, col 27 to line 3872, col 68 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
29: <ControllerThreadSendIR line 3874, col 33 to line 3935, col 74 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
30: <ControllerThreadForwardIR line 3937, col 36 to line 4007, col 77 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_NONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<[IR |-> 2, type |-> INSTALL_FLOW, to |-> s1]>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<SW_SIMPLE_ID, s1>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_SENT]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
31: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<[IR |-> 2, type |-> INSTALL_FLOW, to |-> s1]>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<SW_SIMPLE_ID, s1>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
32: <SwitchSimpleProcess line 2360, col 30 to line 2412, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, t0, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
33: <ControllerThreadUnlockSemaphore line 4009, col 42 to line 4085, col 83 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
34: <ControllerMonitorCheckIfMastr line 4870, col 40 to line 4940, col 81 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 2] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {2})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
35: <RemoveFromScheduledIRSet line 4087, col 35 to line 4159, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
36: <ControllerSeqProc line 3519, col 28 to line 3560, col 69 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 0, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
37: <ControllerUpdateIR2 line 5017, col 30 to line 5070, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_SENT, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 2, type |-> IR_MOD, state |-> IR_DONE]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
38: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
39: <MonitoringServerRemoveFromQueue line 4942, col 42 to line 5015, col 83 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = ( rc0 :>
      << [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]],
         [id |-> 2, dag |-> [v |-> {4}, e |-> {}]] >> )
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
40: <ControllerSeqScheduleDAG line 3562, col 35 to line 3615, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 1, dag |-> [v |-> {1, 2}, e |-> {<<1, 2>>}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
41: <ControllerSeqProc line 3519, col 28 to line 3560, col 69 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
42: <ControllerSeqScheduleDAG line 3562, col 35 to line 3615, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {4})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
43: <SchedulerMechanism line 3617, col 29 to line 3675, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 4] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ScheduleTheIR" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {4})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
44: <ScheduleTheIR line 3677, col 24 to line 3729, col 70 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 2)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
45: <ControllerThread line 3810, col 27 to line 3872, col 68 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, t0>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
46: <ControllerSeqProc line 3519, col 28 to line 3560, col 69 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, t0>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
47: <ControllerThreadSendIR line 3874, col 33 to line 3935, col 74 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, t0>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 2, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_NONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_SENT]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
48: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, t0>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_LOCKING, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
49: <ControllerThreadForwardIR line 3937, col 36 to line 4007, col 77 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, t0>>
/\ installedIRs = <<1, 2>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<[IR |-> 4, type |-> INSTALL_FLOW, to |-> s1]>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<SW_SIMPLE_ID, s1>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 2, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
50: <SwitchSimpleProcess line 2360, col 30 to line 2412, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, t0>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
51: <ControllerThreadUnlockSemaphore line 4009, col 42 to line 4085, col 83 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 2, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
52: <ControllerMonitorCheckIfMastr line 4870, col 40 to line 4940, col 81 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
53: <ControllerUpdateIR2 line 5017, col 30 to line 5070, col 71 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1]>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 1>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_DONE]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
54: <MonitoringServerRemoveFromQueue line 4942, col 42 to line 5015, col 83 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_SENT])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_SENT>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 1>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<[IR |-> 4, type |-> IR_MOD, state |-> IR_DONE]>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
55: <RCSNIBEventHndlerProc line 3392, col 32 to line 3454, col 73 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<[id |-> 2, dag |-> [v |-> {4}, e |-> {}]]>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqScheduleDAG" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 1>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
56: <ControllerSeqScheduleDAG line 3562, col 35 to line 3615, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 4]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> STATUS_SENT_DONE, next |-> 4] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "RemoveFromScheduledIRSet" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 1>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {4})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
57: <RemoveFromScheduledIRSet line 4087, col 35 to line 4159, col 76 of module SwitchPermanentFailure>
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 4)
/\ IRStatus = <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK, IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1, 2, 4>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ obj = (<<SW_FAILURE_PROC, s0>> :> [sw |-> s0, partial |-> 0, transient |-> 0] @@ <<SW_FAILURE_PROC, s1>> :> [type |-> 0])
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_TE>> :> NotFailed @@ <<rc0, NIB_EVENT_HANDLER>> :> NotFailed)
/\ switchStatus = ( s0 :>
      [ cpu |-> Failed,
        nicAsic |-> Failed,
        ofa |-> Failed,
        installer |-> Failed ] @@
  s1 :>
      [ cpu |-> NotFailed,
        nicAsic |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_TE>>, <<rc0, NIB_EVENT_HANDLER>>}
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_TE>> :> [type |-> NO_STATUS] @@ <<rc0, NIB_EVENT_HANDLER>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 1 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ topoChangeEvent = (<<rc0, CONT_TE>> :> [sw |-> s0, type |-> TOPO_MOD, state |-> SW_SUSPEND])
/\ prev_dag_id = (<<rc0, CONT_TE>> :> 2)
/\ TCAM = (s0 :> <<>> @@ s1 :> <<2, 4>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ TEEventQueue = (rc0 :> <<>>)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 4, type |-> INSTALLED_SUCCESSFULLY, from |-> s1])
/\ event = (<<rc0, NIB_EVENT_HANDLER>> :> [IR |-> 4, type |-> IR_MOD, state |-> IR_DONE])
/\ stepOfFailure_ = (<<rc0, CONT_SEQ>> :> 0)
/\ DAGID = 2
/\ currSetDownSw = (<<rc0, CONT_TE>> :> {s0})
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ RCIRStatus = (rc0 :> <<IR_DONE, IR_DONE, IR_NONE, IR_DONE>>)
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ SwSuspensionStatus = (s0 :> SW_SUSPEND @@ s1 :> SW_RUN)
/\ init = (<<rc0, CONT_TE>> :> 0)
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0)
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 4)
/\ DAGQueue = (rc0 :> <<>>)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "ControllerSeqProc" @@ <<rc0, CONT_TE>> :> "ControllerTEProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, NIB_EVENT_HANDLER>> :> "RCSNIBEventHndlerProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket")
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ MaxDAGID = 15
/\ workerThreadRanking = (t0 :> 1)
/\ DAGStaleOrNot = ( 0 :> 1 @@
  1 :> 1 @@
  2 :> 0 @@
  3 :> 1 @@
  4 :> 1 @@
  5 :> 1 @@
  6 :> 1 @@
  7 :> 1 @@
  8 :> 1 @@
  9 :> 1 @@
  10 :> 1 @@
  11 :> 1 @@
  12 :> 1 @@
  13 :> 1 @@
  14 :> 1 @@
  15 :> 1 )
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ currDAG = (<<rc0, CONT_SEQ>> :> [id |-> 2, dag |-> [v |-> {4}, e |-> {}]])
/\ stepOfFailure_c = (<<ofc0, t0>> :> 0)
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ RCSwSuspensionStatus = (rc0 :> (s0 :> SW_SUSPEND @@ s1 :> SW_RUN))
/\ FirstInstall = <<1, 1, 0, 1>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [IR |-> 4, type |-> INSTALL_FLOW, to |-> s1])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> [swID |-> s0, num |-> 1, type |-> NIC_ASIC_DOWN] @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ RecoveryStatus = ( s0 :> [partial |-> 0, transient |-> 0] @@
  s1 :> [partial |-> 0, transient |-> 0] )
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ RCNIBEventQueue = (rc0 :> <<>>)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2218:4 @!@!@
58: Stuttering
@!@!@ENDMSG 2218 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-03-26 03:54:35
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2201:0 @!@!@
The coverage statistics at 2021-03-26 03:54:35
@!@!@ENDMSG 2201 @!@!@
@!@!@STARTMSG 2773:0 @!@!@
<Init line 2252, col 1 to line 2252, col 4 of module SwitchPermanentFailure>: 2:2
@!@!@ENDMSG 2773 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2253, col 12 to line 2253, col 44 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2254, col 12 to line 2254, col 48 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2255, col 12 to line 2255, col 52 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2256, col 12 to line 2256, col 50 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2257, col 12 to line 2259, col 65 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2260, col 12 to line 2263, col 59 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2264, col 12 to line 2264, col 36 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2265, col 12 to line 2265, col 49 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2266, col 12 to line 2266, col 35 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2267, col 12 to line 2268, col 71 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2269, col 12 to line 2269, col 30 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2270, col 12 to line 2270, col 48 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2271, col 12 to line 2271, col 48 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2272, col 12 to line 2272, col 50 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2273, col 12 to line 2273, col 50 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2274, col 12 to line 2274, col 37 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2275, col 12 to line 2275, col 47 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2276, col 12 to line 2276, col 75 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2277, col 12 to line 2277, col 65 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2278, col 12 to line 2278, col 74 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2279, col 30 to line 2279, col 107 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2279, col 71 to line 2279, col 107 of module SwitchPermanentFailure: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2279, col 72 to line 2279, col 107 of module SwitchPermanentFailure: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2279, col 88 to line 2279, col 107 of module SwitchPermanentFailure: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2279, col 88 to line 2279, col 92 of module SwitchPermanentFailure: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2279, col 97 to line 2279, col 107 of module SwitchPermanentFailure: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2279, col 84 to line 2279, col 85 of module SwitchPermanentFailure: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2279, col 43 to line 2279, col 68 of module SwitchPermanentFailure: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2280, col 12 to line 2280, col 48 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2281, col 12 to line 2281, col 44 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2284, col 12 to line 2284, col 52 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2285, col 12 to line 2285, col 51 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2286, col 12 to line 2286, col 74 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2287, col 12 to line 2287, col 73 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2288, col 12 to line 2288, col 67 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2289, col 12 to line 2289, col 159 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2290, col 12 to line 2290, col 64 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2291, col 12 to line 2291, col 76 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2292, col 12 to line 2292, col 54 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2293, col 12 to line 2293, col 53 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2294, col 12 to line 2294, col 28 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2295, col 12 to line 2295, col 46 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2297, col 12 to line 2297, col 74 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2299, col 12 to line 2299, col 72 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2301, col 12 to line 2301, col 73 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2303, col 12 to line 2303, col 66 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2305, col 12 to line 2305, col 66 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2307, col 12 to line 2307, col 63 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2309, col 12 to line 2309, col 68 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2310, col 12 to line 2310, col 69 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2311, col 12 to line 2311, col 67 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2312, col 12 to line 2312, col 70 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2314, col 12 to line 2314, col 66 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2315, col 12 to line 2315, col 75 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 12 to line 2316, col 70 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2318, col 12 to line 2318, col 77 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2320, col 12 to line 2320, col 77 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2321, col 12 to line 2321, col 65 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2322, col 12 to line 2322, col 62 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2323, col 12 to line 2323, col 55 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2325, col 12 to line 2325, col 69 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2326, col 12 to line 2326, col 58 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2327, col 12 to line 2327, col 66 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2328, col 12 to line 2328, col 69 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2330, col 12 to line 2330, col 77 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2331, col 12 to line 2331, col 74 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2332, col 12 to line 2332, col 75 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2333, col 12 to line 2333, col 80 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2335, col 12 to line 2335, col 81 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2336, col 12 to line 2336, col 69 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2337, col 12 to line 2337, col 62 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2338, col 12 to line 2338, col 68 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2340, col 12 to line 2340, col 71 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2342, col 12 to line 2342, col 83 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2343, col 12 to line 2358, col 109 of module SwitchPermanentFailure: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchSimpleProcess line 2360, col 1 to line 2360, col 25 of module SwitchPermanentFailure>: 165:4685
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2360, col 33 to line 2360, col 64 of module SwitchPermanentFailure: 44646
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2360, col 33 to line 2360, col 40 of module SwitchPermanentFailure: 39961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2361, col 33 to line 2361, col 75 of module SwitchPermanentFailure: 44646
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2361, col 33 to line 2361, col 57 of module SwitchPermanentFailure: 39961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2361, col 61 to line 2361, col 75 of module SwitchPermanentFailure: 39961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2120, col 28 to line 2120, col 63 of module SwitchPermanentFailure: 44646
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2120, col 28 to line 2120, col 51 of module SwitchPermanentFailure: 39961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2120, col 55 to line 2120, col 63 of module SwitchPermanentFailure: 39961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2362, col 53 to line 2362, col 59 of module SwitchPermanentFailure: 39961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2363, col 33 to line 2363, col 67 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2363, col 33 to line 2363, col 63 of module SwitchPermanentFailure: 20550
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2364, col 33 to line 2364, col 69 of module SwitchPermanentFailure: 9370
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2364, col 33 to line 2364, col 46 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2364, col 50 to line 2364, col 69 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2365, col 33 to line 2365, col 75 of module SwitchPermanentFailure: 9370
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2365, col 33 to line 2365, col 42 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2365, col 48 to line 2365, col 75 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2366, col 33 to line 2366, col 108 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2367, col 33 to line 2368, col 86 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2369, col 33 to line 2369, col 125 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2370, col 33 to line 2370, col 90 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2371, col 33 to line 2371, col 110 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2372, col 33 to line 2374, col 109 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2375, col 33 to line 2377, col 124 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2375, col 40 to line 2376, col 65 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2375, col 43 to line 2375, col 65 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2376, col 43 to line 2376, col 65 of module SwitchPermanentFailure: 4152
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2378, col 33 to line 2378, col 66 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2379, col 33 to line 2379, col 81 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2380, col 33 to line 2412, col 71 of module SwitchPermanentFailure: 4685
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchRcvPacket line 2416, col 1 to line 2416, col 21 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2416, col 29 to line 2416, col 56 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2417, col 29 to line 2417, col 72 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2420, col 29 to line 2420, col 102 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2426, col 29 to line 2426, col 46 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2427, col 29 to line 2427, col 121 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2428, col 29 to line 2428, col 86 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2429, col 29 to line 2459, col 67 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicInsertToOfaBuff line 2461, col 1 to line 2461, col 34 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2461, col 42 to line 2461, col 82 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2465, col 53 to line 2465, col 85 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2466, col 53 to line 2466, col 158 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2467, col 53 to line 2467, col 97 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2468, col 53 to line 2468, col 71 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2469, col 53 to line 2469, col 106 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2470, col 53 to line 2470, col 97 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2471, col 53 to line 2472, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2473, col 42 to line 2523, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFromOFAPacket line 2528, col 1 to line 2528, col 25 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2528, col 33 to line 2528, col 64 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2529, col 33 to line 2529, col 60 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2530, col 33 to line 2530, col 65 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2531, col 33 to line 2531, col 104 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2534, col 33 to line 2534, col 50 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2539, col 33 to line 2539, col 119 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2540, col 33 to line 2540, col 85 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2541, col 33 to line 2574, col 71 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicSendOutMsg line 2576, col 1 to line 2576, col 29 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2576, col 37 to line 2576, col 72 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2583, col 48 to line 2583, col 81 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2584, col 48 to line 2584, col 110 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2585, col 48 to line 2585, col 96 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2586, col 48 to line 2586, col 66 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2587, col 48 to line 2587, col 101 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2588, col 48 to line 2588, col 96 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2589, col 48 to line 2590, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2591, col 37 to line 2632, col 75 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcIn line 2637, col 1 to line 2637, col 21 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2637, col 29 to line 2637, col 56 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2123, col 30 to line 2123, col 61 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2124, col 30 to line 2124, col 61 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2638, col 48 to line 2638, col 54 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2639, col 29 to line 2639, col 61 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2642, col 29 to line 2642, col 46 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2643, col 29 to line 2643, col 98 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2648, col 29 to line 2648, col 115 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2649, col 29 to line 2649, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2650, col 29 to line 2680, col 67 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcessPacket line 2682, col 1 to line 2682, col 28 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2682, col 36 to line 2682, col 70 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2686, col 47 to line 2686, col 82 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2688, col 58 to line 2688, col 171 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2691, col 58 to line 2691, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2692, col 47 to line 2692, col 91 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2693, col 47 to line 2693, col 64 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2694, col 47 to line 2694, col 98 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2695, col 47 to line 2695, col 91 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2696, col 47 to line 2697, col 79 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2698, col 36 to line 2737, col 74 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcOut line 2742, col 1 to line 2742, col 22 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2742, col 30 to line 2742, col 58 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2123, col 30 to line 2123, col 61 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2124, col 30 to line 2124, col 61 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2743, col 49 to line 2743, col 55 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2744, col 30 to line 2744, col 62 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2747, col 30 to line 2747, col 47 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2748, col 30 to line 2748, col 121 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2749, col 30 to line 2749, col 122 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2752, col 30 to line 2752, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2753, col 30 to line 2784, col 68 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SendInstallationConfirmation line 2786, col 1 to line 2786, col 34 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2786, col 42 to line 2786, col 82 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2790, col 53 to line 2790, col 91 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2791, col 53 to line 2793, col 176 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2794, col 53 to line 2794, col 98 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2795, col 53 to line 2795, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2796, col 53 to line 2796, col 113 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2797, col 53 to line 2797, col 98 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2798, col 53 to line 2799, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2800, col 42 to line 2849, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerProc line 2854, col 1 to line 2854, col 25 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2854, col 33 to line 2854, col 64 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2126, col 27 to line 2126, col 64 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2127, col 27 to line 2127, col 58 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2855, col 49 to line 2855, col 55 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2856, col 33 to line 2856, col 67 of module SwitchPermanentFailure: 20547
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2859, col 33 to line 2859, col 50 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2860, col 33 to line 2860, col 114 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2863, col 33 to line 2863, col 125 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2864, col 33 to line 2864, col 88 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2865, col 33 to line 2898, col 71 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerInsert2TCAM line 2900, col 1 to line 2900, col 32 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2900, col 40 to line 2900, col 78 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2904, col 51 to line 2904, col 68 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2905, col 51 to line 2905, col 107 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2906, col 51 to line 2906, col 127 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2907, col 51 to line 2907, col 111 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2908, col 51 to line 2908, col 73 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2909, col 51 to line 2909, col 101 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2910, col 51 to line 2910, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2911, col 51 to line 2913, col 70 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2914, col 40 to line 2962, col 78 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerSendConfirmation line 2964, col 1 to line 2964, col 37 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2964, col 45 to line 2964, col 88 of module SwitchPermanentFailure: 39956
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2968, col 56 to line 2968, col 89 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2969, col 56 to line 2969, col 171 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2970, col 56 to line 2970, col 104 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2971, col 56 to line 2971, col 78 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2972, col 56 to line 2972, col 106 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2973, col 56 to line 2973, col 104 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2974, col 56 to line 2975, col 88 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2976, col 45 to line 3032, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFailure line 3038, col 1 to line 3038, col 19 of module SwitchPermanentFailure>: 9:687
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3038, col 27 to line 3038, col 52 of module SwitchPermanentFailure: 40516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3038, col 27 to line 3038, col 34 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3039, col 27 to line 3039, col 37 of module SwitchPermanentFailure: 40516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3039, col 28 to line 3039, col 37 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2222, col 15 to line 2222, col 58 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2222, col 38 to line 2222, col 58 of module SwitchPermanentFailure: 84112
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2222, col 24 to line 2222, col 35 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3040, col 30 to line 3040, col 66 of module SwitchPermanentFailure: 40516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3040, col 30 to line 3040, col 43 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3040, col 47 to line 3040, col 66 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3041, col 33 to line 3041, col 65 of module SwitchPermanentFailure: 40511
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3041, col 33 to line 3041, col 42 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3041, col 46 to line 3041, col 65 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3042, col 33 to line 3042, col 55 of module SwitchPermanentFailure: 39960
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3042, col 33 to line 3042, col 45 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3042, col 49 to line 3042, col 55 of module SwitchPermanentFailure: 39955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3043, col 65 to line 3043, col 85 of module SwitchPermanentFailure: 79457
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3043, col 65 to line 3043, col 75 of module SwitchPermanentFailure: 78770
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3043, col 79 to line 3043, col 85 of module SwitchPermanentFailure: 78770
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3043, col 36 to line 3043, col 62 of module SwitchPermanentFailure: 39385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2136, col 28 to line 2136, col 63 of module SwitchPermanentFailure: 39385:118155
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2136, col 49 to line 2136, col 62 of module SwitchPermanentFailure: 157540
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2136, col 35 to line 2136, col 46 of module SwitchPermanentFailure: 39385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3043, col 55 to line 3043, col 61 of module SwitchPermanentFailure: 39385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3044, col 27 to line 3044, col 53 of module SwitchPermanentFailure: 55443
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3044, col 27 to line 3044, col 46 of module SwitchPermanentFailure: 54756
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3044, col 50 to line 3044, col 53 of module SwitchPermanentFailure: 54756
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3045, col 64 to line 3045, col 77 of module SwitchPermanentFailure: 2390
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3045, col 64 to line 3045, col 67 of module SwitchPermanentFailure: 1703
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3045, col 71 to line 3045, col 77 of module SwitchPermanentFailure: 1703
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3045, col 36 to line 3045, col 61 of module SwitchPermanentFailure: 1703
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3046, col 27 to line 3046, col 111 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3047, col 27 to line 3048, col 107 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3049, col 27 to line 3050, col 118 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3051, col 30 to line 3051, col 72 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3052, col 35 to line 3052, col 87 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3053, col 38 to line 3053, col 136 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3054, col 27 to line 3054, col 83 of module SwitchPermanentFailure: 1374
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3054, col 27 to line 3054, col 58 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3055, col 30 to line 3055, col 51 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3056, col 41 to line 3056, col 81 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3057, col 46 to line 3061, col 114 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3063, col 49 to line 3065, col 73 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3066, col 38 to line 3067, col 128 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3068, col 38 to line 3068, col 98 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3069, col 38 to line 3069, col 98 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3070, col 38 to line 3070, col 102 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3071, col 38 to line 3071, col 102 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3072, col 38 to line 3072, col 76 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3073, col 38 to line 3073, col 102 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3074, col 38 to line 3074, col 77 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3075, col 38 to line 3075, col 123 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3078, col 40 to line 3078, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3082, col 49 to line 3084, col 115 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3085, col 49 to line 3085, col 109 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3086, col 49 to line 3086, col 113 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3087, col 49 to line 3087, col 113 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3088, col 49 to line 3088, col 109 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3090, col 60 to line 3090, col 150 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3091, col 60 to line 3093, col 138 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3094, col 60 to line 3094, col 125 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3096, col 60 to line 3098, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3099, col 49 to line 3099, col 75 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3103, col 60 to line 3103, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3105, col 71 to line 3105, col 161 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3106, col 71 to line 3108, col 149 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3109, col 71 to line 3109, col 136 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3111, col 71 to line 3113, col 95 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3114, col 60 to line 3114, col 86 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3118, col 71 to line 3118, col 137 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3122, col 82 to line 3122, col 172 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3123, col 82 to line 3126, col 210 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3127, col 82 to line 3127, col 147 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3129, col 82 to line 3131, col 106 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3132, col 71 to line 3132, col 97 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3136, col 82 to line 3136, col 146 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3137, col 82 to line 3137, col 146 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3138, col 82 to line 3138, col 172 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3139, col 82 to line 3141, col 160 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3142, col 82 to line 3142, col 147 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3145, col 82 to line 3149, col 106 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3150, col 49 to line 3153, col 81 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3154, col 38 to line 3154, col 49 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3155, col 27 to line 3155, col 69 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3156, col 27 to line 3179, col 70 of module SwitchPermanentFailure: 687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchResolveFailure line 3183, col 1 to line 3183, col 26 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3183, col 34 to line 3183, col 66 of module SwitchPermanentFailure: 39954
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3184, col 34 to line 3184, col 70 of module SwitchPermanentFailure: 39954
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3200, col 45 to line 3201, col 141 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3202, col 45 to line 3202, col 105 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3203, col 45 to line 3203, col 105 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3204, col 45 to line 3204, col 109 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3205, col 45 to line 3205, col 109 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3206, col 45 to line 3206, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3207, col 45 to line 3207, col 109 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3208, col 45 to line 3208, col 135 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3209, col 45 to line 3212, col 187 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3213, col 45 to line 3213, col 117 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3214, col 45 to line 3215, col 73 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3216, col 45 to line 3216, col 121 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3219, col 47 to line 3219, col 100 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3224, col 56 to line 3226, col 125 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3227, col 56 to line 3227, col 116 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3228, col 56 to line 3228, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3229, col 56 to line 3229, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3230, col 56 to line 3230, col 116 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3232, col 67 to line 3232, col 157 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3233, col 67 to line 3236, col 209 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3237, col 67 to line 3237, col 139 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3239, col 67 to line 3241, col 98 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3242, col 56 to line 3242, col 82 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3247, col 67 to line 3247, col 134 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3248, col 67 to line 3248, col 131 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3250, col 78 to line 3250, col 168 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3251, col 78 to line 3253, col 170 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3254, col 78 to line 3254, col 168 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3255, col 78 to line 3258, col 220 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3259, col 67 to line 3259, col 139 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3264, col 78 to line 3264, col 141 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3266, col 89 to line 3266, col 179 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3267, col 89 to line 3270, col 231 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3271, col 89 to line 3271, col 161 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3273, col 89 to line 3275, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3280, col 89 to line 3280, col 158 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3284, col 100 to line 3284, col 190 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3285, col 100 to line 3288, col 242 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3289, col 100 to line 3289, col 172 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3291, col 100 to line 3293, col 131 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3296, col 89 to line 3299, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3300, col 67 to line 3300, col 93 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3301, col 56 to line 3304, col 88 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3305, col 45 to line 3305, col 56 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3306, col 34 to line 3306, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3307, col 34 to line 3307, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3308, col 34 to line 3336, col 72 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ghostProc line 3340, col 1 to line 3340, col 15 of module SwitchPermanentFailure>: 256:570
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3340, col 23 to line 3340, col 44 of module SwitchPermanentFailure: 40524
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3340, col 23 to line 3340, col 30 of module SwitchPermanentFailure: 39954
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3341, col 26 to line 3341, col 58 of module SwitchPermanentFailure: 40524
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3341, col 26 to line 3341, col 35 of module SwitchPermanentFailure: 39954
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3341, col 39 to line 3341, col 58 of module SwitchPermanentFailure: 39954
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3342, col 26 to line 3342, col 48 of module SwitchPermanentFailure: 1710
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3342, col 26 to line 3342, col 38 of module SwitchPermanentFailure: 1140
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3342, col 42 to line 3342, col 48 of module SwitchPermanentFailure: 1140
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3343, col 26 to line 3343, col 62 of module SwitchPermanentFailure: 1140
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3343, col 26 to line 3343, col 39 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3343, col 43 to line 3343, col 62 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3344, col 26 to line 3344, col 97 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3344, col 26 to line 3344, col 65 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3344, col 70 to line 3344, col 97 of module SwitchPermanentFailure: 40
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3346, col 31 to line 3357, col 70 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3358, col 23 to line 3360, col 114 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3361, col 23 to line 3361, col 56 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3362, col 23 to line 3362, col 61 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3363, col 23 to line 3388, col 81 of module SwitchPermanentFailure: 570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSNIBEventHndlerProc line 3392, col 1 to line 3392, col 27 of module SwitchPermanentFailure>: 1125:12170
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3392, col 35 to line 3392, col 68 of module SwitchPermanentFailure: 32147
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3392, col 35 to line 3392, col 42 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 42 to line 2153, col 59 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 64 to line 2153, col 90 of module SwitchPermanentFailure: 32147
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2153, col 64 to line 2153, col 78 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3393, col 54 to line 3393, col 60 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2152, col 25 to line 2152, col 73 of module SwitchPermanentFailure: 32147
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 25 to line 2152, col 61 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 65 to line 2152, col 73 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3394, col 46 to line 3394, col 49 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3395, col 35 to line 3395, col 65 of module SwitchPermanentFailure: 32147
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3395, col 35 to line 3395, col 58 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3395, col 62 to line 3395, col 65 of module SwitchPermanentFailure: 19977
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3396, col 35 to line 3396, col 98 of module SwitchPermanentFailure: 12170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3397, col 35 to line 3398, col 88 of module SwitchPermanentFailure: 12170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3399, col 39 to line 3399, col 66 of module SwitchPermanentFailure: 12170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3400, col 49 to line 3400, col 115 of module SwitchPermanentFailure: 1008
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3401, col 54 to line 3402, col 150 of module SwitchPermanentFailure: 1008
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3404, col 57 to line 3405, col 92 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3406, col 46 to line 3406, col 65 of module SwitchPermanentFailure: 1008
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3407, col 50 to line 3407, col 75 of module SwitchPermanentFailure: 11162
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3408, col 60 to line 3408, col 116 of module SwitchPermanentFailure: 11162
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3409, col 65 to line 3409, col 149 of module SwitchPermanentFailure: 11162
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3411, col 68 to line 3411, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3413, col 57 to line 3413, col 76 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3414, col 46 to line 3415, col 81 of module SwitchPermanentFailure: 11162
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3416, col 35 to line 3416, col 121 of module SwitchPermanentFailure: 12170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3417, col 35 to line 3417, col 85 of module SwitchPermanentFailure: 12170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3418, col 35 to line 3454, col 73 of module SwitchPermanentFailure: 12170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerTEProc line 3458, col 1 to line 3458, col 22 of module SwitchPermanentFailure>: 198:1739
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3458, col 30 to line 3458, col 58 of module SwitchPermanentFailure: 21707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3458, col 30 to line 3458, col 37 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 42 to line 2153, col 59 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 64 to line 2153, col 90 of module SwitchPermanentFailure: 21707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2153, col 64 to line 2153, col 78 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3459, col 49 to line 3459, col 55 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2152, col 25 to line 2152, col 73 of module SwitchPermanentFailure: 21707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 25 to line 2152, col 61 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 65 to line 2152, col 73 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3460, col 41 to line 3460, col 44 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3461, col 30 to line 3461, col 43 of module SwitchPermanentFailure: 19978
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3461, col 30 to line 3461, col 39 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3461, col 48 to line 3461, col 75 of module SwitchPermanentFailure: 21701
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3461, col 48 to line 3461, col 68 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3461, col 72 to line 3461, col 75 of module SwitchPermanentFailure: 19970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3462, col 30 to line 3462, col 66 of module SwitchPermanentFailure: 3514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3462, col 30 to line 3462, col 43 of module SwitchPermanentFailure: 1775
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3462, col 47 to line 3462, col 66 of module SwitchPermanentFailure: 1775
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3463, col 30 to line 3463, col 62 of module SwitchPermanentFailure: 3514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3463, col 30 to line 3463, col 39 of module SwitchPermanentFailure: 1775
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3463, col 43 to line 3463, col 62 of module SwitchPermanentFailure: 1775
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3464, col 33 to line 3464, col 60 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3465, col 41 to line 3465, col 121 of module SwitchPermanentFailure: 1733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3466, col 44 to line 3466, col 81 of module SwitchPermanentFailure: 1733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3467, col 55 to line 3467, col 95 of module SwitchPermanentFailure: 1733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3468, col 60 to line 3468, col 164 of module SwitchPermanentFailure: 1733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3469, col 63 to line 3469, col 161 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3471, col 52 to line 3471, col 74 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3472, col 41 to line 3472, col 118 of module SwitchPermanentFailure: 1733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3473, col 41 to line 3473, col 44 of module SwitchPermanentFailure: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3474, col 41 to line 3476, col 69 of module SwitchPermanentFailure: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3477, col 30 to line 3477, col 60 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3478, col 30 to line 3478, col 162 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3479, col 30 to line 3480, col 93 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3481, col 30 to line 3481, col 81 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3482, col 30 to line 3482, col 62 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3483, col 30 to line 3483, col 75 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3484, col 30 to line 3515, col 68 of module SwitchPermanentFailure: 1739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqProc line 3519, col 1 to line 3519, col 23 of module SwitchPermanentFailure>: 538:7821
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3519, col 31 to line 3519, col 60 of module SwitchPermanentFailure: 27789
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3519, col 31 to line 3519, col 38 of module SwitchPermanentFailure: 19968
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 42 to line 2153, col 59 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 64 to line 2153, col 90 of module SwitchPermanentFailure: 16218
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2153, col 64 to line 2153, col 78 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3520, col 50 to line 3520, col 56 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2152, col 25 to line 2152, col 73 of module SwitchPermanentFailure: 16218
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 25 to line 2152, col 61 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 65 to line 2152, col 73 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3521, col 42 to line 3521, col 45 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3522, col 31 to line 3522, col 54 of module SwitchPermanentFailure: 16218
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3522, col 31 to line 3522, col 47 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3522, col 51 to line 3522, col 54 of module SwitchPermanentFailure: 8397
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3523, col 31 to line 3523, col 67 of module SwitchPermanentFailure: 15908
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3523, col 31 to line 3523, col 44 of module SwitchPermanentFailure: 8087
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3523, col 48 to line 3523, col 67 of module SwitchPermanentFailure: 8087
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3524, col 31 to line 3524, col 63 of module SwitchPermanentFailure: 15908
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3524, col 31 to line 3524, col 40 of module SwitchPermanentFailure: 8087
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3524, col 44 to line 3524, col 63 of module SwitchPermanentFailure: 8087
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3525, col 31 to line 3525, col 91 of module SwitchPermanentFailure: 7821
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3526, col 31 to line 3526, col 84 of module SwitchPermanentFailure: 7821
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3527, col 31 to line 3560, col 69 of module SwitchPermanentFailure: 7821
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqScheduleDAG line 3562, col 1 to line 3562, col 30 of module SwitchPermanentFailure>: 537:2283
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3562, col 38 to line 3562, col 74 of module SwitchPermanentFailure: 22246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3562, col 38 to line 3562, col 45 of module SwitchPermanentFailure: 19963
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3563, col 41 to line 3563, col 122 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3563, col 41 to line 3563, col 89 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3563, col 42 to line 3563, col 89 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2178, col 35 to line 2178, col 79 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2178, col 36 to line 2178, col 79 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2178, col 52 to line 2178, col 79 of module SwitchPermanentFailure: 10215
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2178, col 45 to line 2178, col 49 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3563, col 63 to line 3563, col 69 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3563, col 72 to line 3563, col 88 of module SwitchPermanentFailure: 8098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3563, col 94 to line 3563, col 122 of module SwitchPermanentFailure: 7737
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3564, col 49 to line 3564, col 159 of module SwitchPermanentFailure: 1269
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3564, col 69 to line 3564, col 159 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3564, col 70 to line 3564, col 85 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3564, col 94 to line 3564, col 158 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3564, col 104 to line 3564, col 158 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2174, col 43 to line 2177, col 94 of module SwitchPermanentFailure: 7084:21722
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2174, col 57 to line 2177, col 93 of module SwitchPermanentFailure: 9103
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2174, col 60 to line 2174, col 87 of module SwitchPermanentFailure: 9103
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2175, col 60 to line 2175, col 93 of module SwitchPermanentFailure: 5717
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2172, col 40 to line 2173, col 87 of module SwitchPermanentFailure: 5717
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2172, col 41 to line 2173, col 87 of module SwitchPermanentFailure: 5717
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2172, col 57 to line 2173, col 87 of module SwitchPermanentFailure: 6895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2172, col 60 to line 2172, col 78 of module SwitchPermanentFailure: 6895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2173, col 60 to line 2173, col 87 of module SwitchPermanentFailure: 1514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2172, col 50 to line 2172, col 54 of module SwitchPermanentFailure: 5717
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2175, col 82 to line 2175, col 84 of module SwitchPermanentFailure: 1514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2175, col 87 to line 2175, col 89 of module SwitchPermanentFailure: 5717
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2175, col 92 to line 2175, col 92 of module SwitchPermanentFailure: 5717
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2176, col 60 to line 2176, col 103 of module SwitchPermanentFailure: 5086
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2177, col 60 to line 2177, col 93 of module SwitchPermanentFailure: 5066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2174, col 50 to line 2174, col 54 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3564, col 132 to line 3564, col 138 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3564, col 141 to line 3564, col 157 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3565, col 49 to line 3565, col 76 of module SwitchPermanentFailure: 8353
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3565, col 49 to line 3565, col 71 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3565, col 75 to line 3565, col 76 of module SwitchPermanentFailure: 7084
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3566, col 49 to line 3566, col 96 of module SwitchPermanentFailure: 1269
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3567, col 49 to line 3567, col 66 of module SwitchPermanentFailure: 1269
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3568, col 49 to line 3568, col 114 of module SwitchPermanentFailure: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3569, col 49 to line 3569, col 95 of module SwitchPermanentFailure: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3570, col 49 to line 3570, col 74 of module SwitchPermanentFailure: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3571, col 38 to line 3615, col 76 of module SwitchPermanentFailure: 2283
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SchedulerMechanism line 3617, col 1 to line 3617, col 24 of module SwitchPermanentFailure>: 408:1719
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3617, col 32 to line 3617, col 62 of module SwitchPermanentFailure: 21677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3617, col 32 to line 3617, col 39 of module SwitchPermanentFailure: 19958
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3618, col 32 to line 3618, col 68 of module SwitchPermanentFailure: 3456
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3618, col 32 to line 3618, col 45 of module SwitchPermanentFailure: 1737
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3618, col 49 to line 3618, col 68 of module SwitchPermanentFailure: 1737
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3619, col 32 to line 3619, col 64 of module SwitchPermanentFailure: 3456
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3619, col 32 to line 3619, col 41 of module SwitchPermanentFailure: 1737
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3619, col 45 to line 3619, col 64 of module SwitchPermanentFailure: 1737
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3620, col 36 to line 3620, col 107 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3622, col 45 to line 3622, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3623, col 40 to line 3623, col 95 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3624, col 36 to line 3624, col 60 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3625, col 43 to line 3625, col 119 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3626, col 47 to line 3626, col 71 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3627, col 54 to line 3627, col 171 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3628, col 58 to line 3628, col 82 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3629, col 62 to line 3629, col 192 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3631, col 65 to line 3631, col 89 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3633, col 54 to line 3634, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3636, col 43 to line 3637, col 81 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3638, col 36 to line 3638, col 60 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3639, col 43 to line 3639, col 126 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3640, col 43 to line 3640, col 160 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3641, col 43 to line 3641, col 104 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3642, col 43 to line 3642, col 85 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3643, col 43 to line 3644, col 85 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3645, col 32 to line 3675, col 70 of module SwitchPermanentFailure: 1719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ScheduleTheIR line 3677, col 1 to line 3677, col 19 of module SwitchPermanentFailure>: 478:1718
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3677, col 27 to line 3677, col 52 of module SwitchPermanentFailure: 21673
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3677, col 27 to line 3677, col 34 of module SwitchPermanentFailure: 19955
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3678, col 27 to line 3678, col 63 of module SwitchPermanentFailure: 3454
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3678, col 27 to line 3678, col 40 of module SwitchPermanentFailure: 1736
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3678, col 44 to line 3678, col 63 of module SwitchPermanentFailure: 1736
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3679, col 27 to line 3679, col 59 of module SwitchPermanentFailure: 3454
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3679, col 27 to line 3679, col 36 of module SwitchPermanentFailure: 1736
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3679, col 40 to line 3679, col 59 of module SwitchPermanentFailure: 1736
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3680, col 31 to line 3680, col 102 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3682, col 40 to line 3682, col 94 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3683, col 35 to line 3683, col 90 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3684, col 31 to line 3684, col 55 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3685, col 38 to line 3685, col 108 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3686, col 38 to line 3686, col 130 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3687, col 42 to line 3687, col 66 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3688, col 46 to line 3688, col 128 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3690, col 49 to line 3690, col 76 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3692, col 38 to line 3693, col 81 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3694, col 31 to line 3694, col 55 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3695, col 38 to line 3695, col 121 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3696, col 38 to line 3696, col 155 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3697, col 38 to line 3697, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3698, col 41 to line 3698, col 68 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3699, col 46 to line 3699, col 95 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3700, col 49 to line 3700, col 96 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3701, col 38 to line 3702, col 80 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3703, col 27 to line 3729, col 70 of module SwitchPermanentFailure: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqStateReconciliation line 3731, col 1 to line 3731, col 38 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3731, col 46 to line 3731, col 90 of module SwitchPermanentFailure: 19952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3737, col 46 to line 3737, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3739, col 57 to line 3739, col 227 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3741, col 57 to line 3741, col 81 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3742, col 46 to line 3742, col 92 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3743, col 46 to line 3802, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThread line 3810, col 1 to line 3810, col 22 of module SwitchPermanentFailure>: 576:2995
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3810, col 30 to line 3810, col 58 of module SwitchPermanentFailure: 22639
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3810, col 30 to line 3810, col 37 of module SwitchPermanentFailure: 19952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 42 to line 2153, col 90 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2154, col 42 to line 2154, col 60 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2154, col 65 to line 2154, col 92 of module SwitchPermanentFailure: 9203
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2154, col 65 to line 2154, col 80 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3811, col 49 to line 3811, col 55 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2152, col 25 to line 2152, col 73 of module SwitchPermanentFailure: 9203
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 25 to line 2152, col 61 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 65 to line 2152, col 73 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3812, col 41 to line 3812, col 44 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3813, col 30 to line 3813, col 46 of module SwitchPermanentFailure: 9203
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3813, col 30 to line 3813, col 39 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3813, col 43 to line 3813, col 46 of module SwitchPermanentFailure: 6516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2188, col 77 to line 2188, col 92 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2188, col 55 to line 2188, col 74 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 2687:5682
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2188, col 64 to line 2188, col 73 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2189, col 80 to line 2189, col 93 of module SwitchPermanentFailure: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2189, col 80 to line 2189, col 84 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2189, col 88 to line 2189, col 93 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2189, col 58 to line 2189, col 77 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 2687:5682
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2189, col 67 to line 2189, col 76 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2160, col 32 to line 2160, col 79 of module SwitchPermanentFailure: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2160, col 33 to line 2160, col 79 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2160, col 64 to line 2160, col 79 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2160, col 42 to line 2160, col 61 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 2995:6638
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2160, col 51 to line 2160, col 60 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2190, col 67 to line 2190, col 74 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2191, col 49 to line 2191, col 139 of module SwitchPermanentFailure: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2191, col 49 to line 2191, col 80 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2191, col 84 to line 2191, col 139 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2045, col 13 to line 2045, col 52 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2191, col 88 to line 2191, col 138 of module SwitchPermanentFailure: 2995:8985
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2191, col 89 to line 2191, col 110 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2191, col 119 to line 2191, col 137 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||line 2186, col 24 to line 2187, col 109 of module SwitchPermanentFailure: 2995:5990
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2186, col 55 to line 2187, col 108 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2186, col 58 to line 2186, col 86 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2160, col 32 to line 2160, col 79 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2160, col 33 to line 2160, col 79 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2160, col 64 to line 2160, col 79 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2160, col 42 to line 2160, col 61 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 2995:6638
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2160, col 51 to line 2160, col 60 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2186, col 76 to line 2186, col 85 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2187, col 58 to line 2187, col 108 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2186, col 31 to line 2186, col 52 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2191, col 134 to line 2191, col 136 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3814, col 54 to line 3814, col 60 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3814, col 63 to line 3814, col 66 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3815, col 30 to line 3815, col 66 of module SwitchPermanentFailure: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3815, col 30 to line 3815, col 43 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3815, col 47 to line 3815, col 66 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3816, col 30 to line 3816, col 62 of module SwitchPermanentFailure: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3816, col 30 to line 3816, col 39 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3816, col 43 to line 3816, col 62 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3817, col 30 to line 3817, col 96 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3817, col 42 to line 3817, col 96 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3817, col 43 to line 3817, col 50 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3817, col 59 to line 3817, col 95 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3817, col 69 to line 3817, col 95 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2163, col 36 to line 2166, col 99 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2163, col 68 to line 2166, col 99 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2163, col 71 to line 2163, col 98 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2164, col 71 to line 2166, col 99 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2164, col 74 to line 2164, col 100 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2160, col 32 to line 2160, col 79 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2160, col 33 to line 2160, col 79 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2160, col 64 to line 2160, col 79 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2160, col 42 to line 2160, col 61 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 2995:6638
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2160, col 51 to line 2160, col 60 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2164, col 92 to line 2164, col 99 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2165, col 74 to line 2165, col 104 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2161, col 38 to line 2162, col 76 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2161, col 39 to line 2162, col 76 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2161, col 67 to line 2162, col 76 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2161, col 48 to line 2161, col 64 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2165, col 103 to line 2165, col 103 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2166, col 74 to line 2166, col 99 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2163, col 49 to line 2163, col 65 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3817, col 91 to line 3817, col 94 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3818, col 30 to line 3818, col 107 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3819, col 30 to line 3819, col 92 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3820, col 34 to line 3820, col 105 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3822, col 43 to line 3822, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3823, col 38 to line 3823, col 95 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3824, col 34 to line 3824, col 59 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3825, col 41 to line 3825, col 124 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3826, col 41 to line 3826, col 158 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3827, col 41 to line 3827, col 105 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3828, col 41 to line 3829, col 74 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3830, col 41 to line 3830, col 155 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3831, col 45 to line 3831, col 70 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3832, col 52 to line 3832, col 135 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3833, col 52 to line 3833, col 169 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3834, col 52 to line 3834, col 116 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3835, col 52 to line 3835, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3836, col 55 to line 3836, col 106 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2195, col 62 to line 2196, col 158 of module SwitchPermanentFailure: 5990
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2195, col 62 to line 2195, col 93 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2195, col 97 to line 2196, col 158 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2045, col 13 to line 2045, col 52 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2195, col 101 to line 2196, col 157 of module SwitchPermanentFailure: 2995:8985
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2195, col 102 to line 2195, col 123 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2196, col 111 to line 2196, col 156 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||line 2192, col 51 to line 2194, col 120 of module SwitchPermanentFailure: 2995:5990
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2192, col 82 to line 2194, col 119 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2192, col 85 to line 2193, col 133 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2192, col 113 to line 2193, col 133 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2192, col 116 to line 2192, col 125 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2193, col 116 to line 2193, col 133 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2192, col 94 to line 2192, col 110 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 2995:6638
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 3643
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2192, col 103 to line 2192, col 109 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2194, col 85 to line 2194, col 119 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2192, col 58 to line 2192, col 79 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2196, col 139 to line 2196, col 141 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2196, col 144 to line 2196, col 146 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2196, col 149 to line 2196, col 155 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3837, col 92 to line 3837, col 98 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3837, col 101 to line 3837, col 104 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3837, col 107 to line 3837, col 125 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3837, col 128 to line 3837, col 138 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3838, col 63 to line 3838, col 146 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3839, col 63 to line 3839, col 114 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3840, col 63 to line 3840, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3841, col 63 to line 3841, col 91 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3842, col 52 to line 3843, col 94 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3844, col 30 to line 3872, col 68 of module SwitchPermanentFailure: 2995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadSendIR line 3874, col 1 to line 3874, col 28 of module SwitchPermanentFailure>: 763:2687
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3874, col 36 to line 3874, col 70 of module SwitchPermanentFailure: 22636
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3874, col 36 to line 3874, col 43 of module SwitchPermanentFailure: 19949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3875, col 36 to line 3875, col 72 of module SwitchPermanentFailure: 5374
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3875, col 36 to line 3875, col 49 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3875, col 53 to line 3875, col 72 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3876, col 36 to line 3876, col 68 of module SwitchPermanentFailure: 5374
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3876, col 36 to line 3876, col 45 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3876, col 49 to line 3876, col 68 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3877, col 40 to line 3878, col 119 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3879, col 53 to line 3879, col 136 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3880, col 53 to line 3880, col 170 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3882, col 53 to line 3882, col 121 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3883, col 47 to line 3883, col 50 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3884, col 47 to line 3885, col 89 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3886, col 40 to line 3886, col 85 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3887, col 50 to line 3887, col 136 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3887, col 50 to line 3887, col 94 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3887, col 99 to line 3887, col 136 of module SwitchPermanentFailure: 2239
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3888, col 55 to line 3890, col 112 of module SwitchPermanentFailure: 289
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3891, col 58 to line 3891, col 118 of module SwitchPermanentFailure: 2398
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3892, col 58 to line 3893, col 81 of module SwitchPermanentFailure: 2398
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3894, col 47 to line 3894, col 111 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3895, col 47 to line 3896, col 70 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3897, col 36 to line 3935, col 74 of module SwitchPermanentFailure: 2687
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadForwardIR line 3937, col 1 to line 3937, col 31 of module SwitchPermanentFailure>: 561:567
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3937, col 39 to line 3937, col 76 of module SwitchPermanentFailure: 20513
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3937, col 39 to line 3937, col 46 of module SwitchPermanentFailure: 19946
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3938, col 39 to line 3938, col 75 of module SwitchPermanentFailure: 1134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3938, col 39 to line 3938, col 52 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3938, col 56 to line 3938, col 75 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3939, col 39 to line 3939, col 71 of module SwitchPermanentFailure: 1134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3939, col 39 to line 3939, col 48 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3939, col 52 to line 3939, col 71 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3940, col 43 to line 3940, col 114 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3942, col 52 to line 3942, col 108 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3943, col 47 to line 3943, col 104 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3944, col 43 to line 3944, col 68 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3945, col 50 to line 3947, col 209 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3948, col 53 to line 3948, col 114 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3949, col 61 to line 3949, col 116 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3950, col 58 to line 3950, col 117 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3951, col 54 to line 3951, col 79 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3952, col 58 to line 3952, col 176 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3954, col 61 to line 3954, col 88 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3956, col 50 to line 3958, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3959, col 43 to line 3959, col 68 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3960, col 50 to line 3960, col 133 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3961, col 50 to line 3961, col 167 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3962, col 50 to line 3962, col 114 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3963, col 50 to line 3963, col 110 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3964, col 50 to line 3965, col 92 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3966, col 39 to line 4007, col 77 of module SwitchPermanentFailure: 567
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadUnlockSemaphore line 4009, col 1 to line 4009, col 37 of module SwitchPermanentFailure>: 1099:4804
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4009, col 45 to line 4009, col 88 of module SwitchPermanentFailure: 24747
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4009, col 45 to line 4009, col 52 of module SwitchPermanentFailure: 19943
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4010, col 45 to line 4010, col 81 of module SwitchPermanentFailure: 10176
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4010, col 45 to line 4010, col 58 of module SwitchPermanentFailure: 5372
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4010, col 62 to line 4010, col 81 of module SwitchPermanentFailure: 5372
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4011, col 45 to line 4011, col 77 of module SwitchPermanentFailure: 10176
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4011, col 45 to line 4011, col 54 of module SwitchPermanentFailure: 5372
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4011, col 58 to line 4011, col 77 of module SwitchPermanentFailure: 5372
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4012, col 49 to line 4013, col 128 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4014, col 62 to line 4014, col 145 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4015, col 62 to line 4015, col 179 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4017, col 62 to line 4017, col 130 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4018, col 56 to line 4018, col 59 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4019, col 56 to line 4020, col 98 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4021, col 49 to line 4021, col 94 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4022, col 59 to line 4022, col 107 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4023, col 64 to line 4023, col 151 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4025, col 67 to line 4025, col 95 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4026, col 56 to line 4026, col 109 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4027, col 56 to line 4027, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4028, col 56 to line 4028, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4029, col 45 to line 4085, col 83 of module SwitchPermanentFailure: 4804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RemoveFromScheduledIRSet line 4087, col 1 to line 4087, col 30 of module SwitchPermanentFailure>: 445:4810
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4087, col 38 to line 4087, col 74 of module SwitchPermanentFailure: 24750
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4087, col 38 to line 4087, col 45 of module SwitchPermanentFailure: 19940
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4088, col 38 to line 4088, col 74 of module SwitchPermanentFailure: 9620
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4088, col 38 to line 4088, col 51 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4088, col 55 to line 4088, col 74 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4089, col 38 to line 4089, col 70 of module SwitchPermanentFailure: 9620
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4089, col 38 to line 4089, col 47 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4089, col 51 to line 4089, col 70 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4090, col 42 to line 4090, col 113 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4092, col 51 to line 4092, col 107 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4093, col 46 to line 4093, col 103 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4094, col 42 to line 4094, col 67 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4095, col 49 to line 4095, col 186 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4096, col 53 to line 4096, col 78 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4097, col 60 to line 4097, col 139 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4098, col 64 to line 4098, col 89 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4099, col 71 to line 4099, col 155 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4100, col 71 to line 4100, col 127 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4100, col 85 to line 4100, col 127 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2047, col 30 to line 2048, col 76 of module SwitchPermanentFailure: 4810:643
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4100, col 99 to line 4100, col 108 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4100, col 111 to line 4100, col 126 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4102, col 71 to line 4103, col 95 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4105, col 60 to line 4107, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4109, col 49 to line 4112, col 73 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4113, col 42 to line 4113, col 67 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4114, col 49 to line 4114, col 132 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4115, col 49 to line 4115, col 166 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4116, col 49 to line 4116, col 113 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4117, col 49 to line 4117, col 94 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4118, col 49 to line 4119, col 91 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4120, col 38 to line 4159, col 76 of module SwitchPermanentFailure: 4810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadRemoveQueue1 line 4161, col 1 to line 4161, col 34 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4161, col 42 to line 4161, col 82 of module SwitchPermanentFailure: 19937
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4164, col 42 to line 4164, col 126 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4165, col 42 to line 4165, col 98 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4166, col 42 to line 4166, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4167, col 42 to line 4217, col 80 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadStateReconciliation line 4219, col 1 to line 4219, col 41 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4219, col 49 to line 4219, col 96 of module SwitchPermanentFailure: 19937
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4227, col 49 to line 4227, col 86 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4230, col 71 to line 4230, col 142 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4232, col 71 to line 4232, col 88 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4234, col 71 to line 4234, col 166 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4236, col 71 to line 4236, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4237, col 60 to line 4237, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4239, col 71 to line 4239, col 246 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4241, col 82 to line 4241, col 177 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4243, col 82 to line 4243, col 110 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4245, col 71 to line 4246, col 101 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4247, col 60 to line 4247, col 77 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4248, col 49 to line 4248, col 94 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4249, col 49 to line 4310, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerProc line 4320, col 1 to line 4320, col 32 of module SwitchPermanentFailure>: 59:576
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4320, col 40 to line 4320, col 78 of module SwitchPermanentFailure: 20513
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4320, col 40 to line 4320, col 47 of module SwitchPermanentFailure: 19937
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 42 to line 2153, col 90 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2154, col 42 to line 2154, col 60 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2154, col 65 to line 2154, col 92 of module SwitchPermanentFailure: 10828
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2154, col 65 to line 2154, col 80 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4321, col 59 to line 4321, col 65 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2152, col 25 to line 2152, col 73 of module SwitchPermanentFailure: 10828
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 25 to line 2152, col 61 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 65 to line 2152, col 73 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4322, col 51 to line 4322, col 54 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4323, col 40 to line 4323, col 64 of module SwitchPermanentFailure: 10828
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4323, col 40 to line 4323, col 57 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4323, col 61 to line 4323, col 64 of module SwitchPermanentFailure: 10252
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4324, col 40 to line 4324, col 76 of module SwitchPermanentFailure: 1168
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4324, col 40 to line 4324, col 53 of module SwitchPermanentFailure: 592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4324, col 57 to line 4324, col 76 of module SwitchPermanentFailure: 592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4325, col 40 to line 4325, col 72 of module SwitchPermanentFailure: 1168
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4325, col 40 to line 4325, col 49 of module SwitchPermanentFailure: 592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4325, col 53 to line 4325, col 72 of module SwitchPermanentFailure: 592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4326, col 40 to line 4326, col 117 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4327, col 43 to line 4327, col 141 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4327, col 43 to line 4327, col 81 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2201, col 30 to line 2204, col 83 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4327, col 59 to line 4327, col 80 of module SwitchPermanentFailure: 1152
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4327, col 86 to line 4327, col 141 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4328, col 48 to line 4328, col 99 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4330, col 62 to line 4330, col 116 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4331, col 62 to line 4331, col 132 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4332, col 40 to line 4380, col 78 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEvenHanlderRemoveEventFromQueue line 4382, col 1 to line 4382, col 47 of module SwitchPermanentFailure>: 1466:8833
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4382, col 55 to line 4382, col 108 of module SwitchPermanentFailure: 28769
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4382, col 55 to line 4382, col 62 of module SwitchPermanentFailure: 19936
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4383, col 55 to line 4383, col 91 of module SwitchPermanentFailure: 17930
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4383, col 55 to line 4383, col 68 of module SwitchPermanentFailure: 9097
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4383, col 72 to line 4383, col 91 of module SwitchPermanentFailure: 9097
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4384, col 55 to line 4384, col 87 of module SwitchPermanentFailure: 17930
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4384, col 55 to line 4384, col 64 of module SwitchPermanentFailure: 9097
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4384, col 68 to line 4384, col 87 of module SwitchPermanentFailure: 9097
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4385, col 59 to line 4385, col 130 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4387, col 68 to line 4387, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4388, col 63 to line 4388, col 116 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4389, col 59 to line 4389, col 82 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4390, col 66 to line 4390, col 145 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4391, col 70 to line 4391, col 93 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4392, col 74 to line 4392, col 122 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4394, col 77 to line 4394, col 104 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4396, col 66 to line 4397, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4398, col 59 to line 4398, col 82 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4399, col 66 to line 4399, col 149 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4400, col 66 to line 4400, col 183 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4401, col 66 to line 4401, col 136 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4402, col 66 to line 4402, col 121 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4403, col 66 to line 4404, col 108 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4405, col 55 to line 4468, col 93 of module SwitchPermanentFailure: 8833
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSuspendSW line 4470, col 1 to line 4470, col 25 of module SwitchPermanentFailure>: 324:576
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4470, col 33 to line 4470, col 64 of module SwitchPermanentFailure: 20511
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4470, col 33 to line 4470, col 40 of module SwitchPermanentFailure: 19935
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4471, col 33 to line 4471, col 69 of module SwitchPermanentFailure: 1164
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4471, col 33 to line 4471, col 46 of module SwitchPermanentFailure: 588
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4471, col 50 to line 4471, col 69 of module SwitchPermanentFailure: 588
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4472, col 33 to line 4472, col 65 of module SwitchPermanentFailure: 1164
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4472, col 33 to line 4472, col 42 of module SwitchPermanentFailure: 588
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4472, col 46 to line 4472, col 65 of module SwitchPermanentFailure: 588
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4473, col 37 to line 4474, col 116 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4475, col 50 to line 4475, col 133 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4476, col 50 to line 4476, col 167 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4478, col 50 to line 4478, col 118 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4479, col 44 to line 4479, col 47 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4480, col 44 to line 4481, col 86 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4482, col 37 to line 4482, col 82 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4483, col 41 to line 4486, col 114 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4487, col 44 to line 4487, col 114 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4488, col 44 to line 4489, col 77 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4490, col 33 to line 4523, col 71 of module SwitchPermanentFailure: 576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerFreeSuspendedSW line 4525, col 1 to line 4525, col 31 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4525, col 39 to line 4525, col 76 of module SwitchPermanentFailure: 19934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4530, col 52 to line 4530, col 104 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4531, col 50 to line 4531, col 100 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4533, col 50 to line 4533, col 169 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4535, col 61 to line 4535, col 148 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4536, col 61 to line 4537, col 198 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4539, col 61 to line 4540, col 94 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4542, col 50 to line 4544, col 83 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4546, col 50 to line 4546, col 133 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4547, col 50 to line 4547, col 167 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4548, col 50 to line 4548, col 120 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4549, col 50 to line 4549, col 111 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4550, col 50 to line 4551, col 92 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4552, col 39 to line 4592, col 77 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerCheckIfThisIsLastEvent line 4594, col 1 to line 4594, col 38 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4594, col 46 to line 4594, col 90 of module SwitchPermanentFailure: 19934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4599, col 63 to line 4599, col 146 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4600, col 63 to line 4600, col 180 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4602, col 63 to line 4602, col 131 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4604, col 57 to line 4605, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4608, col 68 to line 4608, col 114 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4609, col 68 to line 4609, col 138 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4610, col 57 to line 4610, col 127 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4611, col 46 to line 4670, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<getIRsToBeChecked line 4672, col 1 to line 4672, col 23 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4672, col 31 to line 4672, col 60 of module SwitchPermanentFailure: 19934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4677, col 48 to line 4677, col 131 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4678, col 48 to line 4678, col 165 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4680, col 48 to line 4680, col 116 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4682, col 42 to line 4683, col 84 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4685, col 42 to line 4685, col 134 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4687, col 53 to line 4687, col 123 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4688, col 53 to line 4688, col 93 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4689, col 42 to line 4689, col 112 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4690, col 42 to line 4690, col 64 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4691, col 31 to line 4721, col 69 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ResetAllIRs line 4723, col 1 to line 4723, col 17 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4723, col 25 to line 4723, col 48 of module SwitchPermanentFailure: 19934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4728, col 42 to line 4728, col 125 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4729, col 42 to line 4729, col 159 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4731, col 42 to line 4731, col 110 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4733, col 36 to line 4734, col 78 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4736, col 36 to line 4736, col 111 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4737, col 36 to line 4737, col 123 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4739, col 47 to line 4739, col 103 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4740, col 47 to line 4741, col 167 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4743, col 47 to line 4744, col 70 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4746, col 47 to line 4746, col 117 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4747, col 47 to line 4747, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4748, col 36 to line 4748, col 106 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4749, col 36 to line 4750, col 73 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4751, col 25 to line 4776, col 63 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerStateReconciliation line 4778, col 1 to line 4778, col 47 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4778, col 55 to line 4778, col 108 of module SwitchPermanentFailure: 19934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4785, col 55 to line 4785, col 92 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4787, col 66 to line 4787, col 158 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4788, col 66 to line 4789, col 207 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4791, col 66 to line 4792, col 99 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4793, col 55 to line 4793, col 110 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4794, col 55 to line 4859, col 93 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerMonitorCheckIfMastr line 4870, col 1 to line 4870, col 35 of module SwitchPermanentFailure>: 2259:2503
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4870, col 43 to line 4870, col 84 of module SwitchPermanentFailure: 22437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4870, col 43 to line 4870, col 50 of module SwitchPermanentFailure: 19934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2153, col 42 to line 2153, col 90 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2154, col 42 to line 2154, col 60 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2154, col 65 to line 2154, col 92 of module SwitchPermanentFailure: 12242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2154, col 65 to line 2154, col 80 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4871, col 62 to line 4871, col 68 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2152, col 25 to line 2152, col 73 of module SwitchPermanentFailure: 12242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 25 to line 2152, col 61 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2152, col 65 to line 2152, col 73 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4872, col 54 to line 4872, col 57 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4873, col 43 to line 4873, col 66 of module SwitchPermanentFailure: 12242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4873, col 43 to line 4873, col 59 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4873, col 63 to line 4873, col 66 of module SwitchPermanentFailure: 9739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4874, col 46 to line 4874, col 66 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4875, col 46 to line 4875, col 82 of module SwitchPermanentFailure: 5034
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4875, col 46 to line 4875, col 59 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4875, col 63 to line 4875, col 82 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4876, col 43 to line 4876, col 75 of module SwitchPermanentFailure: 5034
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4876, col 43 to line 4876, col 52 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4876, col 56 to line 4876, col 75 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4877, col 43 to line 4877, col 80 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4878, col 43 to line 4878, col 95 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4879, col 43 to line 4880, col 96 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4881, col 43 to line 4882, col 96 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4883, col 46 to line 4883, col 85 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4884, col 51 to line 4884, col 102 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4887, col 54 to line 4887, col 114 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4888, col 43 to line 4940, col 81 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<MonitoringServerRemoveFromQueue line 4942, col 1 to line 4942, col 37 of module SwitchPermanentFailure>: 6263:7440
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4942, col 45 to line 4942, col 88 of module SwitchPermanentFailure: 27371
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4942, col 45 to line 4942, col 52 of module SwitchPermanentFailure: 19931
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4943, col 45 to line 4943, col 81 of module SwitchPermanentFailure: 15104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4943, col 45 to line 4943, col 58 of module SwitchPermanentFailure: 7664
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4943, col 62 to line 4943, col 81 of module SwitchPermanentFailure: 7664
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4944, col 45 to line 4944, col 77 of module SwitchPermanentFailure: 15104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4944, col 45 to line 4944, col 54 of module SwitchPermanentFailure: 7664
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4944, col 58 to line 4944, col 77 of module SwitchPermanentFailure: 7664
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4945, col 49 to line 4946, col 128 of module SwitchPermanentFailure: 7440
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4947, col 62 to line 4947, col 145 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4948, col 62 to line 4948, col 179 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4950, col 62 to line 4950, col 130 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4951, col 56 to line 4951, col 59 of module SwitchPermanentFailure: 7440
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4952, col 56 to line 4953, col 98 of module SwitchPermanentFailure: 7440
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4954, col 49 to line 4954, col 94 of module SwitchPermanentFailure: 7440
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4955, col 53 to line 4956, col 114 of module SwitchPermanentFailure: 7440
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4957, col 56 to line 4957, col 114 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4958, col 56 to line 4958, col 82 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4959, col 45 to line 5015, col 83 of module SwitchPermanentFailure: 7440
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerUpdateIR2 line 5017, col 1 to line 5017, col 25 of module SwitchPermanentFailure>: 2395:2503
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5017, col 33 to line 5017, col 64 of module SwitchPermanentFailure: 22431
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5017, col 33 to line 5017, col 40 of module SwitchPermanentFailure: 19928
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5018, col 33 to line 5018, col 69 of module SwitchPermanentFailure: 5034
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5018, col 33 to line 5018, col 46 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5018, col 50 to line 5018, col 69 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5019, col 33 to line 5019, col 65 of module SwitchPermanentFailure: 5034
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5019, col 33 to line 5019, col 42 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5019, col 46 to line 5019, col 65 of module SwitchPermanentFailure: 2531
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5020, col 37 to line 5021, col 116 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5022, col 50 to line 5022, col 133 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5023, col 50 to line 5023, col 167 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5025, col 50 to line 5025, col 118 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5026, col 44 to line 5026, col 47 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5027, col 44 to line 5028, col 86 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5029, col 37 to line 5029, col 82 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5030, col 41 to line 5033, col 104 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5034, col 44 to line 5034, col 102 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5035, col 44 to line 5037, col 67 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5038, col 33 to line 5070, col 71 of module SwitchPermanentFailure: 2503
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerWatchDogProc line 5076, col 1 to line 5076, col 28 of module SwitchPermanentFailure>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5076, col 36 to line 5076, col 70 of module SwitchPermanentFailure: 39850
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5077, col 36 to line 5077, col 72 of module SwitchPermanentFailure: 39850
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5078, col 36 to line 5078, col 68 of module SwitchPermanentFailure: 39850
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5079, col 36 to line 5079, col 143 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5079, col 63 to line 5079, col 143 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5079, col 64 to line 5079, col 86 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5079, col 95 to line 5079, col 142 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5079, col 105 to line 5079, col 142 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2218, col 40 to line 2219, col 102 of module SwitchPermanentFailure: 38714:232284
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2218, col 60 to line 2219, col 101 of module SwitchPermanentFailure: 232284
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2218, col 63 to line 2218, col 73 of module SwitchPermanentFailure: 232284
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2219, col 63 to line 2219, col 101 of module SwitchPermanentFailure: 116142
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2218, col 47 to line 2218, col 57 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5079, col 135 to line 5079, col 141 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5080, col 36 to line 5080, col 82 of module SwitchPermanentFailure: 38714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5084, col 41 to line 5084, col 64 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5085, col 41 to line 5085, col 129 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5086, col 36 to line 5086, col 87 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5087, col 36 to line 5125, col 78 of module SwitchPermanentFailure: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<IRCriticalSection line 5265, col 1 to line 5265, col 17 of module SwitchPermanentFailure>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5268, col 25 to line 5271, col 109 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<RedundantInstallation line 5273, col 1 to line 5273, col 21 of module SwitchPermanentFailure>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5273, col 26 to line 5274, col 70 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5273, col 49 to line 5274, col 70 of module SwitchPermanentFailure: 79700
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5273, col 52 to line 5273, col 72 of module SwitchPermanentFailure: 79700
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5274, col 52 to line 5274, col 70 of module SwitchPermanentFailure: 55280
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5273, col 35 to line 5273, col 46 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<ConsistencyReq line 5278, col 1 to line 5278, col 14 of module SwitchPermanentFailure>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5278, col 19 to line 5283, col 89 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5278, col 55 to line 5283, col 89 of module SwitchPermanentFailure: 63800
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5278, col 58 to line 5278, col 62 of module SwitchPermanentFailure: 63800
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5279, col 58 to line 5279, col 82 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5279, col 58 to line 5279, col 68 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5276, col 17 to line 5276, col 67 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5276, col 58 to line 5276, col 67 of module SwitchPermanentFailure: 57188
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5276, col 30 to line 5276, col 55 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 31916:57188
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 63832
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 5276, col 39 to line 5276, col 54 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5279, col 67 to line 5279, col 67 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5279, col 72 to line 5279, col 82 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5276, col 17 to line 5276, col 67 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5276, col 58 to line 5276, col 67 of module SwitchPermanentFailure: 57188
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5276, col 30 to line 5276, col 55 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 31916:57188
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 63832
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 5276, col 39 to line 5276, col 54 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5279, col 81 to line 5279, col 81 of module SwitchPermanentFailure: 31916
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5280, col 58 to line 5281, col 89 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5280, col 61 to line 5280, col 125 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5280, col 61 to line 5280, col 91 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5275, col 28 to line 5275, col 63 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2045, col 13 to line 2045, col 52 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||line 5275, col 32 to line 5275, col 62 of module SwitchPermanentFailure: 18628:55884
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 51 to line 5275, col 61 of module SwitchPermanentFailure: 42560
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 39 to line 5275, col 48 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5280, col 76 to line 5280, col 87 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5280, col 90 to line 5280, col 90 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5280, col 95 to line 5280, col 125 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5275, col 28 to line 5275, col 63 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2045, col 13 to line 2045, col 52 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||line 5275, col 32 to line 5275, col 62 of module SwitchPermanentFailure: 18628:55884
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 51 to line 5275, col 61 of module SwitchPermanentFailure: 42560
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 39 to line 5275, col 48 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5280, col 110 to line 5280, col 121 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5280, col 124 to line 5280, col 124 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5281, col 61 to line 5281, col 89 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5281, col 61 to line 5281, col 68 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5281, col 77 to line 5281, col 89 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5281, col 77 to line 5281, col 87 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 5276, col 17 to line 5276, col 67 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5276, col 58 to line 5276, col 67 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5276, col 30 to line 5276, col 55 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 9314:18628
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 5276, col 39 to line 5276, col 54 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 5281, col 86 to line 5281, col 86 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5282, col 58 to line 5283, col 89 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5282, col 61 to line 5282, col 125 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5282, col 61 to line 5282, col 91 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5275, col 28 to line 5275, col 63 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2045, col 13 to line 2045, col 52 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||line 5275, col 32 to line 5275, col 62 of module SwitchPermanentFailure: 9314:27942
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 51 to line 5275, col 61 of module SwitchPermanentFailure: 21280
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 39 to line 5275, col 48 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5282, col 76 to line 5282, col 87 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5282, col 90 to line 5282, col 90 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5282, col 95 to line 5282, col 125 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5275, col 28 to line 5275, col 63 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2045, col 13 to line 2045, col 52 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||line 5275, col 32 to line 5275, col 62 of module SwitchPermanentFailure: 9314:27942
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 51 to line 5275, col 61 of module SwitchPermanentFailure: 21280
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5275, col 39 to line 5275, col 48 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5282, col 110 to line 5282, col 121 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5282, col 124 to line 5282, col 124 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5283, col 61 to line 5283, col 89 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5283, col 61 to line 5283, col 68 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 5283, col 77 to line 5283, col 89 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 5283, col 77 to line 5283, col 87 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 5276, col 17 to line 5276, col 67 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5276, col 58 to line 5276, col 67 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 5276, col 30 to line 5276, col 55 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||||||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 9314:18628
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 18628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 5276, col 39 to line 5276, col 54 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 5283, col 86 to line 5283, col 86 of module SwitchPermanentFailure: 9314
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5278, col 31 to line 5278, col 52 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2046, col 18 to line 2046, col 43 of module SwitchPermanentFailure: 19925:166071
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2046, col 19 to line 2046, col 24 of module SwitchPermanentFailure: 31884
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2046, col 33 to line 2046, col 42 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5278, col 40 to line 5278, col 51 of module SwitchPermanentFailure: 19925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2202:0 @!@!@
End of statistics.
@!@!@ENDMSG 2202 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(64) at 2021-03-26 03:54:35: 71,571 states generated (680,332 s/min), 19,925 distinct states found (189,401 ds/min), 0 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2199:0 @!@!@
71571 states generated, 19925 distinct states found, 0 states left on queue.
@!@!@ENDMSG 2199 @!@!@
@!@!@STARTMSG 2186:0 @!@!@
Finished in 6313ms at (2021-03-26 03:54:35)
@!@!@ENDMSG 2186 @!@!@

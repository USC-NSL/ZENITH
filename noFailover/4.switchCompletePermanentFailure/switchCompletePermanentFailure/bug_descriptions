TE algorithm: Upon a switch failure, TE marks the previous DAG as stale and schedules the new DAG based on the new 
topology without considering what is already installed in the switches. 

Bug#1: RC TE schedules DAG1({<<Install IR1, Install IR2>>}) → switch fails →RC Sequencer reads the DAG from the Queue 
→ OFC OF event handler suspends the switch in NIB → RC NIB event handler receives the TOPO_MOD event, suspends the 
switch internally, and sends the notification to TE module → RC TE marks the previous DAG as stale and reschedules 
another DAG2({<<Install IR4>>}) → RC Sequencer schedules IR1 → OFC Worker discards IR1 since it relates to a suspended 
switch and wait for the switch to recover → RC Sequencer finds out that DAG1 is stale, removes it from DAGQueue and 
gets the latest DAG from queue →  RC Sequencer schedules IR4 

Problem: Deadlock. There is only one worker in OFC and it is waiting for sw0 to be up again. However, sw0 has 
permanently failed.

Solution: This is not a bug. This is a performance optimization for transient failures with fast recovery. My 
assumption was there should be some sort of a timer in OFC that the worker waits for the switch recovery until 
timeout happens. I remove this part. 
======================================================================================================================
======================================================================================================================

@!@!@STARTMSG 2262:0 @!@!@
TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
@!@!@ENDMSG 2262 @!@!@
@!@!@STARTMSG 2187:0 @!@!@
Running breadth-first search Model-Checking with fp 65 and seed 1606346157709987795 with 4 workers on 4 cores with 1433MB heap and 3221MB offheap memory [pid: 86376] (Mac OS X 10.14.4 x86_64, AdoptOpenJDK 14.0.1 x86_64, OffHeapDiskFPSet, DiskStateQueue).
@!@!@ENDMSG 2187 @!@!@
@!@!@STARTMSG 2220:0 @!@!@
Starting SANY...
@!@!@ENDMSG 2220 @!@!@
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/fullNIB/bothTransientFailuresNIB/ScenarioIII.toolbox/Model_SnapShot_1613371972005/MC.tla
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/fullNIB/bothTransientFailuresNIB/ScenarioIII.toolbox/Model_SnapShot_1613371972005/ScenarioIII.tla
Warning: symbols were renamed.
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/TLC.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Integers.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Sequences.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/FiniteSets.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Naturals.tla
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module ScenarioIII
Semantic processing of module MC
@!@!@STARTMSG 2219:0 @!@!@
SANY finished.
@!@!@ENDMSG 2219 @!@!@
@!@!@STARTMSG 2185:0 @!@!@
Starting... (2021-03-14 20:52:26)
@!@!@ENDMSG 2185 @!@!@
@!@!@STARTMSG 2212:0 @!@!@
Implied-temporal checking--satisfiability problem has 1 branches.
@!@!@ENDMSG 2212 @!@!@
@!@!@STARTMSG 2189:0 @!@!@
Computing initial states...
@!@!@ENDMSG 2189 @!@!@
@!@!@STARTMSG 2190:0 @!@!@
Finished computing initial states: 1 distinct state generated at 2021-03-14 20:52:32.
@!@!@ENDMSG 2190 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 399 total distinct states at (2021-03-14 20:52:35)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-03-14 20:52:35
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(36) at 2021-03-14 20:52:35: 1,133 states generated (1,133 s/min), 432 distinct states found (432 ds/min), 33 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 1000:1 @!@!@
TLC threw an unexpected exception.
This was probably caused by an error in the spec or model.
See the User Output or TLC Console for clues to what happened.
The exception was a java.lang.RuntimeException
: Attempted to compute the value of an expression of form
CHOOSE x \in S: P, but no element of S satisfied P.
line 3815, col 188 to line 3815, col 265 of module ScenarioIII
@!@!@ENDMSG 1000 @!@!@
@!@!@STARTMSG 2121:1 @!@!@
The behavior up to this point is:
@!@!@ENDMSG 2121 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
1: <Initial predicate>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> <<>>)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [type |-> 0])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendReadTransaction" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
2: <RCSendReadTransaction line 4188, col 32 to line 4246, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [type |-> 0])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "SeqReadNIBStates"]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
3: <SequencerProc line 4248, col 24 to line 4295, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [type |-> 0])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "SeqReadNIBStates"]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
4: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
5: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
6: <RCNIBEventHanderProc line 4105, col 31 to line 4184, col 72 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
7: <RCComputeNextIR2Schedule line 4297, col 35 to line 4362, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
8: <SchedulerMechanism line 4364, col 29 to line 4433, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendPrepareIR2NIB" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
9: <RCSendPrepareIR2NIB line 4435, col 30 to line 4506, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
10: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
11: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
12: <RCScheduleTheIR line 4508, col 26 to line 4572, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendScheduleIR2NIB" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
13: <RCSendScheduleIR2NIB line 4574, col 31 to line 4650, col 72 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 1], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {1}, key |-> s0, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 1] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
14: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2OFC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
15: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
16: <SequencerProc line 4248, col 24 to line 4295, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> "")
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
17: <OFCNIBEventHanderProc line 4757, col 32 to line 4820, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = TRUE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
18: <ControllerThread line 4824, col 27 to line 4876, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = TRUE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadGetNextIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
19: <OFCThreadGetNextIR line 4878, col 29 to line 4932, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCUpdateIRQueueIRTag" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
20: <OFCUpdateIRQueueIRTag line 4934, col 32 to line 4992, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCStartSchedulingIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
21: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCStartSchedulingIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
22: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCStartSchedulingIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
23: <OFCStartSchedulingIR line 4994, col 31 to line 5066, col 72 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
24: <ControllerThreadSendIR line 5151, col 33 to line 5237, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
25: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
26: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
27: <RCNIBEventHanderProc line 4105, col 31 to line 4184, col 72 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
28: <ControllerThreadForwardIRInner line 5239, col 41 to line 5336, col 82 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWaitForIRToHaveCorrectStatus" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
29: <SwitchSimpleProcess line 2487, col 30 to line 2552, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWaitForIRToHaveCorrectStatus" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
30: <OFCWaitForIRToHaveCorrectStatus line 5338, col 42 to line 5430, col 83 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
31: <ControllerThreadUnlockSemaphore line 5432, col 42 to line 5527, col 83 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
32: <OFCMonitorCheckIfMastr line 6433, col 33 to line 6507, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
33: <ControllerUpdateIR2 line 6603, col 30 to line 6673, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
34: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
35: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
36: <RCNIBEventHanderProc line 4105, col 31 to line 4184, col 72 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
37: <RCComputeNextIR2Schedule line 4297, col 35 to line 4362, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
38: <SchedulerMechanism line 4364, col 29 to line 4433, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendPrepareIR2NIB" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
39: <RCSendPrepareIR2NIB line 4435, col 30 to line 4506, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
40: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
41: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCScheduleTheIR" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {2})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
42: <RCScheduleTheIR line 4508, col 26 to line 4572, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendScheduleIR2NIB" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
43: <RCSendScheduleIR2NIB line 4574, col 31 to line 4650, col 72 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "PrepareIR", ops |-> <<[value |-> [type |-> STATUS_START_SCHEDULING, next |-> 2], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE], [value |-> {2}, key |-> s1, table |-> NIBT_SET_SCHEDULED_IRS]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> STATUS_START_SCHEDULING, next |-> 2] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
44: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2OFC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
45: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
46: <OFCRemoveIRFromIRQueueOFC line 5529, col 36 to line 5617, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
47: <NIBEventHandling line 3678, col 27 to line 3913, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
48: <NIBSendBackIfAny line 3915, col 27 to line 3974, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
49: <OFCNIBEventHanderProc line 4757, col 32 to line 4820, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = TRUE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
50: <ControllerThread line 4824, col 27 to line 4876, col 68 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = TRUE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadGetNextIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
51: <OFCThreadGetNextIR line 4878, col 29 to line 4932, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCUpdateIRQueueIRTag" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
52: <OFCUpdateIRQueueIRTag line 4934, col 32 to line 4992, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "ScheduleIR", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE], [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 2]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ NIBUpdateForOFC = FALSE
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ debug_ofc = (<<ofc0, t0>> :> "")
/\ debug = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 2)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCStartSchedulingIR" @@ <<ofc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, WATCH_DOG>> :> "ControllerWatchDogProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [value |-> [type |-> NO_STATUS], key |-> <<rc0, CONT_SEQ>>, table |-> NIBT_CONTROLLER_STATE])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 2], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {1} @@ s1 :> {2})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_DONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [controllerStateNIB |-> (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS]), IRQueueNIB |-> <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {1} @@ s1 :> {2}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ IRQueueRC = <<[tag |-> <<ofc0, t0>>, IR |-> 1], [tag |-> NO_TAG, IR |-> 2]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ controllerFailedModules = (<<ofc0, WATCH_DOG>> :> {} @@ <<rc0, WATCH_DOG>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> 1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {2})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2103:1 @!@!@
The error occurred when TLC was evaluating the nested
expressions at the following positions:
0. Line 3678, column 27 to line 3913, column 68 in ScenarioIII
1. Line 3678, column 30 to line 3678, column 58 in ScenarioIII
2. Line 3679, column 30 to line 3679, column 45 in ScenarioIII
3. Line 2223, column 25 to line 2223, column 73 in ScenarioIII
4. Line 3680, column 30 to line 3680, column 41 in ScenarioIII
5. Line 3681, column 30 to line 3684, column 93 in ScenarioIII
6. Line 3684, column 38 to line 3684, column 93 in ScenarioIII
7. Line 3684, column 41 to line 3684, column 93 in ScenarioIII
8. Line 3685, column 30 to line 3867, column 78 in ScenarioIII
9. Line 3686, column 38 to line 3859, column 74 in ScenarioIII
10. Line 3686, column 41 to line 3686, column 93 in ScenarioIII
11. Line 3687, column 41 to line 3687, column 60 in ScenarioIII
12. Line 3688, column 41 to line 3859, column 74 in ScenarioIII
13. Line 3689, column 49 to line 3848, column 134 in ScenarioIII
14. Line 3689, column 52 to line 3848, column 134 in ScenarioIII
15. Line 3706, column 60 to line 3848, column 134 in ScenarioIII
16. Line 3706, column 63 to line 3848, column 134 in ScenarioIII
17. Line 3727, column 71 to line 3848, column 134 in ScenarioIII
18. Line 3727, column 74 to line 3848, column 134 in ScenarioIII
19. Line 3742, column 82 to line 3848, column 134 in ScenarioIII
20. Line 3742, column 85 to line 3848, column 134 in ScenarioIII
21. Line 3757, column 93 to line 3848, column 134 in ScenarioIII
22. Line 3757, column 96 to line 3848, column 134 in ScenarioIII
23. Line 3772, column 104 to line 3848, column 134 in ScenarioIII
24. Line 3772, column 107 to line 3847, column 142 in ScenarioIII
25. Line 3784, column 115 to line 3847, column 142 in ScenarioIII
26. Line 3784, column 118 to line 3845, column 164 in ScenarioIII
27. Line 3796, column 126 to line 3845, column 164 in ScenarioIII
28. Line 3796, column 129 to line 3845, column 164 in ScenarioIII
29. Line 3808, column 137 to line 3845, column 164 in ScenarioIII
30. Line 3808, column 140 to line 3844, column 173 in ScenarioIII
31. Line 3809, column 148 to line 3822, column 179 in ScenarioIII
32. Line 3809, column 151 to line 3810, column 244 in ScenarioIII
33. Line 3811, column 151 to line 3812, column 244 in ScenarioIII
34. Line 3813, column 151 to line 3814, column 244 in ScenarioIII
35. Line 3815, column 151 to line 3815, column 266 in ScenarioIII
36. Line 3815, column 162 to line 3815, column 266 in ScenarioIII
37. Line 3815, column 188 to line 3815, column 265 in ScenarioIII


@!@!@ENDMSG 2103 @!@!@
@!@!@STARTMSG 2201:0 @!@!@
The coverage statistics at 2021-03-14 20:52:38
@!@!@ENDMSG 2201 @!@!@
@!@!@STARTMSG 2773:0 @!@!@
<Init line 2347, col 1 to line 2347, col 4 of module ScenarioIII>: 2:2
@!@!@ENDMSG 2773 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2348, col 12 to line 2348, col 44 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2349, col 12 to line 2349, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2350, col 12 to line 2350, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2351, col 12 to line 2351, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2352, col 12 to line 2354, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2355, col 12 to line 2358, col 59 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2359, col 12 to line 2359, col 36 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2360, col 12 to line 2360, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2361, col 12 to line 2361, col 35 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2362, col 12 to line 2363, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2364, col 12 to line 2364, col 30 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2365, col 12 to line 2365, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2366, col 12 to line 2366, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2367, col 12 to line 2367, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2368, col 12 to line 2368, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2369, col 12 to line 2369, col 37 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2370, col 12 to line 2370, col 47 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2371, col 12 to line 2371, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2372, col 12 to line 2372, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2373, col 30 to line 2373, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2373, col 71 to line 2373, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2373, col 72 to line 2373, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2373, col 88 to line 2373, col 107 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2373, col 88 to line 2373, col 92 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2373, col 97 to line 2373, col 107 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2373, col 84 to line 2373, col 85 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2373, col 43 to line 2373, col 68 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2374, col 32 to line 2374, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2168, col 28 to line 2183, col 114 of module ScenarioIII: 2:32
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2168, col 52 to line 2183, col 113 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2168, col 55 to line 2168, col 81 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2168, col 56 to line 2168, col 81 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2168, col 68 to line 2168, col 81 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2168, col 65 to line 2168, col 65 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2169, col 55 to line 2170, col 88 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2169, col 56 to line 2170, col 88 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2169, col 71 to line 2170, col 88 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2169, col 75 to line 2169, col 88 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2170, col 75 to line 2170, col 88 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2169, col 68 to line 2169, col 68 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2171, col 55 to line 2172, col 88 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2171, col 67 to line 2172, col 88 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2171, col 68 to line 2172, col 88 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2171, col 80 to line 2172, col 88 of module ScenarioIII: 20
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2171, col 83 to line 2171, col 96 of module ScenarioIII: 20
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2172, col 83 to line 2172, col 88 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2171, col 77 to line 2171, col 77 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2171, col 64 to line 2171, col 64 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2173, col 55 to line 2175, col 98 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2173, col 58 to line 2173, col 75 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2174, col 58 to line 2175, col 98 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2174, col 70 to line 2175, col 98 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2174, col 82 to line 2175, col 98 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2174, col 85 to line 2174, col 98 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2175, col 85 to line 2175, col 98 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2174, col 79 to line 2174, col 79 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2174, col 67 to line 2174, col 67 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2176, col 55 to line 2179, col 126 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2180, col 55 to line 2180, col 90 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2181, col 56 to line 2183, col 113 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2168, col 35 to line 2168, col 49 of module ScenarioIII: 2:14
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2374, col 53 to line 2374, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2375, col 21 to line 2376, col 125 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2375, col 56 to line 2376, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2375, col 57 to line 2376, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2375, col 79 to line 2376, col 125 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2375, col 82 to line 2375, col 86 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2376, col 82 to line 2376, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2375, col 69 to line 2375, col 76 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2375, col 34 to line 2375, col 53 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2377, col 12 to line 2377, col 33 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2378, col 12 to line 2378, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2379, col 12 to line 2379, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2380, col 12 to line 2380, col 27 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2381, col 12 to line 2381, col 55 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2382, col 12 to line 2382, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2383, col 12 to line 2383, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2384, col 12 to line 2384, col 159 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2385, col 12 to line 2385, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2386, col 12 to line 2386, col 57 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2387, col 12 to line 2387, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2388, col 12 to line 2388, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2389, col 12 to line 2389, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2390, col 12 to line 2390, col 34 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2391, col 12 to line 2391, col 25 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2392, col 12 to line 2392, col 24 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2393, col 12 to line 2393, col 23 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2394, col 12 to line 2394, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2395, col 12 to line 2395, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2396, col 12 to line 2396, col 54 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2397, col 12 to line 2397, col 53 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2398, col 12 to line 2398, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2399, col 12 to line 2399, col 46 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2401, col 12 to line 2401, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2402, col 12 to line 2402, col 41 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2404, col 12 to line 2404, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2406, col 12 to line 2406, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2408, col 12 to line 2408, col 73 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2410, col 12 to line 2410, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2412, col 12 to line 2412, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2414, col 12 to line 2414, col 63 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2416, col 12 to line 2416, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2417, col 12 to line 2417, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2418, col 12 to line 2418, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2420, col 12 to line 2420, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2421, col 12 to line 2421, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2422, col 12 to line 2422, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2424, col 12 to line 2424, col 82 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2425, col 12 to line 2425, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2426, col 12 to line 2426, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2427, col 12 to line 2427, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2428, col 12 to line 2428, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2429, col 12 to line 2429, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2430, col 12 to line 2430, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2432, col 12 to line 2432, col 91 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2433, col 12 to line 2433, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2435, col 12 to line 2435, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2436, col 12 to line 2436, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2437, col 12 to line 2437, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2438, col 12 to line 2438, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2439, col 12 to line 2439, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2440, col 12 to line 2440, col 58 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2441, col 12 to line 2441, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2443, col 12 to line 2443, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2444, col 12 to line 2444, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2445, col 12 to line 2445, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2447, col 12 to line 2447, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2448, col 12 to line 2448, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2449, col 12 to line 2449, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2450, col 12 to line 2450, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2451, col 12 to line 2451, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2452, col 12 to line 2452, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2453, col 12 to line 2453, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2454, col 12 to line 2454, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2455, col 12 to line 2455, col 98 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2456, col 12 to line 2456, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2458, col 12 to line 2458, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2459, col 12 to line 2459, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2460, col 12 to line 2460, col 62 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2461, col 12 to line 2461, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2463, col 12 to line 2463, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2464, col 12 to line 2464, col 89 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2465, col 12 to line 2465, col 86 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2466, col 12 to line 2466, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2468, col 12 to line 2468, col 83 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2469, col 12 to line 2485, col 109 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchSimpleProcess line 2487, col 1 to line 2487, col 25 of module ScenarioIII>: 12:69
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2487, col 33 to line 2487, col 64 of module ScenarioIII: 2020
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2487, col 33 to line 2487, col 40 of module ScenarioIII: 1951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2488, col 33 to line 2488, col 75 of module ScenarioIII: 2020
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2488, col 33 to line 2488, col 57 of module ScenarioIII: 1951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2488, col 61 to line 2488, col 75 of module ScenarioIII: 1951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2489, col 33 to line 2489, col 67 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2489, col 33 to line 2489, col 63 of module ScenarioIII: 1951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2490, col 33 to line 2490, col 69 of module ScenarioIII: 138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2490, col 33 to line 2490, col 46 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2490, col 50 to line 2490, col 69 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2491, col 33 to line 2491, col 75 of module ScenarioIII: 138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2491, col 33 to line 2491, col 42 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2491, col 48 to line 2491, col 75 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2492, col 33 to line 2492, col 108 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2493, col 33 to line 2494, col 86 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2495, col 33 to line 2495, col 125 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2496, col 33 to line 2496, col 90 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2497, col 33 to line 2497, col 110 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2498, col 33 to line 2500, col 109 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2501, col 33 to line 2503, col 124 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2501, col 40 to line 2502, col 65 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2501, col 43 to line 2501, col 65 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2502, col 43 to line 2502, col 65 of module ScenarioIII: 56
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2504, col 33 to line 2504, col 66 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2505, col 33 to line 2505, col 81 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2506, col 33 to line 2552, col 71 of module ScenarioIII: 69
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchRcvPacket line 2556, col 1 to line 2556, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2556, col 29 to line 2556, col 56 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2557, col 29 to line 2557, col 72 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2560, col 29 to line 2560, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2566, col 29 to line 2566, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2567, col 29 to line 2567, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2568, col 29 to line 2568, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2569, col 29 to line 2611, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicInsertToOfaBuff line 2613, col 1 to line 2613, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2613, col 42 to line 2613, col 82 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2617, col 53 to line 2617, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2618, col 53 to line 2618, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2619, col 53 to line 2619, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2620, col 53 to line 2620, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2621, col 53 to line 2621, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2622, col 53 to line 2622, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2623, col 53 to line 2624, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2625, col 42 to line 2691, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFromOFAPacket line 2696, col 1 to line 2696, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2696, col 33 to line 2696, col 64 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2697, col 33 to line 2697, col 60 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2698, col 33 to line 2698, col 65 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2699, col 33 to line 2699, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2702, col 33 to line 2702, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2707, col 33 to line 2707, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2708, col 33 to line 2708, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2709, col 33 to line 2756, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicSendOutMsg line 2758, col 1 to line 2758, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2758, col 37 to line 2758, col 72 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2765, col 48 to line 2765, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2766, col 48 to line 2766, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2767, col 48 to line 2767, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2768, col 48 to line 2768, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2769, col 48 to line 2769, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2770, col 48 to line 2770, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2771, col 48 to line 2772, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2773, col 37 to line 2829, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcIn line 2834, col 1 to line 2834, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2834, col 29 to line 2834, col 56 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2835, col 29 to line 2835, col 55 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2836, col 29 to line 2836, col 61 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2839, col 29 to line 2839, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2840, col 29 to line 2840, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2845, col 29 to line 2845, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2846, col 29 to line 2846, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2847, col 29 to line 2889, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcessPacket line 2891, col 1 to line 2891, col 28 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2891, col 36 to line 2891, col 70 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2895, col 47 to line 2895, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2897, col 58 to line 2897, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2900, col 58 to line 2900, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2901, col 47 to line 2901, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2902, col 47 to line 2902, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2903, col 47 to line 2903, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2904, col 47 to line 2904, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2905, col 47 to line 2906, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2907, col 36 to line 2961, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcOut line 2966, col 1 to line 2966, col 22 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2966, col 30 to line 2966, col 58 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2967, col 30 to line 2967, col 56 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2968, col 30 to line 2968, col 62 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2971, col 30 to line 2971, col 47 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2972, col 30 to line 2972, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2973, col 30 to line 2973, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2976, col 30 to line 2976, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2977, col 30 to line 3021, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SendInstallationConfirmation line 3023, col 1 to line 3023, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3023, col 42 to line 3023, col 82 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3027, col 53 to line 3027, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3028, col 53 to line 3030, col 176 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3031, col 53 to line 3031, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3032, col 53 to line 3032, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3033, col 53 to line 3033, col 113 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3034, col 53 to line 3034, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3035, col 53 to line 3036, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3037, col 42 to line 3102, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerProc line 3107, col 1 to line 3107, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3107, col 33 to line 3107, col 64 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3108, col 33 to line 3108, col 56 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3109, col 33 to line 3109, col 67 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3112, col 33 to line 3112, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3113, col 33 to line 3113, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3116, col 33 to line 3116, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3117, col 33 to line 3117, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3118, col 33 to line 3165, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerInsert2TCAM line 3167, col 1 to line 3167, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3167, col 40 to line 3167, col 78 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3171, col 51 to line 3171, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3172, col 51 to line 3172, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3173, col 51 to line 3173, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3174, col 51 to line 3174, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3175, col 51 to line 3175, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3176, col 51 to line 3176, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3177, col 51 to line 3177, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3178, col 51 to line 3180, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3181, col 40 to line 3244, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerSendConfirmation line 3246, col 1 to line 3246, col 37 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3246, col 45 to line 3246, col 88 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3250, col 56 to line 3250, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3251, col 56 to line 3251, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3252, col 56 to line 3252, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3253, col 56 to line 3253, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3254, col 56 to line 3254, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3255, col 56 to line 3255, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3256, col 56 to line 3257, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3258, col 45 to line 3333, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFailure line 3339, col 1 to line 3339, col 19 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3339, col 27 to line 3339, col 52 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3340, col 27 to line 3340, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3340, col 43 to line 3340, col 112 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3340, col 44 to line 3340, col 55 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3340, col 64 to line 3340, col 111 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3340, col 74 to line 3340, col 111 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2205, col 38 to line 2205, col 101 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2205, col 70 to line 2205, col 100 of module ScenarioIII: 7800
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2205, col 45 to line 2205, col 67 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3340, col 104 to line 3340, col 110 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3341, col 27 to line 3341, col 50 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3342, col 27 to line 3342, col 37 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3342, col 28 to line 3342, col 37 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2308, col 15 to line 2308, col 58 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2308, col 38 to line 2308, col 58 of module ScenarioIII: 3090
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2308, col 24 to line 2308, col 35 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3343, col 27 to line 3345, col 55 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3346, col 65 to line 3346, col 85 of module ScenarioIII: 1938
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3346, col 36 to line 3346, col 62 of module ScenarioIII: 1938
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2207, col 28 to line 2207, col 63 of module ScenarioIII: 1938:3876
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2207, col 49 to line 2207, col 62 of module ScenarioIII: 3876
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2207, col 35 to line 2207, col 46 of module ScenarioIII: 1938
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3346, col 55 to line 3346, col 61 of module ScenarioIII: 1938
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3347, col 27 to line 3347, col 53 of module ScenarioIII: 1368
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3352, col 38 to line 3352, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3353, col 38 to line 3353, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3355, col 29 to line 3355, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3360, col 38 to line 3362, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3363, col 38 to line 3363, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3364, col 38 to line 3364, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3365, col 38 to line 3365, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3366, col 38 to line 3366, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3368, col 49 to line 3368, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3369, col 49 to line 3371, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3372, col 49 to line 3372, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3374, col 49 to line 3376, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3377, col 38 to line 3377, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3382, col 49 to line 3382, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3384, col 60 to line 3384, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3385, col 60 to line 3387, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3388, col 60 to line 3388, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3390, col 60 to line 3392, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3393, col 49 to line 3393, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3398, col 60 to line 3398, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3402, col 71 to line 3402, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3403, col 71 to line 3406, col 199 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3407, col 71 to line 3407, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3409, col 71 to line 3411, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3412, col 60 to line 3412, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3417, col 71 to line 3417, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3418, col 71 to line 3418, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3419, col 71 to line 3419, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3420, col 71 to line 3422, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3423, col 71 to line 3423, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3426, col 71 to line 3430, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3431, col 38 to line 3434, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3435, col 27 to line 3435, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3436, col 27 to line 3470, col 65 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchResolveFailure line 3474, col 1 to line 3474, col 26 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3474, col 34 to line 3474, col 66 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3475, col 34 to line 3475, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3475, col 47 to line 3475, col 110 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3475, col 48 to line 3475, col 56 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3475, col 65 to line 3475, col 109 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3475, col 75 to line 3475, col 109 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2210, col 35 to line 2212, col 102 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2210, col 67 to line 2212, col 101 of module ScenarioIII: 7800
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2210, col 42 to line 2210, col 64 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3475, col 102 to line 3475, col 108 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3476, col 34 to line 3476, col 66 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3481, col 36 to line 3481, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3486, col 45 to line 3488, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3489, col 45 to line 3489, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3490, col 45 to line 3490, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3491, col 45 to line 3491, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3492, col 45 to line 3492, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3494, col 56 to line 3494, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3495, col 56 to line 3498, col 198 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3499, col 56 to line 3499, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3501, col 56 to line 3503, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3504, col 45 to line 3504, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3509, col 56 to line 3509, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3510, col 56 to line 3510, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3512, col 67 to line 3512, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3513, col 67 to line 3515, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3516, col 67 to line 3516, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3517, col 67 to line 3520, col 209 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3521, col 56 to line 3521, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3526, col 67 to line 3526, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3528, col 78 to line 3528, col 168 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3529, col 78 to line 3532, col 220 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3533, col 78 to line 3533, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3535, col 78 to line 3537, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3542, col 78 to line 3542, col 147 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3546, col 89 to line 3546, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3547, col 89 to line 3550, col 231 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3551, col 89 to line 3551, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3553, col 89 to line 3555, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3558, col 78 to line 3561, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3562, col 56 to line 3562, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3563, col 45 to line 3566, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3567, col 34 to line 3567, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3568, col 34 to line 3612, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ghostProc line 3616, col 1 to line 3616, col 15 of module ScenarioIII>: 12:12
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3616, col 23 to line 3616, col 44 of module ScenarioIII: 1962
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3616, col 23 to line 3616, col 30 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3617, col 26 to line 3617, col 58 of module ScenarioIII: 1962
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3617, col 26 to line 3617, col 35 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3617, col 39 to line 3617, col 58 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3618, col 26 to line 3618, col 48 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3618, col 26 to line 3618, col 38 of module ScenarioIII: 24
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3618, col 42 to line 3618, col 48 of module ScenarioIII: 24
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3619, col 26 to line 3619, col 62 of module ScenarioIII: 24
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3619, col 26 to line 3619, col 39 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3619, col 43 to line 3619, col 62 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3620, col 23 to line 3633, col 70 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3634, col 23 to line 3636, col 114 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3637, col 23 to line 3637, col 56 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3638, col 23 to line 3638, col 61 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3639, col 23 to line 3674, col 61 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBEventHandling line 3678, col 1 to line 3678, col 22 of module ScenarioIII>: 78:347
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3678, col 30 to line 3678, col 58 of module ScenarioIII: 1322
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3678, col 30 to line 3678, col 37 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2223, col 25 to line 2223, col 73 of module ScenarioIII: 995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 25 to line 2223, col 61 of module ScenarioIII: 648
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 65 to line 2223, col 73 of module ScenarioIII: 648
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3679, col 41 to line 3679, col 44 of module ScenarioIII: 648
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3680, col 30 to line 3680, col 41 of module ScenarioIII: 995
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3680, col 30 to line 3680, col 34 of module ScenarioIII: 648
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3680, col 38 to line 3680, col 41 of module ScenarioIII: 648
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3681, col 34 to line 3681, col 105 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3683, col 43 to line 3683, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3684, col 41 to line 3684, col 93 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3684, col 59 to line 3684, col 93 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3685, col 33 to line 3685, col 57 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3686, col 41 to line 3686, col 93 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3686, col 54 to line 3686, col 93 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3687, col 41 to line 3687, col 60 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3687, col 50 to line 3687, col 60 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3688, col 44 to line 3688, col 68 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3689, col 56 to line 3689, col 90 of module ScenarioIII: 352
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3690, col 63 to line 3691, col 155 of module ScenarioIII: 58
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3692, col 63 to line 3693, col 155 of module ScenarioIII: 58
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3694, col 63 to line 3694, col 174 of module ScenarioIII: 58
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3695, col 63 to line 3696, col 155 of module ScenarioIII: 58
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3697, col 63 to line 3697, col 168 of module ScenarioIII: 58
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3698, col 63 to line 3705, col 85 of module ScenarioIII: 58
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3706, col 67 to line 3706, col 102 of module ScenarioIII: 294
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3707, col 74 to line 3708, col 166 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3709, col 74 to line 3709, col 136 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3710, col 74 to line 3711, col 166 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3712, col 74 to line 3713, col 166 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3714, col 74 to line 3714, col 185 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3715, col 74 to line 3719, col 159 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3720, col 74 to line 3720, col 132 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3721, col 74 to line 3726, col 96 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3727, col 78 to line 3727, col 119 of module ScenarioIII: 262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3728, col 85 to line 3732, col 170 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3733, col 85 to line 3733, col 142 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3734, col 85 to line 3741, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3742, col 89 to line 3742, col 130 of module ScenarioIII: 258
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3743, col 96 to line 3747, col 181 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3748, col 96 to line 3748, col 154 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3749, col 96 to line 3756, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3757, col 100 to line 3757, col 146 of module ScenarioIII: 258
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3762, col 107 to line 3762, col 218 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3763, col 107 to line 3771, col 129 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3772, col 111 to line 3772, col 144 of module ScenarioIII: 258
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3773, col 118 to line 3774, col 211 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3775, col 118 to line 3775, col 186 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3776, col 118 to line 3776, col 211 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3777, col 118 to line 3777, col 175 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3777, col 132 to line 3777, col 175 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2122, col 30 to line 2123, col 76 of module ScenarioIII: 100:89
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3777, col 146 to line 3777, col 155 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3777, col 158 to line 3777, col 174 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3778, col 118 to line 3783, col 140 of module ScenarioIII: 100
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3784, col 122 to line 3784, col 169 of module ScenarioIII: 158
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3785, col 129 to line 3786, col 222 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3787, col 129 to line 3788, col 222 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3789, col 129 to line 3789, col 220 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3790, col 129 to line 3790, col 186 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3791, col 129 to line 3795, col 151 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3796, col 133 to line 3796, col 179 of module ScenarioIII: 109
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3801, col 140 to line 3801, col 245 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3802, col 140 to line 3807, col 162 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3808, col 144 to line 3808, col 180 of module ScenarioIII: 109
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3809, col 151 to line 3810, col 244 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3809, col 158 to line 3809, col 202 of module ScenarioIII: 68
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3811, col 151 to line 3812, col 244 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3811, col 158 to line 3811, col 186 of module ScenarioIII: 68
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3813, col 151 to line 3814, col 244 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3813, col 158 to line 3813, col 176 of module ScenarioIII: 68
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3815, col 151 to line 3815, col 266 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3815, col 162 to line 3815, col 266 of module ScenarioIII: 68
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3816, col 151 to line 3817, col 244 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3818, col 151 to line 3818, col 237 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3819, col 151 to line 3822, col 179 of module ScenarioIII: 63
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3823, col 155 to line 3823, col 194 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3824, col 159 to line 3837, col 219 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3839, col 162 to line 3842, col 190 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3843, col 151 to line 3844, col 173 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3845, col 140 to line 3845, col 164 of module ScenarioIII: 104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3846, col 118 to line 3847, col 142 of module ScenarioIII: 153
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3848, col 107 to line 3848, col 134 of module ScenarioIII: 253
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3850, col 52 to line 3859, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3861, col 41 to line 3867, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3868, col 34 to line 3868, col 58 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3869, col 41 to line 3869, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3870, col 41 to line 3870, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3871, col 41 to line 3871, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3872, col 41 to line 3872, col 86 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3873, col 41 to line 3874, col 83 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3875, col 30 to line 3913, col 68 of module ScenarioIII: 347
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBSendBackIfAny line 3915, col 1 to line 3915, col 22 of module ScenarioIII>: 69:327
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3915, col 30 to line 3915, col 58 of module ScenarioIII: 1288
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3915, col 30 to line 3915, col 37 of module ScenarioIII: 961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3916, col 33 to line 3916, col 62 of module ScenarioIII: 327
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3917, col 44 to line 3917, col 65 of module ScenarioIII: 93
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3918, col 49 to line 3918, col 100 of module ScenarioIII: 93
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3920, col 52 to line 3920, col 67 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3921, col 41 to line 3921, col 57 of module ScenarioIII: 93
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3922, col 44 to line 3922, col 74 of module ScenarioIII: 234
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3923, col 49 to line 3923, col 102 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3924, col 52 to line 3924, col 55 of module ScenarioIII: 206
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3925, col 52 to line 3925, col 68 of module ScenarioIII: 206
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3926, col 41 to line 3926, col 56 of module ScenarioIII: 234
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3927, col 30 to line 3927, col 81 of module ScenarioIII: 327
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3928, col 30 to line 3928, col 75 of module ScenarioIII: 327
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3929, col 30 to line 3974, col 68 of module ScenarioIII: 327
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBReconciliation line 3976, col 1 to line 3976, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3976, col 31 to line 3976, col 60 of module ScenarioIII: 952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3977, col 31 to line 3977, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3978, col 31 to line 3978, col 53 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3979, col 31 to line 3979, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3980, col 31 to line 3980, col 53 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3981, col 31 to line 3981, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3982, col 31 to line 3982, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3983, col 31 to line 4027, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ChangeNIBStatusToNormal line 4029, col 1 to line 4029, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4029, col 37 to line 4029, col 72 of module ScenarioIII: 952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4030, col 37 to line 4030, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4031, col 37 to line 4035, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4037, col 48 to line 4037, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4039, col 48 to line 4039, col 63 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4040, col 37 to line 4040, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4041, col 37 to line 4041, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4042, col 37 to line 4099, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHanderProc line 4105, col 1 to line 4105, col 26 of module ScenarioIII>: 18:149
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4105, col 34 to line 4105, col 66 of module ScenarioIII: 1101
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4105, col 34 to line 4105, col 41 of module ScenarioIII: 952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4106, col 34 to line 4106, col 46 of module ScenarioIII: 1101
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4106, col 34 to line 4106, col 39 of module ScenarioIII: 952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4106, col 43 to line 4106, col 46 of module ScenarioIII: 952
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4107, col 34 to line 4107, col 83 of module ScenarioIII: 149
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4108, col 34 to line 4108, col 55 of module ScenarioIII: 149
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4109, col 37 to line 4109, col 61 of module ScenarioIII: 149
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4110, col 45 to line 4110, col 104 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4111, col 45 to line 4111, col 90 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4112, col 45 to line 4112, col 88 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4113, col 45 to line 4113, col 110 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4114, col 45 to line 4114, col 66 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4115, col 45 to line 4115, col 97 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4116, col 45 to line 4116, col 71 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4117, col 50 to line 4118, col 115 of module ScenarioIII: 146
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4117, col 50 to line 4117, col 94 of module ScenarioIII: 146
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4118, col 51 to line 4118, col 115 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4119, col 53 to line 4127, col 77 of module ScenarioIII: 29
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4128, col 56 to line 4128, col 59 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4129, col 56 to line 4134, col 88 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4135, col 45 to line 4135, col 66 of module ScenarioIII: 146
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4136, col 34 to line 4136, col 83 of module ScenarioIII: 149
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4137, col 34 to line 4184, col 72 of module ScenarioIII: 149
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendReadTransaction line 4188, col 1 to line 4188, col 27 of module ScenarioIII>: 1:2
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4188, col 35 to line 4188, col 68 of module ScenarioIII: 951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4188, col 35 to line 4188, col 42 of module ScenarioIII: 949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2242, col 22 to line 2242, col 70 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2242, col 22 to line 2242, col 58 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2242, col 62 to line 2242, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4189, col 43 to line 4189, col 53 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4190, col 35 to line 4190, col 111 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4191, col 35 to line 4191, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4192, col 35 to line 4192, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4193, col 35 to line 4246, col 73 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SequencerProc line 4248, col 1 to line 4248, col 19 of module ScenarioIII>: 47:402
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4248, col 27 to line 4248, col 52 of module ScenarioIII: 1350
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4248, col 27 to line 4248, col 34 of module ScenarioIII: 948
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2224, col 42 to line 2224, col 59 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2224, col 64 to line 2224, col 90 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2224, col 64 to line 2224, col 78 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4249, col 46 to line 4249, col 52 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2223, col 25 to line 2223, col 73 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 25 to line 2223, col 61 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 65 to line 2223, col 73 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4250, col 38 to line 4250, col 41 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4251, col 27 to line 4251, col 63 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4251, col 27 to line 4251, col 40 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4251, col 44 to line 4251, col 63 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4252, col 27 to line 4252, col 59 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4252, col 27 to line 4252, col 36 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4252, col 40 to line 4252, col 59 of module ScenarioIII: 408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4253, col 27 to line 4253, col 80 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4254, col 27 to line 4295, col 65 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCComputeNextIR2Schedule line 4297, col 1 to line 4297, col 30 of module ScenarioIII>: 10:17
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4297, col 38 to line 4297, col 74 of module ScenarioIII: 963
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4297, col 38 to line 4297, col 45 of module ScenarioIII: 946
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4298, col 38 to line 4298, col 51 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4299, col 38 to line 4299, col 131 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4299, col 58 to line 4299, col 131 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4299, col 59 to line 4299, col 74 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4299, col 83 to line 4299, col 130 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4299, col 93 to line 4299, col 130 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2255, col 40 to line 2258, col 98 of module ScenarioIII: 17:157
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2255, col 61 to line 2258, col 97 of module ScenarioIII: 34
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2255, col 61 to line 2257, col 100 of module ScenarioIII: 34
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2255, col 61 to line 2256, col 87 of module ScenarioIII: 34
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2255, col 61 to line 2255, col 86 of module ScenarioIII: 34
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2256, col 62 to line 2256, col 87 of module ScenarioIII: 19
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2248, col 32 to line 2249, col 79 of module ScenarioIII: 19
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2248, col 33 to line 2249, col 79 of module ScenarioIII: 19
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2248, col 56 to line 2249, col 79 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2248, col 56 to line 2248, col 87 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2249, col 57 to line 2249, col 79 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2248, col 42 to line 2248, col 53 of module ScenarioIII: 19
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2256, col 86 to line 2256, col 86 of module ScenarioIII: 19
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2257, col 62 to line 2257, col 100 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2258, col 62 to line 2258, col 97 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2255, col 47 to line 2255, col 58 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4300, col 38 to line 4300, col 60 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4301, col 41 to line 4301, col 68 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4302, col 49 to line 4302, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4303, col 46 to line 4303, col 96 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4304, col 38 to line 4362, col 76 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SchedulerMechanism line 4364, col 1 to line 4364, col 24 of module ScenarioIII>: 9:17
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4364, col 32 to line 4364, col 62 of module ScenarioIII: 961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4364, col 32 to line 4364, col 39 of module ScenarioIII: 944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4365, col 32 to line 4365, col 68 of module ScenarioIII: 34
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4365, col 32 to line 4365, col 45 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4365, col 49 to line 4365, col 68 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4366, col 32 to line 4366, col 64 of module ScenarioIII: 34
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4366, col 32 to line 4366, col 41 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4366, col 45 to line 4366, col 64 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4367, col 36 to line 4367, col 107 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4369, col 45 to line 4369, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4370, col 40 to line 4370, col 97 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4371, col 36 to line 4371, col 61 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4372, col 43 to line 4372, col 119 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4373, col 43 to line 4373, col 158 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4374, col 47 to line 4374, col 72 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4375, col 51 to line 4375, col 187 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4377, col 54 to line 4377, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4379, col 43 to line 4381, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4382, col 36 to line 4382, col 61 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4383, col 43 to line 4383, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4384, col 43 to line 4384, col 160 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4385, col 43 to line 4385, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4386, col 43 to line 4386, col 91 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4387, col 43 to line 4388, col 85 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4389, col 32 to line 4433, col 70 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendPrepareIR2NIB line 4435, col 1 to line 4435, col 25 of module ScenarioIII>: 8:17
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4435, col 33 to line 4435, col 64 of module ScenarioIII: 959
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4435, col 33 to line 4435, col 40 of module ScenarioIII: 942
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4436, col 37 to line 4436, col 108 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4438, col 46 to line 4438, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4439, col 41 to line 4439, col 98 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4440, col 37 to line 4440, col 62 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4441, col 47 to line 4441, col 66 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4442, col 52 to line 4445, col 95 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4447, col 55 to line 4449, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4451, col 44 to line 4452, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4453, col 37 to line 4453, col 62 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4454, col 44 to line 4454, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4455, col 44 to line 4455, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4456, col 44 to line 4456, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4457, col 44 to line 4457, col 88 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4458, col 44 to line 4459, col 86 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4460, col 33 to line 4506, col 71 of module ScenarioIII: 17
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCScheduleTheIR line 4508, col 1 to line 4508, col 21 of module ScenarioIII>: 22:49
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4508, col 29 to line 4508, col 56 of module ScenarioIII: 989
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4508, col 29 to line 4508, col 36 of module ScenarioIII: 940
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4509, col 29 to line 4509, col 65 of module ScenarioIII: 98
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4509, col 29 to line 4509, col 42 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4509, col 46 to line 4509, col 65 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4510, col 29 to line 4510, col 61 of module ScenarioIII: 98
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4510, col 29 to line 4510, col 38 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4510, col 42 to line 4510, col 61 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4511, col 33 to line 4511, col 104 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4513, col 42 to line 4513, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4514, col 37 to line 4514, col 94 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4515, col 33 to line 4515, col 58 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4516, col 40 to line 4516, col 132 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4517, col 40 to line 4517, col 108 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4518, col 44 to line 4518, col 69 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4519, col 48 to line 4519, col 128 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4521, col 51 to line 4521, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4523, col 40 to line 4525, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4526, col 33 to line 4526, col 58 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4527, col 40 to line 4527, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4528, col 40 to line 4528, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4529, col 40 to line 4529, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4530, col 40 to line 4530, col 89 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4531, col 40 to line 4532, col 82 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4533, col 29 to line 4572, col 80 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendScheduleIR2NIB line 4574, col 1 to line 4574, col 26 of module ScenarioIII>: 31:49
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4574, col 34 to line 4574, col 66 of module ScenarioIII: 987
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4574, col 34 to line 4574, col 41 of module ScenarioIII: 938
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4575, col 38 to line 4575, col 109 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4577, col 47 to line 4577, col 103 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4578, col 42 to line 4578, col 99 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4579, col 38 to line 4579, col 63 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4580, col 48 to line 4580, col 67 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4581, col 53 to line 4584, col 96 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4586, col 56 to line 4588, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4590, col 45 to line 4591, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4592, col 38 to line 4592, col 63 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4593, col 45 to line 4593, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4594, col 45 to line 4594, col 162 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4595, col 45 to line 4595, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4596, col 48 to line 4596, col 74 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4597, col 53 to line 4597, col 98 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4598, col 56 to line 4598, col 103 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4599, col 45 to line 4600, col 87 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4601, col 34 to line 4650, col 72 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqStateReconciliation line 4652, col 1 to line 4652, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4652, col 46 to line 4652, col 90 of module ScenarioIII: 936
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4658, col 46 to line 4658, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4660, col 57 to line 4660, col 227 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4662, col 57 to line 4662, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4663, col 46 to line 4663, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4664, col 46 to line 4746, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCNIBEventHanderProc line 4757, col 1 to line 4757, col 27 of module ScenarioIII>: 20:37
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4757, col 35 to line 4757, col 68 of module ScenarioIII: 973
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4757, col 35 to line 4757, col 42 of module ScenarioIII: 936
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4758, col 35 to line 4758, col 48 of module ScenarioIII: 973
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4758, col 35 to line 4758, col 41 of module ScenarioIII: 936
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4758, col 45 to line 4758, col 48 of module ScenarioIII: 936
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4759, col 35 to line 4759, col 87 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4760, col 35 to line 4760, col 58 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4761, col 35 to line 4761, col 113 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4762, col 38 to line 4762, col 82 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4763, col 43 to line 4764, col 68 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4766, col 46 to line 4767, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4768, col 35 to line 4768, col 85 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4769, col 35 to line 4820, col 73 of module ScenarioIII: 37
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThread line 4824, col 1 to line 4824, col 22 of module ScenarioIII>: 24:36
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4824, col 30 to line 4824, col 58 of module ScenarioIII: 970
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4824, col 30 to line 4824, col 37 of module ScenarioIII: 934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2224, col 42 to line 2224, col 90 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2225, col 42 to line 2225, col 60 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2225, col 65 to line 2225, col 92 of module ScenarioIII: 451
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2225, col 65 to line 2225, col 80 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4825, col 49 to line 4825, col 55 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2223, col 25 to line 2223, col 73 of module ScenarioIII: 451
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 25 to line 2223, col 61 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 65 to line 2223, col 73 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4826, col 41 to line 4826, col 44 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2271, col 83 to line 2271, col 98 of module ScenarioIII: 62
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2271, col 83 to line 2271, col 87 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2271, col 91 to line 2271, col 98 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2271, col 64 to line 2271, col 80 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2121, col 18 to line 2121, col 43 of module ScenarioIII: 415:464
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2121, col 19 to line 2121, col 24 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2121, col 33 to line 2121, col 42 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2271, col 73 to line 2271, col 79 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2272, col 77 to line 2272, col 90 of module ScenarioIII: 72
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2272, col 77 to line 2272, col 81 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2272, col 85 to line 2272, col 90 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2272, col 58 to line 2272, col 74 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2121, col 18 to line 2121, col 43 of module ScenarioIII: 415:464
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2121, col 19 to line 2121, col 24 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2121, col 33 to line 2121, col 42 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2272, col 67 to line 2272, col 73 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2232, col 41 to line 2232, col 85 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2232, col 42 to line 2232, col 85 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2232, col 70 to line 2232, col 85 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2232, col 51 to line 2232, col 67 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2121, col 18 to line 2121, col 43 of module ScenarioIII: 36:85
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2121, col 19 to line 2121, col 24 of module ScenarioIII: 49
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2121, col 33 to line 2121, col 42 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2232, col 60 to line 2232, col 66 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2273, col 67 to line 2273, col 74 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2273, col 77 to line 2273, col 83 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2274, col 49 to line 2274, col 148 of module ScenarioIII: 46
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2274, col 49 to line 2274, col 80 of module ScenarioIII: 23
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2274, col 84 to line 2274, col 148 of module ScenarioIII: 23
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4827, col 54 to line 4827, col 60 of module ScenarioIII: 23
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4827, col 63 to line 4827, col 66 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4827, col 69 to line 4827, col 78 of module ScenarioIII: 415
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4828, col 30 to line 4828, col 66 of module ScenarioIII: 72
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4828, col 30 to line 4828, col 43 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4828, col 47 to line 4828, col 66 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4829, col 30 to line 4829, col 62 of module ScenarioIII: 72
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4829, col 30 to line 4829, col 39 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4829, col 43 to line 4829, col 62 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4830, col 30 to line 4830, col 77 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4831, col 30 to line 4876, col 68 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCThreadGetNextIR line 4878, col 1 to line 4878, col 24 of module ScenarioIII>: 24:36
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4878, col 32 to line 4878, col 62 of module ScenarioIII: 968
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4878, col 32 to line 4878, col 39 of module ScenarioIII: 932
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4879, col 32 to line 4879, col 46 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4880, col 32 to line 4880, col 110 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4880, col 44 to line 4880, col 110 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4880, col 45 to line 4880, col 52 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4880, col 61 to line 4880, col 109 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4880, col 71 to line 4880, col 109 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2235, col 45 to line 2238, col 96 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2235, col 74 to line 2238, col 96 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2235, col 74 to line 2235, col 101 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2236, col 71 to line 2238, col 96 of module ScenarioIII: 23
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2235, col 58 to line 2235, col 71 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 4880, col 93 to line 4880, col 96 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 4880, col 99 to line 4880, col 108 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4881, col 32 to line 4881, col 109 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4882, col 32 to line 4882, col 94 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4883, col 32 to line 4883, col 55 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4884, col 32 to line 4884, col 82 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4885, col 32 to line 4932, col 70 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCUpdateIRQueueIRTag line 4934, col 1 to line 4934, col 27 of module ScenarioIII>: 28:36
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4934, col 35 to line 4934, col 68 of module ScenarioIII: 966
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4934, col 35 to line 4934, col 42 of module ScenarioIII: 930
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4935, col 35 to line 4935, col 133 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4936, col 35 to line 4936, col 132 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4937, col 35 to line 4937, col 76 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4938, col 35 to line 4938, col 84 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4939, col 35 to line 4992, col 73 of module ScenarioIII: 36
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCStartSchedulingIR line 4994, col 1 to line 4994, col 26 of module ScenarioIII>: 26:33
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4994, col 34 to line 4994, col 66 of module ScenarioIII: 961
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4994, col 34 to line 4994, col 41 of module ScenarioIII: 928
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4995, col 38 to line 4995, col 109 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4997, col 47 to line 4997, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4998, col 42 to line 4998, col 101 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4999, col 38 to line 4999, col 64 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5000, col 45 to line 5000, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5001, col 45 to line 5001, col 162 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5002, col 45 to line 5002, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5003, col 45 to line 5003, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5004, col 49 to line 5004, col 75 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5005, col 56 to line 5005, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5006, col 56 to line 5006, col 173 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5007, col 56 to line 5007, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5008, col 56 to line 5008, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5009, col 59 to line 5009, col 109 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2281, col 62 to line 2282, col 158 of module ScenarioIII: 66
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2281, col 62 to line 2281, col 93 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2281, col 97 to line 2282, col 158 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2120, col 13 to line 2120, col 52 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2281, col 101 to line 2282, col 157 of module ScenarioIII: 33:99
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2281, col 102 to line 2281, col 123 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2282, col 111 to line 2282, col 156 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||||line 2279, col 51 to line 2280, col 134 of module ScenarioIII: 33:66
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2279, col 82 to line 2280, col 133 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2279, col 110 to line 2280, col 133 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2279, col 113 to line 2280, col 133 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2279, col 113 to line 2279, col 122 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2280, col 116 to line 2280, col 133 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2279, col 91 to line 2279, col 107 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||||||line 2121, col 18 to line 2121, col 43 of module ScenarioIII: 33:74
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2121, col 19 to line 2121, col 24 of module ScenarioIII: 41
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2121, col 33 to line 2121, col 42 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2279, col 100 to line 2279, col 106 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2279, col 58 to line 2279, col 79 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2282, col 139 to line 2282, col 141 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2282, col 144 to line 2282, col 146 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2282, col 149 to line 2282, col 155 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5010, col 96 to line 5010, col 102 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5010, col 105 to line 5010, col 108 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5010, col 111 to line 5010, col 128 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5010, col 131 to line 5010, col 140 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5011, col 67 to line 5011, col 149 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5012, col 67 to line 5012, col 118 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5013, col 67 to line 5013, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5014, col 67 to line 5014, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5015, col 56 to line 5016, col 98 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5017, col 34 to line 5066, col 72 of module ScenarioIII: 33
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadRemoveQueue1 line 5068, col 1 to line 5068, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5068, col 42 to line 5068, col 82 of module ScenarioIII: 927
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5071, col 42 to line 5071, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5072, col 42 to line 5072, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5074, col 53 to line 5074, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5075, col 53 to line 5075, col 147 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5076, col 53 to line 5076, col 94 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5078, col 53 to line 5080, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5081, col 42 to line 5081, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5082, col 42 to line 5149, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadSendIR line 5151, col 1 to line 5151, col 28 of module ScenarioIII>: 17:21
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5151, col 36 to line 5151, col 70 of module ScenarioIII: 948
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5151, col 36 to line 5151, col 43 of module ScenarioIII: 927
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5152, col 36 to line 5152, col 72 of module ScenarioIII: 42
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5152, col 36 to line 5152, col 49 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5152, col 53 to line 5152, col 72 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5153, col 36 to line 5153, col 68 of module ScenarioIII: 42
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5153, col 36 to line 5153, col 45 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5153, col 49 to line 5153, col 68 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5154, col 40 to line 5155, col 119 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5156, col 53 to line 5156, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5157, col 53 to line 5157, col 170 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5159, col 53 to line 5159, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5160, col 47 to line 5160, col 50 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5161, col 47 to line 5162, col 89 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5163, col 40 to line 5163, col 85 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5164, col 50 to line 5164, col 139 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5165, col 58 to line 5165, col 124 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5166, col 61 to line 5166, col 80 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5167, col 66 to line 5169, col 110 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5171, col 69 to line 5173, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5174, col 58 to line 5174, col 117 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5175, col 58 to line 5175, col 118 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5176, col 58 to line 5179, col 93 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5180, col 47 to line 5180, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5181, col 47 to line 5183, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5184, col 36 to line 5237, col 74 of module ScenarioIII: 21
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadForwardIRInner line 5239, col 1 to line 5239, col 36 of module ScenarioIII>: 14:15
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5239, col 44 to line 5239, col 86 of module ScenarioIII: 941
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5239, col 44 to line 5239, col 51 of module ScenarioIII: 926
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5240, col 44 to line 5240, col 80 of module ScenarioIII: 30
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5240, col 44 to line 5240, col 57 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5240, col 61 to line 5240, col 80 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5241, col 44 to line 5241, col 76 of module ScenarioIII: 30
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5241, col 44 to line 5241, col 53 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5241, col 57 to line 5241, col 76 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5242, col 48 to line 5242, col 119 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5244, col 57 to line 5244, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5245, col 52 to line 5245, col 111 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5246, col 48 to line 5246, col 74 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5247, col 55 to line 5249, col 214 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5250, col 58 to line 5250, col 119 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5251, col 66 to line 5251, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5252, col 63 to line 5252, col 122 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5253, col 55 to line 5255, col 69 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5257, col 55 to line 5258, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5259, col 48 to line 5259, col 74 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5260, col 55 to line 5260, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5261, col 55 to line 5261, col 172 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5262, col 55 to line 5262, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5263, col 55 to line 5263, col 115 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5264, col 55 to line 5265, col 97 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5266, col 44 to line 5336, col 82 of module ScenarioIII: 15
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCWaitForIRToHaveCorrectStatus line 5338, col 1 to line 5338, col 37 of module ScenarioIII>: 45:122
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5338, col 45 to line 5338, col 88 of module ScenarioIII: 1047
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5338, col 45 to line 5338, col 52 of module ScenarioIII: 925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5339, col 45 to line 5339, col 81 of module ScenarioIII: 256
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5339, col 45 to line 5339, col 58 of module ScenarioIII: 134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5339, col 62 to line 5339, col 81 of module ScenarioIII: 134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5340, col 45 to line 5340, col 77 of module ScenarioIII: 256
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5340, col 45 to line 5340, col 54 of module ScenarioIII: 134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5340, col 58 to line 5340, col 77 of module ScenarioIII: 134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5341, col 49 to line 5342, col 128 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5343, col 62 to line 5343, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5344, col 62 to line 5344, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5346, col 62 to line 5346, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5347, col 56 to line 5347, col 59 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5348, col 56 to line 5349, col 98 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5350, col 49 to line 5350, col 94 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5351, col 56 to line 5351, col 100 of module ScenarioIII: 244
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5351, col 57 to line 5351, col 100 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5352, col 56 to line 5352, col 116 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5353, col 56 to line 5353, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5354, col 45 to line 5430, col 83 of module ScenarioIII: 122
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadUnlockSemaphore line 5432, col 1 to line 5432, col 37 of module ScenarioIII>: 27:121
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5432, col 45 to line 5432, col 88 of module ScenarioIII: 1045
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5432, col 45 to line 5432, col 52 of module ScenarioIII: 924
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5433, col 45 to line 5433, col 81 of module ScenarioIII: 242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5433, col 45 to line 5433, col 58 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5433, col 62 to line 5433, col 81 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5434, col 45 to line 5434, col 77 of module ScenarioIII: 242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5434, col 45 to line 5434, col 54 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5434, col 58 to line 5434, col 77 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5435, col 49 to line 5436, col 128 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5437, col 62 to line 5437, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5438, col 62 to line 5438, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5440, col 62 to line 5440, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5441, col 56 to line 5441, col 59 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5442, col 56 to line 5443, col 98 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5444, col 49 to line 5444, col 94 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5445, col 59 to line 5445, col 107 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5446, col 64 to line 5446, col 151 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5448, col 67 to line 5448, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5449, col 56 to line 5449, col 110 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5450, col 56 to line 5450, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5451, col 56 to line 5451, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5452, col 45 to line 5527, col 83 of module ScenarioIII: 121
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCRemoveIRFromIRQueueOFC line 5529, col 1 to line 5529, col 31 of module ScenarioIII>: 68:123
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5529, col 39 to line 5529, col 76 of module ScenarioIII: 1046
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5529, col 39 to line 5529, col 46 of module ScenarioIII: 923
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5530, col 39 to line 5530, col 75 of module ScenarioIII: 246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5530, col 39 to line 5530, col 52 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5530, col 56 to line 5530, col 75 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5531, col 39 to line 5531, col 71 of module ScenarioIII: 246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5531, col 39 to line 5531, col 48 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5531, col 52 to line 5531, col 71 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5532, col 43 to line 5532, col 114 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5534, col 52 to line 5534, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5535, col 47 to line 5535, col 106 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5536, col 43 to line 5536, col 69 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5537, col 50 to line 5537, col 146 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5538, col 50 to line 5538, col 106 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5538, col 64 to line 5538, col 106 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2122, col 30 to line 2123, col 76 of module ScenarioIII: 123:16
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5538, col 78 to line 5538, col 87 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5538, col 90 to line 5538, col 105 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5539, col 53 to line 5539, col 72 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5540, col 58 to line 5542, col 102 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5544, col 61 to line 5546, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5548, col 50 to line 5551, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5552, col 43 to line 5552, col 69 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5553, col 50 to line 5553, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5554, col 50 to line 5554, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5555, col 50 to line 5555, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5556, col 50 to line 5556, col 95 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5557, col 50 to line 5558, col 92 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5559, col 39 to line 5617, col 77 of module ScenarioIII: 123
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadStateReconciliation line 5619, col 1 to line 5619, col 41 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5619, col 49 to line 5619, col 96 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5627, col 49 to line 5627, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5630, col 71 to line 5630, col 142 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5632, col 71 to line 5632, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5634, col 71 to line 5634, col 166 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5636, col 71 to line 5636, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5637, col 60 to line 5637, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5639, col 71 to line 5639, col 246 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5641, col 82 to line 5641, col 177 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5643, col 82 to line 5643, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5645, col 71 to line 5646, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5647, col 60 to line 5647, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5648, col 49 to line 5648, col 94 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5649, col 49 to line 5736, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerProc line 5750, col 1 to line 5750, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5750, col 40 to line 5750, col 78 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5751, col 40 to line 5751, col 66 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5752, col 40 to line 5752, col 55 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5753, col 40 to line 5753, col 64 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5756, col 40 to line 5756, col 117 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5758, col 51 to line 5758, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5760, col 62 to line 5760, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5761, col 62 to line 5761, col 132 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5762, col 40 to line 5825, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEvenHanlderRemoveEventFromQueue line 5827, col 1 to line 5827, col 47 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5827, col 55 to line 5827, col 108 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5832, col 68 to line 5832, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5833, col 66 to line 5833, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5835, col 66 to line 5835, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5837, col 77 to line 5837, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5839, col 77 to line 5839, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5841, col 66 to line 5842, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5844, col 66 to line 5844, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5845, col 66 to line 5845, col 183 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5846, col 66 to line 5846, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5847, col 66 to line 5847, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5848, col 66 to line 5849, col 108 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5850, col 55 to line 5940, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSuspendSW line 5942, col 1 to line 5942, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5942, col 33 to line 5942, col 64 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5947, col 50 to line 5947, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5948, col 50 to line 5948, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5950, col 50 to line 5950, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5952, col 44 to line 5953, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5955, col 44 to line 5955, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5956, col 44 to line 5956, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5957, col 44 to line 5957, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5958, col 44 to line 5958, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5959, col 33 to line 6006, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerFreeSuspendedSW line 6008, col 1 to line 6008, col 31 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6008, col 39 to line 6008, col 76 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6013, col 52 to line 6013, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6014, col 50 to line 6014, col 100 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6016, col 50 to line 6016, col 169 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6018, col 61 to line 6018, col 148 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6020, col 61 to line 6020, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6022, col 50 to line 6023, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6025, col 50 to line 6025, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6026, col 50 to line 6026, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6027, col 50 to line 6027, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6028, col 50 to line 6028, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6029, col 50 to line 6030, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6031, col 39 to line 6087, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerCheckIfThisIsLastEvent line 6089, col 1 to line 6089, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6089, col 46 to line 6089, col 90 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6092, col 63 to line 6092, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6093, col 63 to line 6093, col 180 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6095, col 63 to line 6095, col 131 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6097, col 57 to line 6098, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6101, col 68 to line 6101, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6102, col 68 to line 6102, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6103, col 57 to line 6103, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6104, col 46 to line 6186, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<getIRsToBeChecked line 6188, col 1 to line 6188, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6188, col 31 to line 6188, col 60 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6193, col 48 to line 6193, col 131 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6194, col 48 to line 6194, col 165 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6196, col 48 to line 6196, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6198, col 42 to line 6199, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6201, col 42 to line 6201, col 134 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6203, col 53 to line 6203, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6204, col 53 to line 6204, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6205, col 42 to line 6205, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6206, col 42 to line 6206, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6207, col 31 to line 6252, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ResetAllIRs line 6254, col 1 to line 6254, col 17 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6254, col 25 to line 6254, col 48 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6259, col 42 to line 6259, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6260, col 42 to line 6260, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6262, col 42 to line 6262, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6264, col 36 to line 6265, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6267, col 36 to line 6267, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6268, col 36 to line 6268, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6270, col 47 to line 6270, col 103 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6272, col 47 to line 6272, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6274, col 47 to line 6274, col 117 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6275, col 47 to line 6275, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6276, col 36 to line 6276, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6277, col 36 to line 6278, col 58 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6279, col 25 to line 6314, col 63 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerStateReconciliation line 6316, col 1 to line 6316, col 47 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6316, col 55 to line 6316, col 108 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6323, col 55 to line 6323, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6325, col 66 to line 6325, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6327, col 66 to line 6327, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6328, col 55 to line 6328, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6329, col 55 to line 6422, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCMonitorCheckIfMastr line 6433, col 1 to line 6433, col 28 of module ScenarioIII>: 50:57
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6433, col 36 to line 6433, col 70 of module ScenarioIII: 979
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6433, col 36 to line 6433, col 43 of module ScenarioIII: 922
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2224, col 42 to line 2224, col 90 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2225, col 42 to line 2225, col 60 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2225, col 65 to line 2225, col 92 of module ScenarioIII: 573
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2225, col 65 to line 2225, col 80 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6434, col 55 to line 6434, col 61 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2223, col 25 to line 2223, col 73 of module ScenarioIII: 573
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 25 to line 2223, col 61 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2223, col 65 to line 2223, col 73 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6435, col 47 to line 6435, col 50 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6436, col 36 to line 6436, col 59 of module ScenarioIII: 573
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6436, col 36 to line 6436, col 52 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6436, col 56 to line 6436, col 59 of module ScenarioIII: 516
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6437, col 39 to line 6437, col 59 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6438, col 39 to line 6438, col 75 of module ScenarioIII: 114
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6438, col 39 to line 6438, col 52 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6438, col 56 to line 6438, col 75 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6439, col 36 to line 6439, col 68 of module ScenarioIII: 114
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6439, col 36 to line 6439, col 45 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6439, col 49 to line 6439, col 68 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6440, col 36 to line 6440, col 73 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6441, col 36 to line 6441, col 88 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6442, col 36 to line 6443, col 89 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6444, col 36 to line 6445, col 89 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6446, col 39 to line 6446, col 78 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6447, col 44 to line 6447, col 95 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6450, col 47 to line 6450, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6451, col 36 to line 6507, col 74 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<MonitoringServerRemoveFromQueue line 6509, col 1 to line 6509, col 37 of module ScenarioIII>: 250:349
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6509, col 45 to line 6509, col 88 of module ScenarioIII: 1270
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6509, col 45 to line 6509, col 52 of module ScenarioIII: 921
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6510, col 45 to line 6510, col 81 of module ScenarioIII: 698
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6510, col 45 to line 6510, col 58 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6510, col 62 to line 6510, col 81 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6511, col 45 to line 6511, col 77 of module ScenarioIII: 698
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6511, col 45 to line 6511, col 54 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6511, col 58 to line 6511, col 77 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6512, col 49 to line 6513, col 128 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6514, col 62 to line 6514, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6515, col 62 to line 6515, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6517, col 62 to line 6517, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6518, col 56 to line 6518, col 59 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6519, col 56 to line 6520, col 98 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6521, col 49 to line 6521, col 94 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6522, col 53 to line 6523, col 107 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6524, col 56 to line 6524, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6525, col 56 to line 6525, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6526, col 45 to line 6601, col 83 of module ScenarioIII: 349
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerUpdateIR2 line 6603, col 1 to line 6603, col 25 of module ScenarioIII>: 53:57
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6603, col 33 to line 6603, col 64 of module ScenarioIII: 978
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6603, col 33 to line 6603, col 40 of module ScenarioIII: 921
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6604, col 33 to line 6604, col 69 of module ScenarioIII: 114
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6604, col 33 to line 6604, col 46 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6604, col 50 to line 6604, col 69 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6605, col 33 to line 6605, col 65 of module ScenarioIII: 114
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6605, col 33 to line 6605, col 42 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6605, col 46 to line 6605, col 65 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6606, col 37 to line 6607, col 116 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6608, col 50 to line 6608, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6609, col 50 to line 6609, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6611, col 50 to line 6611, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6612, col 44 to line 6612, col 47 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6613, col 44 to line 6614, col 86 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6615, col 37 to line 6615, col 82 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6616, col 41 to line 6622, col 104 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6623, col 44 to line 6623, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6624, col 44 to line 6627, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6628, col 33 to line 6673, col 71 of module ScenarioIII: 57
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerWatchDogProc line 6679, col 1 to line 6679, col 28 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6679, col 36 to line 6679, col 70 of module ScenarioIII: 1840
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6680, col 36 to line 6680, col 72 of module ScenarioIII: 1840
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6681, col 36 to line 6681, col 68 of module ScenarioIII: 1840
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6682, col 36 to line 6682, col 143 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6682, col 63 to line 6682, col 143 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6682, col 64 to line 6682, col 86 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6682, col 95 to line 6682, col 142 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6682, col 105 to line 6682, col 142 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2304, col 40 to line 2305, col 102 of module ScenarioIII: 1816:9080
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2304, col 60 to line 2305, col 101 of module ScenarioIII: 9080
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2304, col 63 to line 2304, col 73 of module ScenarioIII: 9080
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2305, col 63 to line 2305, col 101 of module ScenarioIII: 3632
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2304, col 47 to line 2304, col 57 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 6682, col 135 to line 6682, col 141 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6683, col 36 to line 6683, col 82 of module ScenarioIII: 1816
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6687, col 41 to line 6687, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6688, col 41 to line 6688, col 129 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6689, col 36 to line 6689, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6690, col 36 to line 6744, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<IRCriticalSection line 6879, col 1 to line 6879, col 17 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6882, col 25 to line 6885, col 107 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<RedundantInstallation line 6887, col 1 to line 6887, col 21 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6887, col 26 to line 6888, col 70 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6887, col 49 to line 6888, col 70 of module ScenarioIII: 1928
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6887, col 52 to line 6887, col 72 of module ScenarioIII: 1928
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6888, col 52 to line 6888, col 70 of module ScenarioIII: 1337
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6887, col 35 to line 6887, col 46 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<ConsistencyReq line 6890, col 1 to line 6890, col 14 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6890, col 19 to line 6894, col 91 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6890, col 55 to line 6894, col 91 of module ScenarioIII: 839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6890, col 31 to line 6890, col 52 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2121, col 18 to line 2121, col 43 of module ScenarioIII: 964:4320
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2121, col 19 to line 2121, col 24 of module ScenarioIII: 839
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2121, col 33 to line 2121, col 42 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 6890, col 40 to line 6890, col 51 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<Debug line 6895, col 1 to line 6895, col 5 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6895, col 11 to line 6895, col 25 of module ScenarioIII: 964
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2202:0 @!@!@
End of statistics.
@!@!@ENDMSG 2202 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(54) at 2021-03-14 20:52:41: 2,441 states generated (8,670 s/min), 964 distinct states found (3,424 ds/min), 40 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2199:0 @!@!@
2441 states generated, 964 distinct states found, 40 states left on queue.
@!@!@ENDMSG 2199 @!@!@
@!@!@STARTMSG 2186:0 @!@!@
Finished in 16900ms at (2021-03-14 20:52:41)
@!@!@ENDMSG 2186 @!@!@

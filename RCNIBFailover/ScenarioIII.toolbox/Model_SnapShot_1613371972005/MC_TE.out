@!@!@STARTMSG 2262:0 @!@!@
TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
@!@!@ENDMSG 2262 @!@!@
@!@!@STARTMSG 2187:0 @!@!@
Running breadth-first search Model-Checking with fp 0 and seed 3699433188482488200 with 2 workers on 4 cores with 1433MB heap and 3221MB offheap memory [pid: 78302] (Mac OS X 10.14.4 x86_64, AdoptOpenJDK 14.0.1 x86_64, OffHeapDiskFPSet, DiskStateQueue).
@!@!@ENDMSG 2187 @!@!@
@!@!@STARTMSG 2220:0 @!@!@
Starting SANY...
@!@!@ENDMSG 2220 @!@!@
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/RCNIBFailover/ScenarioIII.toolbox/Model_SnapShot_1613371972005/MC.tla
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/RCNIBFailover/ScenarioIII.toolbox/Model_SnapShot_1613371972005/ScenarioIII.tla
Warning: symbols were renamed.
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/TLC.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Integers.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Sequences.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/FiniteSets.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Naturals.tla
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module ScenarioIII
Semantic processing of module MC
@!@!@STARTMSG 2219:0 @!@!@
SANY finished.
@!@!@ENDMSG 2219 @!@!@
@!@!@STARTMSG 2185:0 @!@!@
Starting... (2021-04-04 17:33:19)
@!@!@ENDMSG 2185 @!@!@
@!@!@STARTMSG 2212:0 @!@!@
Implied-temporal checking--satisfiability problem has 1 branches.
@!@!@ENDMSG 2212 @!@!@
@!@!@STARTMSG 2189:0 @!@!@
Computing initial states...
@!@!@ENDMSG 2189 @!@!@
@!@!@STARTMSG 2190:0 @!@!@
Finished computing initial states: 1 distinct state generated at 2021-04-04 17:33:23.
@!@!@ENDMSG 2190 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 566 total distinct states at (2021-04-04 17:33:26)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-04-04 17:33:26
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(20) at 2021-04-04 17:33:26: 1,337 states generated (1,337 s/min), 672 distinct states found (672 ds/min), 106 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 11643 total distinct states at (2021-04-04 17:34:26)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-04-04 17:34:27
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(40) at 2021-04-04 17:34:27: 40,031 states generated (38,694 s/min), 14,843 distinct states found (14,171 ds/min), 3,200 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 40143 total distinct states at (2021-04-04 17:35:27)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-04-04 17:35:27
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(45) at 2021-04-04 17:35:27: 154,756 states generated (114,725 s/min), 50,801 distinct states found (35,958 ds/min), 10,656 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 76822 total distinct states at (2021-04-04 17:36:27)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 01s at 2021-04-04 17:36:29
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(47) at 2021-04-04 17:36:29: 303,350 states generated (148,594 s/min), 94,662 distinct states found (43,861 ds/min), 17,838 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 117420 total distinct states at (2021-04-04 17:37:29)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 02s at 2021-04-04 17:37:31
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(50) at 2021-04-04 17:37:31: 455,912 states generated (152,562 s/min), 137,946 distinct states found (43,284 ds/min), 20,525 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 159510 total distinct states at (2021-04-04 17:38:31)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 03s at 2021-04-04 17:38:35
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(52) at 2021-04-04 17:38:35: 608,988 states generated (153,076 s/min), 180,797 distinct states found (42,851 ds/min), 21,285 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 200705 total distinct states at (2021-04-04 17:39:35)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2116:1 @!@!@
Temporal properties were violated.

@!@!@ENDMSG 2116 @!@!@
@!@!@STARTMSG 2264:1 @!@!@
The following behavior constitutes a counter-example:

@!@!@ENDMSG 2264 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
1: <Initial predicate>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> <<>>)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> ""])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendReadTransaction" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
2: <NIBEventHandling line 3799, col 27 to line 3848, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> <<>>)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> ""])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendReadTransaction" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
3: <RCSendReadTransaction line 4855, col 32 to line 4920, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> ""])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "SeqReadNIBStates"]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
4: <NIBDequeueTransaction line 3850, col 32 to line 3914, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBProcessTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
5: <NIBProcessTransaction line 3916, col 32 to line 4158, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
6: <SequencerProc line 4922, col 24 to line 4973, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
7: <NIBSendBackIfAny line 4160, col 27 to line 4226, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
8: <NIBEventHandling line 3799, col 27 to line 3848, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
9: <RCNIBEventHanderProc line 4686, col 31 to line 4775, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
10: <RCComputeNextIR2Schedule line 4975, col 35 to line 5051, col 64 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
11: <SchedulerMechanism line 5053, col 29 to line 5116, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendPrepareIR2NIB" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
12: <RCSendPrepareIR2NIB line 5118, col 30 to line 5183, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
13: <NIBDequeueTransaction line 3850, col 32 to line 3914, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBProcessTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
14: <NIBProcessTransaction line 3916, col 32 to line 4158, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2OFC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
15: <NIBSendBackIfAny line 4160, col 27 to line 4226, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
16: <OFCNIBEventHanderProc line 5352, col 32 to line 5419, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
17: <NIBEventHandling line 3799, col 27 to line 3848, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
18: <ControllerThread line 5423, col 27 to line 5477, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadGetNextIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
19: <OFCThreadGetNextIR line 5479, col 29 to line 5536, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCUpdateIRQueueIRTag" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
20: <OFCUpdateIRQueueIRTag line 5538, col 32 to line 5600, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCStartSchedulingIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
21: <OFCStartSchedulingIR line 5602, col 31 to line 5676, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
22: <ControllerThreadSendIR line 5759, col 33 to line 5842, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
23: <ControllerThreadForwardIRInner line 5844, col 41 to line 5943, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
24: <SwitchSimpleProcess line 2580, col 30 to line 2646, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
25: <OFCMonitorCheckIfMastr line 6983, col 33 to line 7058, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<t0, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadUnlockSemaphore" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
26: <ControllerThreadUnlockSemaphore line 5945, col 42 to line 6044, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
27: <OFCRemoveIRFromIRQueueOFC line 6046, col 36 to line 6142, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "RCFailure")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
28: <RCFailure line 4475, col 20 to line 4517, col 67 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> Failed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
29: <SequencerProc line 4922, col 24 to line 4973, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> Failed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
30: <RCNIBEventHanderProc line 4686, col 31 to line 4775, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> Failed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
31: <NIBDequeueTransaction line 3850, col 32 to line 3914, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> Failed @@ <<rc0, CONT_RC_NIB_EVENT>> :> Failed @@ <<nib0, CONT_NIB_RC_EVENT>> :> Failed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBReconciliation" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
32: <RCFailoverResetStates line 4521, col 32 to line 4587, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> Failed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBReconciliation" @@ <<"proc", RC_FAILOVER>> :> "RCReadNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
33: <NIBReconciliation line 4228, col 28 to line 4284, col 75 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> InReconciliation)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBFailoverReadOFC" @@ <<"proc", RC_FAILOVER>> :> "RCReadNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
34: <NIBFailoverReadOFC line 4286, col 29 to line 4340, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> InReconciliation)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "ControllerUpdateIR2" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBFailoverReadRC" @@ <<"proc", RC_FAILOVER>> :> "RCReadNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
35: <ControllerUpdateIR2 line 7158, col 30 to line 7230, col 75 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> InReconciliation)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBFailoverReadRC" @@ <<"proc", RC_FAILOVER>> :> "RCReadNIB" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
36: <RCReadNIB line 4589, col 20 to line 4632, col 67 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> InReconciliation)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "MonitoringServerRemoveFromQueue" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBFailoverReadRC" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
37: <MonitoringServerRemoveFromQueue line 7060, col 42 to line 7156, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> InReconciliation)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBFailoverReadRC" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
38: <NIBFailoverReadRC line 4342, col 28 to line 4394, col 75 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> InReconciliation)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "ChangeNIBStatusToNormal" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
39: <ChangeNIBStatusToNormal line 4396, col 34 to line 4464, col 81 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
40: <NIBEventHandling line 3799, col 27 to line 3848, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
41: <OFCNIBEventHanderProc line 5352, col 32 to line 5419, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
42: <NIBDequeueTransaction line 3850, col 32 to line 3914, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_SENT, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBProcessTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<0, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
43: <NIBProcessTransaction line 3916, col 32 to line 4158, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
44: <NIBSendBackIfAny line 4160, col 27 to line 4226, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
45: <NIBEventHandling line 3799, col 27 to line 3848, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> InReconciliation @@ <<rc0, CONT_RC_NIB_EVENT>> :> InReconciliation @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCBack2Normal" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
46: <RCBack2Normal line 4634, col 24 to line 4681, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHandlerFailover" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
47: <RCNIBEventHandlerFailover line 4777, col 36 to line 4850, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSequencerFailover" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
48: <RCSequencerFailover line 5285, col 30 to line 5342, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
49: <RCNIBEventHanderProc line 4686, col 31 to line 4775, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
50: <SequencerProc line 4922, col 24 to line 4973, col 71 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
51: <RCComputeNextIR2Schedule line 4975, col 35 to line 5051, col 64 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ RC_READY = TRUE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_DONE, IR_NONE>>
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> 1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK, IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0, s1>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = << >>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "FirstInstallIR", ops |-> <<[value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS], [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [value |-> 1, key |-> 1, table |-> NIBT_FIRST_INSTALL])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ setIRsToReset = (<<ofc0, CONT_EVENT>> :> {})
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = << >>
/\ stepOfFailure_co = (<<ofc0, t0>> :> 0)
/\ resetIR = (<<ofc0, CONT_EVENT>> :> 0)
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {<<1, 2>>}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [value |-> IR_DONE, key |-> 1, table |-> NIBT_IR_STATUS])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = TRUE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = TRUE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE, IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_EVENT>> :> "ControllerEventHandlerProc" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "Done" @@ <<"proc", RC_FAILURE>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, CONT_EVENT>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "RemoveIR", ops |-> <<[key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = TRUE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ FirstInstall = <<1, 0>>
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ monitoringEvent = (<<ofc0, CONT_EVENT>> :> [type |-> 0])
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_SENT, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_SENT, IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> << >>, IRStatusNIB |-> <<IR_DONE, IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = TRUE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = << >>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2218:4 @!@!@
52: Stuttering
@!@!@ENDMSG 2218 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 03s at 2021-04-04 17:39:38
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2201:0 @!@!@
The coverage statistics at 2021-04-04 17:39:38
@!@!@ENDMSG 2201 @!@!@
@!@!@STARTMSG 2773:0 @!@!@
<Init line 2437, col 1 to line 2437, col 4 of module ScenarioIII>: 2:2
@!@!@ENDMSG 2773 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2438, col 12 to line 2438, col 44 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2439, col 12 to line 2439, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2440, col 12 to line 2440, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2441, col 12 to line 2441, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2442, col 12 to line 2444, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2445, col 12 to line 2448, col 59 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2449, col 12 to line 2449, col 36 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2450, col 12 to line 2450, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2451, col 12 to line 2451, col 35 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2452, col 12 to line 2453, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2454, col 12 to line 2454, col 30 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2455, col 12 to line 2455, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2456, col 12 to line 2456, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2457, col 12 to line 2457, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2458, col 12 to line 2458, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2459, col 12 to line 2459, col 37 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2460, col 12 to line 2460, col 47 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2461, col 12 to line 2461, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2462, col 12 to line 2462, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2463, col 30 to line 2463, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2463, col 71 to line 2463, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2463, col 72 to line 2463, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2463, col 88 to line 2463, col 107 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2463, col 88 to line 2463, col 92 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2463, col 97 to line 2463, col 107 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2463, col 84 to line 2463, col 85 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2463, col 43 to line 2463, col 68 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2464, col 32 to line 2464, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2252, col 28 to line 2267, col 114 of module ScenarioIII: 2:32
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2252, col 52 to line 2267, col 113 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2252, col 55 to line 2252, col 81 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2252, col 56 to line 2252, col 81 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2252, col 68 to line 2252, col 81 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2252, col 65 to line 2252, col 65 of module ScenarioIII: 32
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2253, col 55 to line 2254, col 88 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2253, col 56 to line 2254, col 88 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2253, col 71 to line 2254, col 88 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2253, col 75 to line 2253, col 88 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2254, col 75 to line 2254, col 88 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2253, col 68 to line 2253, col 68 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2255, col 55 to line 2256, col 88 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2255, col 67 to line 2256, col 88 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2255, col 68 to line 2256, col 88 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2255, col 80 to line 2256, col 88 of module ScenarioIII: 20
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2255, col 83 to line 2255, col 96 of module ScenarioIII: 20
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2256, col 83 to line 2256, col 88 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2255, col 77 to line 2255, col 77 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2255, col 64 to line 2255, col 64 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2257, col 55 to line 2259, col 98 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2257, col 58 to line 2257, col 75 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2258, col 58 to line 2259, col 98 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2258, col 70 to line 2259, col 98 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2258, col 82 to line 2259, col 98 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2258, col 85 to line 2258, col 98 of module ScenarioIII: 10
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2259, col 85 to line 2259, col 98 of module ScenarioIII: 8
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2258, col 79 to line 2258, col 79 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2258, col 67 to line 2258, col 67 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2260, col 55 to line 2263, col 126 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2264, col 55 to line 2264, col 90 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2265, col 56 to line 2267, col 113 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2252, col 35 to line 2252, col 49 of module ScenarioIII: 2:14
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2464, col 53 to line 2464, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2465, col 21 to line 2466, col 125 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2465, col 56 to line 2466, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2465, col 57 to line 2466, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2465, col 79 to line 2466, col 125 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2465, col 82 to line 2465, col 86 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2466, col 82 to line 2466, col 125 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2465, col 69 to line 2465, col 76 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2465, col 34 to line 2465, col 53 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2467, col 12 to line 2467, col 33 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2468, col 12 to line 2468, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2469, col 12 to line 2469, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2470, col 12 to line 2470, col 27 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2471, col 12 to line 2471, col 55 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2472, col 12 to line 2472, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2473, col 12 to line 2473, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2474, col 12 to line 2474, col 42 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2475, col 12 to line 2475, col 27 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2476, col 12 to line 2476, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2477, col 12 to line 2477, col 159 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2478, col 12 to line 2478, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2479, col 12 to line 2479, col 57 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2480, col 12 to line 2480, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2481, col 12 to line 2481, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2482, col 12 to line 2482, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2483, col 12 to line 2483, col 25 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2484, col 12 to line 2484, col 24 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2485, col 12 to line 2485, col 23 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2486, col 12 to line 2486, col 34 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2487, col 12 to line 2487, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2488, col 12 to line 2488, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2489, col 12 to line 2489, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2490, col 12 to line 2490, col 54 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2491, col 12 to line 2491, col 53 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2492, col 12 to line 2492, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2493, col 12 to line 2493, col 46 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2495, col 12 to line 2495, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2496, col 12 to line 2496, col 41 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2498, col 12 to line 2498, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2500, col 12 to line 2500, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2502, col 12 to line 2502, col 73 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2504, col 12 to line 2504, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2506, col 12 to line 2506, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2508, col 12 to line 2508, col 63 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2510, col 12 to line 2510, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2511, col 12 to line 2511, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2512, col 12 to line 2512, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2514, col 12 to line 2514, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2515, col 12 to line 2515, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2516, col 12 to line 2516, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2518, col 12 to line 2518, col 83 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2519, col 12 to line 2519, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2520, col 12 to line 2520, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2521, col 12 to line 2521, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2522, col 12 to line 2522, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2523, col 12 to line 2523, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2524, col 12 to line 2524, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2526, col 12 to line 2526, col 91 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2527, col 12 to line 2527, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2529, col 12 to line 2529, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2530, col 12 to line 2530, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2531, col 12 to line 2531, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2532, col 12 to line 2532, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2533, col 12 to line 2533, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2534, col 12 to line 2534, col 58 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2535, col 12 to line 2535, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2537, col 12 to line 2537, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2538, col 12 to line 2538, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2539, col 12 to line 2539, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2540, col 12 to line 2540, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2542, col 12 to line 2542, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2543, col 12 to line 2543, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2544, col 12 to line 2544, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2545, col 12 to line 2545, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2546, col 12 to line 2546, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2547, col 12 to line 2547, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2548, col 12 to line 2548, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2549, col 12 to line 2549, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2550, col 12 to line 2550, col 98 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2552, col 12 to line 2552, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2553, col 12 to line 2553, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2554, col 12 to line 2554, col 62 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2555, col 12 to line 2555, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2557, col 12 to line 2557, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2558, col 12 to line 2558, col 89 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2559, col 12 to line 2559, col 86 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2560, col 12 to line 2560, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2561, col 12 to line 2578, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchSimpleProcess line 2580, col 1 to line 2580, col 25 of module ScenarioIII>: 6003:31306
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2580, col 33 to line 2580, col 64 of module ScenarioIII: 432815
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2580, col 33 to line 2580, col 40 of module ScenarioIII: 401509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2581, col 33 to line 2581, col 75 of module ScenarioIII: 432815
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2581, col 33 to line 2581, col 57 of module ScenarioIII: 401509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2581, col 61 to line 2581, col 75 of module ScenarioIII: 401509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2582, col 33 to line 2582, col 67 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2582, col 33 to line 2582, col 63 of module ScenarioIII: 401509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2583, col 33 to line 2583, col 69 of module ScenarioIII: 62612
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2583, col 33 to line 2583, col 46 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2583, col 50 to line 2583, col 69 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2584, col 33 to line 2584, col 75 of module ScenarioIII: 62612
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2584, col 33 to line 2584, col 42 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2584, col 48 to line 2584, col 75 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2585, col 33 to line 2585, col 108 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2586, col 33 to line 2587, col 86 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2588, col 33 to line 2588, col 125 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2589, col 33 to line 2589, col 90 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2590, col 33 to line 2590, col 110 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2591, col 33 to line 2593, col 109 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2594, col 33 to line 2596, col 124 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2594, col 40 to line 2595, col 65 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2594, col 43 to line 2594, col 65 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2595, col 43 to line 2595, col 65 of module ScenarioIII: 24513
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2597, col 33 to line 2597, col 66 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2598, col 33 to line 2598, col 81 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2599, col 33 to line 2646, col 77 of module ScenarioIII: 31306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchRcvPacket line 2650, col 1 to line 2650, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2650, col 29 to line 2650, col 56 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2651, col 29 to line 2651, col 72 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2654, col 29 to line 2654, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2660, col 29 to line 2660, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2661, col 29 to line 2661, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2662, col 29 to line 2662, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2663, col 29 to line 2707, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicInsertToOfaBuff line 2709, col 1 to line 2709, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2709, col 42 to line 2709, col 82 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2713, col 53 to line 2713, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2714, col 53 to line 2714, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2715, col 53 to line 2715, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2716, col 53 to line 2716, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2717, col 53 to line 2717, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2718, col 53 to line 2718, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2719, col 53 to line 2720, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2721, col 42 to line 2789, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFromOFAPacket line 2794, col 1 to line 2794, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2794, col 33 to line 2794, col 64 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2795, col 33 to line 2795, col 60 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2796, col 33 to line 2796, col 65 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2797, col 33 to line 2797, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2800, col 33 to line 2800, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2805, col 33 to line 2805, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2806, col 33 to line 2806, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2807, col 33 to line 2855, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicSendOutMsg line 2857, col 1 to line 2857, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2857, col 37 to line 2857, col 72 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2864, col 48 to line 2864, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2865, col 48 to line 2865, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2866, col 48 to line 2866, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2867, col 48 to line 2867, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2868, col 48 to line 2868, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2869, col 48 to line 2869, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2870, col 48 to line 2871, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2872, col 37 to line 2931, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcIn line 2936, col 1 to line 2936, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2936, col 29 to line 2936, col 56 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2937, col 29 to line 2937, col 55 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2938, col 29 to line 2938, col 61 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2941, col 29 to line 2941, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2942, col 29 to line 2942, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2947, col 29 to line 2947, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2948, col 29 to line 2948, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2949, col 29 to line 2993, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcessPacket line 2995, col 1 to line 2995, col 28 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2995, col 36 to line 2995, col 70 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2999, col 47 to line 2999, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3001, col 58 to line 3001, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3004, col 58 to line 3004, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3005, col 47 to line 3005, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3006, col 47 to line 3006, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3007, col 47 to line 3007, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3008, col 47 to line 3008, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3009, col 47 to line 3010, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3011, col 36 to line 3066, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcOut line 3071, col 1 to line 3071, col 22 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3071, col 30 to line 3071, col 58 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3072, col 30 to line 3072, col 56 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3073, col 30 to line 3073, col 62 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3076, col 30 to line 3076, col 47 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3077, col 30 to line 3077, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3078, col 30 to line 3078, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3081, col 30 to line 3081, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3082, col 30 to line 3127, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SendInstallationConfirmation line 3129, col 1 to line 3129, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3129, col 42 to line 3129, col 82 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3133, col 53 to line 3133, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3134, col 53 to line 3136, col 176 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3137, col 53 to line 3137, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3138, col 53 to line 3138, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3139, col 53 to line 3139, col 113 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3140, col 53 to line 3140, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3141, col 53 to line 3142, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3143, col 42 to line 3210, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerProc line 3215, col 1 to line 3215, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3215, col 33 to line 3215, col 64 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3216, col 33 to line 3216, col 56 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3217, col 33 to line 3217, col 67 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3220, col 33 to line 3220, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3221, col 33 to line 3221, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3224, col 33 to line 3224, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3225, col 33 to line 3225, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3226, col 33 to line 3274, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerInsert2TCAM line 3276, col 1 to line 3276, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3276, col 40 to line 3276, col 78 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3280, col 51 to line 3280, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3281, col 51 to line 3281, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3282, col 51 to line 3282, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3283, col 51 to line 3283, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3284, col 51 to line 3284, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3285, col 51 to line 3285, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3286, col 51 to line 3286, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3287, col 51 to line 3289, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3290, col 40 to line 3357, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerSendConfirmation line 3359, col 1 to line 3359, col 37 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3359, col 45 to line 3359, col 88 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3363, col 56 to line 3363, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3364, col 56 to line 3364, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3365, col 56 to line 3365, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3366, col 56 to line 3366, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3367, col 56 to line 3367, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3368, col 56 to line 3368, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3369, col 56 to line 3370, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3371, col 45 to line 3450, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFailure line 3456, col 1 to line 3456, col 19 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3456, col 27 to line 3456, col 52 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3457, col 27 to line 3457, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3457, col 43 to line 3457, col 112 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3457, col 44 to line 3457, col 55 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3457, col 64 to line 3457, col 111 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3457, col 74 to line 3457, col 111 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2289, col 38 to line 2289, col 101 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2289, col 70 to line 2289, col 100 of module ScenarioIII: 1606032
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2289, col 45 to line 2289, col 67 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3457, col 104 to line 3457, col 110 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3458, col 27 to line 3458, col 50 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3459, col 27 to line 3459, col 37 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3459, col 28 to line 3459, col 37 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2397, col 15 to line 2397, col 58 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2397, col 38 to line 2397, col 58 of module ScenarioIII: 484568
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2397, col 24 to line 2397, col 35 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3460, col 27 to line 3462, col 55 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3463, col 65 to line 3463, col 85 of module ScenarioIII: 394716
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3463, col 36 to line 3463, col 62 of module ScenarioIII: 394716
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2291, col 28 to line 2291, col 63 of module ScenarioIII: 394716:789432
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2291, col 49 to line 2291, col 62 of module ScenarioIII: 789432
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2291, col 35 to line 2291, col 46 of module ScenarioIII: 394716
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3463, col 55 to line 3463, col 61 of module ScenarioIII: 394716
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3464, col 27 to line 3464, col 53 of module ScenarioIII: 353186
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3469, col 38 to line 3469, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3470, col 38 to line 3470, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3472, col 29 to line 3472, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3477, col 38 to line 3479, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3480, col 38 to line 3480, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3481, col 38 to line 3481, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3482, col 38 to line 3482, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3483, col 38 to line 3483, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3485, col 49 to line 3485, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3486, col 49 to line 3488, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3489, col 49 to line 3489, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3491, col 49 to line 3493, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3494, col 38 to line 3494, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3499, col 49 to line 3499, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3501, col 60 to line 3501, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3502, col 60 to line 3504, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3505, col 60 to line 3505, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3507, col 60 to line 3509, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3510, col 49 to line 3510, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3515, col 60 to line 3515, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3519, col 71 to line 3519, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3520, col 71 to line 3523, col 199 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3524, col 71 to line 3524, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3526, col 71 to line 3528, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3529, col 60 to line 3529, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3534, col 71 to line 3534, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3535, col 71 to line 3535, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3536, col 71 to line 3536, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3537, col 71 to line 3539, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3540, col 71 to line 3540, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3543, col 71 to line 3547, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3548, col 38 to line 3551, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3552, col 27 to line 3552, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3553, col 27 to line 3589, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchResolveFailure line 3593, col 1 to line 3593, col 26 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3593, col 34 to line 3593, col 66 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3594, col 34 to line 3594, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3594, col 47 to line 3594, col 110 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3594, col 48 to line 3594, col 56 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3594, col 65 to line 3594, col 109 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3594, col 75 to line 3594, col 109 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2294, col 35 to line 2296, col 102 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2294, col 67 to line 2296, col 101 of module ScenarioIII: 1606032
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2294, col 42 to line 2294, col 64 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3594, col 102 to line 3594, col 108 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3595, col 34 to line 3595, col 66 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3600, col 36 to line 3600, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3605, col 45 to line 3607, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3608, col 45 to line 3608, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3609, col 45 to line 3609, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3610, col 45 to line 3610, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3611, col 45 to line 3611, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3613, col 56 to line 3613, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3614, col 56 to line 3617, col 198 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3618, col 56 to line 3618, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3620, col 56 to line 3622, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3623, col 45 to line 3623, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3628, col 56 to line 3628, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3629, col 56 to line 3629, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3631, col 67 to line 3631, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3632, col 67 to line 3634, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3635, col 67 to line 3635, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3636, col 67 to line 3639, col 209 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3640, col 56 to line 3640, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3645, col 67 to line 3645, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3647, col 78 to line 3647, col 168 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3648, col 78 to line 3651, col 220 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3652, col 78 to line 3652, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3654, col 78 to line 3656, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3661, col 78 to line 3661, col 147 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3665, col 89 to line 3665, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3666, col 89 to line 3669, col 231 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3670, col 89 to line 3670, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3672, col 89 to line 3674, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3677, col 78 to line 3680, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3681, col 56 to line 3681, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3682, col 45 to line 3685, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3686, col 34 to line 3686, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3687, col 34 to line 3732, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ghostProc line 3736, col 1 to line 3736, col 15 of module ScenarioIII>: 6539:6792
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3736, col 23 to line 3736, col 44 of module ScenarioIII: 408300
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3736, col 23 to line 3736, col 30 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3737, col 26 to line 3737, col 58 of module ScenarioIII: 408300
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3737, col 26 to line 3737, col 35 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3737, col 39 to line 3737, col 58 of module ScenarioIII: 401508
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3738, col 26 to line 3738, col 48 of module ScenarioIII: 20376
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3738, col 26 to line 3738, col 38 of module ScenarioIII: 13584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3738, col 42 to line 3738, col 48 of module ScenarioIII: 13584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3739, col 26 to line 3739, col 62 of module ScenarioIII: 13584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3739, col 26 to line 3739, col 39 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3739, col 43 to line 3739, col 62 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3740, col 23 to line 3753, col 70 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3754, col 23 to line 3756, col 114 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3757, col 23 to line 3757, col 56 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3758, col 23 to line 3758, col 61 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3759, col 23 to line 3795, col 67 of module ScenarioIII: 6792
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBEventHandling line 3799, col 1 to line 3799, col 22 of module ScenarioIII>: 2813:66170
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3799, col 30 to line 3799, col 58 of module ScenarioIII: 266924
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3799, col 30 to line 3799, col 37 of module ScenarioIII: 200754
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3800, col 30 to line 3800, col 80 of module ScenarioIII: 66170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3801, col 30 to line 3848, col 74 of module ScenarioIII: 66170
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBDequeueTransaction line 3850, col 1 to line 3850, col 27 of module ScenarioIII>: 3864:46832
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3850, col 35 to line 3850, col 68 of module ScenarioIII: 247581
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3850, col 35 to line 3850, col 42 of module ScenarioIII: 200749
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3851, col 38 to line 3851, col 53 of module ScenarioIII: 59628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3852, col 46 to line 3852, col 57 of module ScenarioIII: 104262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3852, col 46 to line 3852, col 50 of module ScenarioIII: 58529
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3852, col 54 to line 3852, col 57 of module ScenarioIII: 58529
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3853, col 46 to line 3853, col 98 of module ScenarioIII: 45733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3854, col 46 to line 3854, col 65 of module ScenarioIII: 45733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3855, col 46 to line 3855, col 96 of module ScenarioIII: 45733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3856, col 46 to line 3856, col 70 of module ScenarioIII: 45733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3857, col 46 to line 3857, col 68 of module ScenarioIII: 1099
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3858, col 46 to line 3858, col 92 of module ScenarioIII: 1099
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3859, col 46 to line 3859, col 77 of module ScenarioIII: 1099
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3860, col 35 to line 3914, col 79 of module ScenarioIII: 46832
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBProcessTransaction line 3916, col 1 to line 3916, col 27 of module ScenarioIII>: 3468:35010
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3916, col 35 to line 3916, col 68 of module ScenarioIII: 235755
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3916, col 35 to line 3916, col 42 of module ScenarioIII: 200745
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3917, col 38 to line 3917, col 53 of module ScenarioIII: 35010
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3918, col 50 to line 3918, col 83 of module ScenarioIII: 34439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3923, col 57 to line 3923, col 166 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3926, col 57 to line 3926, col 160 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3927, col 57 to line 3934, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3935, col 61 to line 3935, col 95 of module ScenarioIII: 34439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3938, col 68 to line 3938, col 129 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3943, col 68 to line 3943, col 177 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3944, col 68 to line 3947, col 153 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3948, col 68 to line 3948, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3949, col 68 to line 3954, col 90 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3955, col 72 to line 3955, col 117 of module ScenarioIII: 34439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3956, col 79 to line 3957, col 171 of module ScenarioIII: 7243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3958, col 79 to line 3958, col 140 of module ScenarioIII: 7243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3959, col 79 to line 3962, col 164 of module ScenarioIII: 7243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3963, col 79 to line 3963, col 137 of module ScenarioIII: 7243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3964, col 79 to line 3970, col 101 of module ScenarioIII: 7243
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3971, col 83 to line 3971, col 123 of module ScenarioIII: 27196
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3972, col 90 to line 3975, col 175 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3976, col 90 to line 3976, col 147 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3977, col 90 to line 3984, col 112 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3985, col 94 to line 3985, col 134 of module ScenarioIII: 27193
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3986, col 101 to line 3989, col 186 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3990, col 101 to line 3990, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3991, col 101 to line 3998, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3999, col 105 to line 3999, col 150 of module ScenarioIII: 27193
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4004, col 112 to line 4004, col 221 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4005, col 112 to line 4013, col 134 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4014, col 116 to line 4014, col 148 of module ScenarioIII: 27193
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4015, col 123 to line 4016, col 217 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4017, col 123 to line 4017, col 190 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4018, col 126 to line 4018, col 188 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4019, col 134 to line 4019, col 227 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4020, col 134 to line 4020, col 191 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4020, col 148 to line 4020, col 191 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2206, col 30 to line 2207, col 76 of module ScenarioIII: 4138:202
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4020, col 162 to line 4020, col 171 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4020, col 174 to line 4020, col 190 of module ScenarioIII: 28
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4022, col 134 to line 4023, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4024, col 123 to line 4029, col 145 of module ScenarioIII: 4138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4030, col 127 to line 4030, col 173 of module ScenarioIII: 23055
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4031, col 134 to line 4032, col 228 of module ScenarioIII: 9016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4033, col 134 to line 4034, col 228 of module ScenarioIII: 9016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4035, col 134 to line 4035, col 223 of module ScenarioIII: 9016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4036, col 134 to line 4039, col 219 of module ScenarioIII: 9016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4040, col 134 to line 4040, col 191 of module ScenarioIII: 9016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4041, col 134 to line 4044, col 156 of module ScenarioIII: 9016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4045, col 138 to line 4045, col 183 of module ScenarioIII: 14039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4050, col 145 to line 4050, col 248 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4051, col 145 to line 4056, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4057, col 149 to line 4057, col 184 of module ScenarioIII: 14039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4058, col 156 to line 4059, col 250 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4060, col 156 to line 4061, col 250 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4062, col 156 to line 4063, col 250 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4064, col 156 to line 4064, col 270 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4065, col 156 to line 4066, col 250 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4067, col 156 to line 4067, col 241 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4068, col 156 to line 4071, col 184 of module ScenarioIII: 9476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4072, col 160 to line 4072, col 198 of module ScenarioIII: 4563
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4073, col 164 to line 4085, col 224 of module ScenarioIII: 4563
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4087, col 167 to line 4090, col 195 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4091, col 156 to line 4092, col 178 of module ScenarioIII: 4563
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4093, col 145 to line 4093, col 169 of module ScenarioIII: 14039
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4094, col 123 to line 4095, col 147 of module ScenarioIII: 23055
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4096, col 112 to line 4096, col 139 of module ScenarioIII: 27193
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4097, col 46 to line 4097, col 91 of module ScenarioIII: 34439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4098, col 46 to line 4098, col 70 of module ScenarioIII: 34439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4099, col 46 to line 4099, col 68 of module ScenarioIII: 571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4100, col 46 to line 4100, col 92 of module ScenarioIII: 571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4101, col 46 to line 4108, col 68 of module ScenarioIII: 571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4109, col 35 to line 4158, col 79 of module ScenarioIII: 35010
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBSendBackIfAny line 4160, col 1 to line 4160, col 22 of module ScenarioIII>: 3161:30814
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4160, col 30 to line 4160, col 58 of module ScenarioIII: 231556
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4160, col 30 to line 4160, col 37 of module ScenarioIII: 200742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4161, col 33 to line 4161, col 48 of module ScenarioIII: 30814
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4162, col 44 to line 4162, col 73 of module ScenarioIII: 30246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4163, col 55 to line 4163, col 72 of module ScenarioIII: 11772
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2349, col 15 to line 2350, col 81 of module ScenarioIII: 11772
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2349, col 15 to line 2349, col 71 of module ScenarioIII: 11772
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2350, col 16 to line 2350, col 81 of module ScenarioIII: 11438
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4164, col 60 to line 4164, col 111 of module ScenarioIII: 11438
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4165, col 63 to line 4165, col 66 of module ScenarioIII: 334
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4166, col 63 to line 4166, col 78 of module ScenarioIII: 334
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4167, col 52 to line 4167, col 68 of module ScenarioIII: 11772
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4168, col 55 to line 4168, col 85 of module ScenarioIII: 18474
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4169, col 60 to line 4169, col 113 of module ScenarioIII: 6173
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4170, col 63 to line 4170, col 66 of module ScenarioIII: 12301
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4171, col 63 to line 4171, col 79 of module ScenarioIII: 12301
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4172, col 52 to line 4172, col 67 of module ScenarioIII: 18474
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4173, col 41 to line 4173, col 92 of module ScenarioIII: 30246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4174, col 41 to line 4174, col 86 of module ScenarioIII: 30246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4175, col 41 to line 4175, col 65 of module ScenarioIII: 30246
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4176, col 41 to line 4176, col 63 of module ScenarioIII: 568
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4177, col 41 to line 4177, col 87 of module ScenarioIII: 568
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4178, col 41 to line 4179, col 69 of module ScenarioIII: 568
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4180, col 30 to line 4226, col 74 of module ScenarioIII: 30814
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBReconciliation line 4228, col 1 to line 4228, col 23 of module ScenarioIII>: 173:679
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4228, col 31 to line 4228, col 60 of module ScenarioIII: 201418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4228, col 31 to line 4228, col 38 of module ScenarioIII: 200739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4229, col 31 to line 4229, col 124 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4229, col 62 to line 4229, col 124 of module ScenarioIII: 2264
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4230, col 31 to line 4230, col 86 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4231, col 31 to line 4231, col 44 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4232, col 31 to line 4232, col 45 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4233, col 31 to line 4233, col 43 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4234, col 31 to line 4234, col 82 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4235, col 31 to line 4235, col 48 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4236, col 31 to line 4236, col 47 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4237, col 31 to line 4237, col 78 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4238, col 31 to line 4284, col 75 of module ScenarioIII: 679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBFailoverReadOFC line 4286, col 1 to line 4286, col 24 of module ScenarioIII>: 225:647
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4286, col 32 to line 4286, col 62 of module ScenarioIII: 201385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4286, col 32 to line 4286, col 39 of module ScenarioIII: 200738
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4287, col 32 to line 4287, col 54 of module ScenarioIII: 647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4288, col 32 to line 4288, col 74 of module ScenarioIII: 647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4289, col 32 to line 4289, col 55 of module ScenarioIII: 647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4290, col 32 to line 4290, col 48 of module ScenarioIII: 647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4291, col 32 to line 4291, col 78 of module ScenarioIII: 647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4292, col 32 to line 4340, col 76 of module ScenarioIII: 647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBFailoverReadRC line 4342, col 1 to line 4342, col 23 of module ScenarioIII>: 319:2681
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4342, col 31 to line 4342, col 60 of module ScenarioIII: 203418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4342, col 31 to line 4342, col 38 of module ScenarioIII: 200737
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4343, col 31 to line 4343, col 38 of module ScenarioIII: 2681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4344, col 31 to line 4344, col 66 of module ScenarioIII: 2681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4345, col 31 to line 4345, col 83 of module ScenarioIII: 2681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4346, col 31 to line 4394, col 75 of module ScenarioIII: 2681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ChangeNIBStatusToNormal line 4396, col 1 to line 4396, col 29 of module ScenarioIII>: 268:2804
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4396, col 37 to line 4396, col 72 of module ScenarioIII: 203540
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4396, col 37 to line 4396, col 44 of module ScenarioIII: 200736
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4397, col 37 to line 4397, col 123 of module ScenarioIII: 2804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4398, col 37 to line 4401, col 122 of module ScenarioIII: 2804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4402, col 37 to line 4402, col 86 of module ScenarioIII: 2804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4403, col 37 to line 4403, col 88 of module ScenarioIII: 2804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4404, col 37 to line 4404, col 82 of module ScenarioIII: 2804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4405, col 37 to line 4464, col 81 of module ScenarioIII: 2804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCFailure line 4475, col 1 to line 4475, col 15 of module ScenarioIII>: 430:1108
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4475, col 23 to line 4475, col 44 of module ScenarioIII: 201843
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4475, col 23 to line 4475, col 30 of module ScenarioIII: 200735
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4476, col 23 to line 4476, col 59 of module ScenarioIII: 2242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4476, col 23 to line 4476, col 36 of module ScenarioIII: 1134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4476, col 40 to line 4476, col 59 of module ScenarioIII: 1134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4477, col 23 to line 4477, col 55 of module ScenarioIII: 2242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4477, col 23 to line 4477, col 32 of module ScenarioIII: 1134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4477, col 36 to line 4477, col 55 of module ScenarioIII: 1134
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4478, col 23 to line 4480, col 128 of module ScenarioIII: 1108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4481, col 23 to line 4481, col 56 of module ScenarioIII: 1108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4482, col 23 to line 4517, col 67 of module ScenarioIII: 1108
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCFailoverResetStates line 4521, col 1 to line 4521, col 27 of module ScenarioIII>: 351:1023
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4521, col 35 to line 4521, col 68 of module ScenarioIII: 201757
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4521, col 35 to line 4521, col 42 of module ScenarioIII: 200734
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4522, col 35 to line 4522, col 71 of module ScenarioIII: 8155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4522, col 35 to line 4522, col 48 of module ScenarioIII: 7132
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4522, col 52 to line 4522, col 71 of module ScenarioIII: 7132
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4523, col 35 to line 4523, col 67 of module ScenarioIII: 8155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4523, col 35 to line 4523, col 44 of module ScenarioIII: 7132
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4523, col 48 to line 4523, col 67 of module ScenarioIII: 7132
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4524, col 35 to line 4524, col 88 of module ScenarioIII: 7989
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4524, col 35 to line 4524, col 79 of module ScenarioIII: 6966
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4524, col 83 to line 4524, col 88 of module ScenarioIII: 6966
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4525, col 37 to line 4525, col 99 of module ScenarioIII: 6882
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4525, col 37 to line 4525, col 90 of module ScenarioIII: 5859
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4525, col 94 to line 4525, col 99 of module ScenarioIII: 5859
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4526, col 35 to line 4527, col 149 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4526, col 66 to line 4527, col 149 of module ScenarioIII: 5859
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4528, col 35 to line 4528, col 109 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4529, col 35 to line 4529, col 48 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4530, col 35 to line 4530, col 72 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4531, col 35 to line 4531, col 51 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4532, col 35 to line 4532, col 51 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4533, col 35 to line 4533, col 73 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4534, col 35 to line 4587, col 79 of module ScenarioIII: 1023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCReadNIB line 4589, col 1 to line 4589, col 15 of module ScenarioIII>: 172:363
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4589, col 23 to line 4589, col 44 of module ScenarioIII: 201096
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4589, col 23 to line 4589, col 30 of module ScenarioIII: 200733
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4590, col 23 to line 4590, col 86 of module ScenarioIII: 1378
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4590, col 23 to line 4590, col 77 of module ScenarioIII: 1015
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4590, col 81 to line 4590, col 86 of module ScenarioIII: 1015
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4591, col 23 to line 4591, col 31 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4592, col 23 to line 4592, col 44 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4593, col 23 to line 4593, col 64 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4594, col 23 to line 4594, col 45 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4595, col 23 to line 4595, col 38 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4596, col 23 to line 4596, col 65 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4597, col 23 to line 4632, col 67 of module ScenarioIII: 363
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCBack2Normal line 4634, col 1 to line 4634, col 19 of module ScenarioIII>: 543:4842
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4634, col 27 to line 4634, col 52 of module ScenarioIII: 205574
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4634, col 27 to line 4634, col 34 of module ScenarioIII: 200732
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4635, col 27 to line 4636, col 134 of module ScenarioIII: 4842
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4637, col 27 to line 4637, col 48 of module ScenarioIII: 4842
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4638, col 27 to line 4638, col 60 of module ScenarioIII: 4842
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4639, col 27 to line 4681, col 71 of module ScenarioIII: 4842
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHanderProc line 4686, col 1 to line 4686, col 26 of module ScenarioIII>: 1624:57444
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4686, col 34 to line 4686, col 66 of module ScenarioIII: 258175
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4686, col 34 to line 4686, col 41 of module ScenarioIII: 200731
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4687, col 34 to line 4687, col 70 of module ScenarioIII: 195159
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4687, col 34 to line 4687, col 47 of module ScenarioIII: 137715
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4687, col 51 to line 4687, col 70 of module ScenarioIII: 137715
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4688, col 34 to line 4688, col 66 of module ScenarioIII: 195159
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4688, col 34 to line 4688, col 43 of module ScenarioIII: 137715
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4688, col 47 to line 4688, col 66 of module ScenarioIII: 137715
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4689, col 37 to line 4689, col 52 of module ScenarioIII: 132731
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2347, col 19 to line 2348, col 78 of module ScenarioIII: 132731
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2347, col 19 to line 2347, col 72 of module ScenarioIII: 132731
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2348, col 16 to line 2348, col 78 of module ScenarioIII: 2615
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4690, col 45 to line 4690, col 81 of module ScenarioIII: 2615
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4691, col 45 to line 4691, col 99 of module ScenarioIII: 2615
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4692, col 45 to line 4697, col 72 of module ScenarioIII: 2615
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4698, col 45 to line 4698, col 57 of module ScenarioIII: 184945
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4698, col 45 to line 4698, col 50 of module ScenarioIII: 130116
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4698, col 54 to line 4698, col 57 of module ScenarioIII: 130116
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4699, col 45 to line 4699, col 94 of module ScenarioIII: 54829
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4700, col 45 to line 4700, col 66 of module ScenarioIII: 54829
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4701, col 48 to line 4701, col 72 of module ScenarioIII: 54829
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4702, col 56 to line 4702, col 101 of module ScenarioIII: 45233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4703, col 56 to line 4703, col 99 of module ScenarioIII: 45233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4704, col 56 to line 4704, col 121 of module ScenarioIII: 45233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4705, col 56 to line 4705, col 77 of module ScenarioIII: 45233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4706, col 56 to line 4706, col 108 of module ScenarioIII: 45233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4707, col 56 to line 4707, col 82 of module ScenarioIII: 45233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4708, col 61 to line 4709, col 126 of module ScenarioIII: 9596
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4708, col 61 to line 4708, col 105 of module ScenarioIII: 9596
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4709, col 62 to line 4709, col 126 of module ScenarioIII: 1091
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4710, col 64 to line 4717, col 88 of module ScenarioIII: 8505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4718, col 67 to line 4718, col 70 of module ScenarioIII: 1091
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4719, col 67 to line 4723, col 99 of module ScenarioIII: 1091
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4724, col 56 to line 4724, col 77 of module ScenarioIII: 9596
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4725, col 45 to line 4725, col 94 of module ScenarioIII: 54829
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4726, col 45 to line 4726, col 83 of module ScenarioIII: 54829
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4727, col 34 to line 4775, col 78 of module ScenarioIII: 57444
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHandlerFailover line 4777, col 1 to line 4777, col 31 of module ScenarioIII>: 537:52226
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4777, col 39 to line 4777, col 76 of module ScenarioIII: 252954
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4777, col 39 to line 4777, col 46 of module ScenarioIII: 200728
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4778, col 39 to line 4778, col 75 of module ScenarioIII: 115242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4778, col 39 to line 4778, col 52 of module ScenarioIII: 63016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4778, col 56 to line 4778, col 75 of module ScenarioIII: 63016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4779, col 39 to line 4779, col 71 of module ScenarioIII: 115242
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4779, col 39 to line 4779, col 48 of module ScenarioIII: 63016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4779, col 52 to line 4779, col 71 of module ScenarioIII: 63016
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4780, col 39 to line 4780, col 95 of module ScenarioIII: 113434
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4780, col 39 to line 4780, col 83 of module ScenarioIII: 61208
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4780, col 87 to line 4780, col 95 of module ScenarioIII: 61208
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4781, col 45 to line 4781, col 110 of module ScenarioIII: 104452
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4781, col 45 to line 4781, col 98 of module ScenarioIII: 52226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4781, col 102 to line 4781, col 110 of module ScenarioIII: 52226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4782, col 39 to line 4782, col 90 of module ScenarioIII: 52226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4783, col 39 to line 4783, col 88 of module ScenarioIII: 52226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4784, col 39 to line 4850, col 65 of module ScenarioIII: 52226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendReadTransaction line 4855, col 1 to line 4855, col 27 of module ScenarioIII>: 8:9
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4855, col 35 to line 4855, col 68 of module ScenarioIII: 200736
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4855, col 35 to line 4855, col 42 of module ScenarioIII: 200727
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4856, col 35 to line 4856, col 71 of module ScenarioIII: 18
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4856, col 35 to line 4856, col 48 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4856, col 52 to line 4856, col 71 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4857, col 35 to line 4857, col 67 of module ScenarioIII: 18
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4857, col 35 to line 4857, col 44 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4857, col 48 to line 4857, col 67 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4858, col 38 to line 4858, col 53 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2347, col 19 to line 2348, col 78 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2347, col 19 to line 2347, col 72 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2348, col 16 to line 2348, col 78 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4859, col 46 to line 4859, col 76 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4860, col 46 to line 4860, col 94 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4861, col 46 to line 4861, col 80 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2327, col 22 to line 2327, col 70 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 22 to line 2327, col 58 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 62 to line 2327, col 70 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4862, col 54 to line 4862, col 64 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4863, col 46 to line 4863, col 122 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4864, col 46 to line 4864, col 86 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4865, col 46 to line 4865, col 88 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4866, col 46 to line 4866, col 78 of module ScenarioIII: 3
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4867, col 35 to line 4920, col 79 of module ScenarioIII: 9
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SequencerProc line 4922, col 1 to line 4922, col 19 of module ScenarioIII>: 8790:68480
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4922, col 27 to line 4922, col 52 of module ScenarioIII: 269206
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4922, col 27 to line 4922, col 34 of module ScenarioIII: 200726
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4923, col 27 to line 4923, col 63 of module ScenarioIII: 139506
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4923, col 27 to line 4923, col 40 of module ScenarioIII: 71026
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4923, col 44 to line 4923, col 63 of module ScenarioIII: 71026
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4924, col 27 to line 4924, col 59 of module ScenarioIII: 139506
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4924, col 27 to line 4924, col 36 of module ScenarioIII: 71026
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4924, col 40 to line 4924, col 59 of module ScenarioIII: 71026
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2308, col 42 to line 2308, col 59 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2308, col 64 to line 2308, col 90 of module ScenarioIII: 136960
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2308, col 64 to line 2308, col 78 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4925, col 46 to line 4925, col 52 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4926, col 30 to line 4926, col 45 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2347, col 19 to line 2348, col 78 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2347, col 19 to line 2347, col 72 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2348, col 16 to line 2348, col 78 of module ScenarioIII: 1439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4927, col 35 to line 4928, col 86 of module ScenarioIII: 1439
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4929, col 38 to line 4929, col 91 of module ScenarioIII: 67041
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4930, col 38 to line 4930, col 70 of module ScenarioIII: 67041
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4931, col 27 to line 4973, col 71 of module ScenarioIII: 68480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCComputeNextIR2Schedule line 4975, col 1 to line 4975, col 30 of module ScenarioIII>: 2992:30278
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4975, col 38 to line 4975, col 74 of module ScenarioIII: 231001
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4975, col 38 to line 4975, col 45 of module ScenarioIII: 200723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4976, col 38 to line 4976, col 74 of module ScenarioIII: 106663
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4976, col 38 to line 4976, col 51 of module ScenarioIII: 76385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4976, col 55 to line 4976, col 74 of module ScenarioIII: 76385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4977, col 38 to line 4977, col 70 of module ScenarioIII: 106663
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4977, col 38 to line 4977, col 47 of module ScenarioIII: 76385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4977, col 51 to line 4977, col 70 of module ScenarioIII: 76385
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4978, col 41 to line 4978, col 56 of module ScenarioIII: 73437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2347, col 19 to line 2348, col 78 of module ScenarioIII: 73437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2347, col 19 to line 2347, col 72 of module ScenarioIII: 73437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2348, col 16 to line 2348, col 78 of module ScenarioIII: 1707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4979, col 49 to line 4979, col 79 of module ScenarioIII: 1707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4980, col 49 to line 4980, col 97 of module ScenarioIII: 1707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4981, col 49 to line 4982, col 80 of module ScenarioIII: 1707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4983, col 49 to line 4983, col 62 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4984, col 49 to line 4984, col 142 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4984, col 69 to line 4984, col 142 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4984, col 70 to line 4984, col 85 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4984, col 94 to line 4984, col 141 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4984, col 104 to line 4984, col 141 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2340, col 40 to line 2343, col 98 of module ScenarioIII: 28571:19338
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2340, col 61 to line 2343, col 97 of module ScenarioIII: 57142
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2340, col 61 to line 2342, col 100 of module ScenarioIII: 57142
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2340, col 61 to line 2341, col 87 of module ScenarioIII: 57142
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2340, col 61 to line 2340, col 86 of module ScenarioIII: 57142
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2341, col 62 to line 2341, col 87 of module ScenarioIII: 48189
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2333, col 32 to line 2334, col 79 of module ScenarioIII: 48189
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||line 2333, col 33 to line 2334, col 79 of module ScenarioIII: 48189
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2333, col 56 to line 2334, col 79 of module ScenarioIII: 72138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2333, col 56 to line 2333, col 87 of module ScenarioIII: 72138
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||||||line 2334, col 57 to line 2334, col 79 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||||line 2333, col 42 to line 2333, col 53 of module ScenarioIII: 48189
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||||line 2341, col 86 to line 2341, col 86 of module ScenarioIII: 48189
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2342, col 62 to line 2342, col 100 of module ScenarioIII: 23949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2343, col 62 to line 2343, col 97 of module ScenarioIII: 23949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2340, col 47 to line 2340, col 58 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4985, col 49 to line 4985, col 71 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4986, col 52 to line 4986, col 79 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4987, col 57 to line 4987, col 113 of module ScenarioIII: 19596
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4988, col 57 to line 4988, col 107 of module ScenarioIII: 8975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4989, col 49 to line 4989, col 81 of module ScenarioIII: 28571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4990, col 38 to line 5051, col 64 of module ScenarioIII: 30278
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SchedulerMechanism line 5053, col 1 to line 5053, col 24 of module ScenarioIII>: 1031:10931
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5053, col 32 to line 5053, col 62 of module ScenarioIII: 211652
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5053, col 32 to line 5053, col 39 of module ScenarioIII: 200721
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5054, col 32 to line 5054, col 68 of module ScenarioIII: 22146
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5054, col 32 to line 5054, col 45 of module ScenarioIII: 11215
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5054, col 49 to line 5054, col 68 of module ScenarioIII: 11215
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5055, col 32 to line 5055, col 64 of module ScenarioIII: 22146
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5055, col 32 to line 5055, col 41 of module ScenarioIII: 11215
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5055, col 45 to line 5055, col 64 of module ScenarioIII: 11215
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5056, col 35 to line 5056, col 50 of module ScenarioIII: 10931
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2347, col 19 to line 2348, col 78 of module ScenarioIII: 10931
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2347, col 19 to line 2347, col 72 of module ScenarioIII: 10931
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2348, col 16 to line 2348, col 78 of module ScenarioIII: 78
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5057, col 43 to line 5057, col 73 of module ScenarioIII: 78
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5058, col 43 to line 5058, col 91 of module ScenarioIII: 78
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5059, col 43 to line 5062, col 64 of module ScenarioIII: 78
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5063, col 43 to line 5063, col 119 of module ScenarioIII: 10853
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5064, col 43 to line 5064, col 176 of module ScenarioIII: 10853
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5065, col 43 to line 5065, col 136 of module ScenarioIII: 10853
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5066, col 43 to line 5066, col 112 of module ScenarioIII: 10853
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5067, col 43 to line 5067, col 91 of module ScenarioIII: 10853
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5068, col 43 to line 5068, col 75 of module ScenarioIII: 10853
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5069, col 32 to line 5116, col 76 of module ScenarioIII: 10931
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendPrepareIR2NIB line 5118, col 1 to line 5118, col 25 of module ScenarioIII>: 6491:17600
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5118, col 33 to line 5118, col 64 of module ScenarioIII: 218320
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5118, col 33 to line 5118, col 40 of module ScenarioIII: 200720
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5119, col 33 to line 5119, col 69 of module ScenarioIII: 36426
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5119, col 33 to line 5119, col 46 of module ScenarioIII: 18826
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5119, col 50 to line 5119, col 69 of module ScenarioIII: 18826
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5120, col 33 to line 5120, col 65 of module ScenarioIII: 36426
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5120, col 33 to line 5120, col 42 of module ScenarioIII: 18826
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5120, col 46 to line 5120, col 65 of module ScenarioIII: 18826
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5121, col 36 to line 5121, col 51 of module ScenarioIII: 18282
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2347, col 19 to line 2348, col 78 of module ScenarioIII: 18282
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2347, col 19 to line 2347, col 72 of module ScenarioIII: 18282
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2348, col 16 to line 2348, col 78 of module ScenarioIII: 77
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5122, col 44 to line 5122, col 74 of module ScenarioIII: 77
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5123, col 44 to line 5123, col 92 of module ScenarioIII: 77
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5124, col 44 to line 5125, col 71 of module ScenarioIII: 77
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2327, col 22 to line 2327, col 70 of module ScenarioIII: 35728
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 22 to line 2327, col 58 of module ScenarioIII: 18205
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 62 to line 2327, col 70 of module ScenarioIII: 18205
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5126, col 52 to line 5126, col 62 of module ScenarioIII: 18205
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5127, col 44 to line 5127, col 163 of module ScenarioIII: 17523
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5128, col 44 to line 5128, col 150 of module ScenarioIII: 17523
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5129, col 44 to line 5129, col 84 of module ScenarioIII: 17523
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5130, col 47 to line 5130, col 73 of module ScenarioIII: 17523
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5131, col 52 to line 5131, col 97 of module ScenarioIII: 17523
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5132, col 55 to line 5132, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5133, col 44 to line 5133, col 76 of module ScenarioIII: 17523
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5134, col 33 to line 5183, col 77 of module ScenarioIII: 17600
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqStateReconciliation line 5185, col 1 to line 5185, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5185, col 46 to line 5185, col 90 of module ScenarioIII: 200719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5191, col 46 to line 5191, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5193, col 57 to line 5193, col 227 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5195, col 57 to line 5195, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5196, col 46 to line 5196, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5197, col 46 to line 5283, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSequencerFailover line 5285, col 1 to line 5285, col 25 of module ScenarioIII>: 1259:14507
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5285, col 33 to line 5285, col 64 of module ScenarioIII: 215226
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5285, col 33 to line 5285, col 40 of module ScenarioIII: 200719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5286, col 33 to line 5286, col 69 of module ScenarioIII: 37773
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5286, col 33 to line 5286, col 46 of module ScenarioIII: 23266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5286, col 50 to line 5286, col 69 of module ScenarioIII: 23266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5287, col 33 to line 5287, col 65 of module ScenarioIII: 37773
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5287, col 33 to line 5287, col 42 of module ScenarioIII: 23266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5287, col 46 to line 5287, col 65 of module ScenarioIII: 23266
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5288, col 33 to line 5288, col 90 of module ScenarioIII: 14507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5288, col 53 to line 5288, col 90 of module ScenarioIII: 22796
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5289, col 33 to line 5289, col 89 of module ScenarioIII: 37303
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5289, col 33 to line 5289, col 77 of module ScenarioIII: 22796
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5289, col 81 to line 5289, col 89 of module ScenarioIII: 22796
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5290, col 39 to line 5290, col 104 of module ScenarioIII: 29014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5290, col 39 to line 5290, col 92 of module ScenarioIII: 14507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5290, col 96 to line 5290, col 104 of module ScenarioIII: 14507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5291, col 33 to line 5291, col 75 of module ScenarioIII: 14507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5292, col 33 to line 5342, col 77 of module ScenarioIII: 14507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCNIBEventHanderProc line 5352, col 1 to line 5352, col 27 of module ScenarioIII>: 20555:82690
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5352, col 35 to line 5352, col 68 of module ScenarioIII: 283408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5352, col 35 to line 5352, col 42 of module ScenarioIII: 200718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5353, col 35 to line 5353, col 71 of module ScenarioIII: 283408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5353, col 35 to line 5353, col 48 of module ScenarioIII: 200718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5353, col 52 to line 5353, col 71 of module ScenarioIII: 200718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5354, col 35 to line 5354, col 67 of module ScenarioIII: 283408
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5354, col 35 to line 5354, col 44 of module ScenarioIII: 200718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5354, col 48 to line 5354, col 67 of module ScenarioIII: 200718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5355, col 35 to line 5355, col 48 of module ScenarioIII: 276616
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5355, col 35 to line 5355, col 41 of module ScenarioIII: 193926
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5355, col 45 to line 5355, col 48 of module ScenarioIII: 193926
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5356, col 35 to line 5356, col 87 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5357, col 35 to line 5357, col 58 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5358, col 35 to line 5358, col 121 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5358, col 49 to line 5358, col 121 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5358, col 50 to line 5358, col 59 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5358, col 68 to line 5358, col 120 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5358, col 78 to line 5358, col 120 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5358, col 79 to line 5358, col 94 of module ScenarioIII: 46622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5358, col 103 to line 5358, col 119 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5359, col 35 to line 5359, col 161 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5359, col 47 to line 5359, col 161 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5359, col 48 to line 5359, col 55 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5359, col 64 to line 5359, col 160 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5359, col 74 to line 5359, col 160 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5359, col 75 to line 5359, col 112 of module ScenarioIII: 85306
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5359, col 121 to line 5359, col 159 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5360, col 38 to line 5360, col 72 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5361, col 43 to line 5363, col 100 of module ScenarioIII: 31825
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5364, col 46 to line 5364, col 49 of module ScenarioIII: 50865
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5365, col 46 to line 5365, col 65 of module ScenarioIII: 50865
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5366, col 35 to line 5366, col 85 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5367, col 35 to line 5419, col 79 of module ScenarioIII: 82690
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThread line 5423, col 1 to line 5423, col 22 of module ScenarioIII>: 484:507
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5423, col 30 to line 5423, col 58 of module ScenarioIII: 201223
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5423, col 30 to line 5423, col 37 of module ScenarioIII: 200716
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2308, col 42 to line 2308, col 90 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2309, col 42 to line 2309, col 60 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2309, col 65 to line 2309, col 92 of module ScenarioIII: 100014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2309, col 65 to line 2309, col 80 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5424, col 49 to line 5424, col 55 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2307, col 25 to line 2307, col 73 of module ScenarioIII: 100014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2307, col 25 to line 2307, col 61 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2307, col 65 to line 2307, col 73 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5425, col 41 to line 5425, col 44 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2360, col 83 to line 2360, col 98 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2360, col 64 to line 2360, col 80 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2205, col 18 to line 2205, col 43 of module ScenarioIII: 99507:100014
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2205, col 19 to line 2205, col 24 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2205, col 33 to line 2205, col 42 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2360, col 73 to line 2360, col 79 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2361, col 77 to line 2361, col 90 of module ScenarioIII: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2361, col 77 to line 2361, col 81 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2361, col 85 to line 2361, col 90 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2361, col 58 to line 2361, col 74 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2205, col 18 to line 2205, col 43 of module ScenarioIII: 99507:100014
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2205, col 19 to line 2205, col 24 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2205, col 33 to line 2205, col 42 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2361, col 67 to line 2361, col 73 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 41 to line 2316, col 85 of module ScenarioIII: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 42 to line 2316, col 85 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2362, col 67 to line 2362, col 74 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2362, col 77 to line 2362, col 83 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2363, col 49 to line 2363, col 148 of module ScenarioIII: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2363, col 49 to line 2363, col 80 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2363, col 84 to line 2363, col 148 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5426, col 54 to line 5426, col 60 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5426, col 63 to line 5426, col 66 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5426, col 69 to line 5426, col 78 of module ScenarioIII: 99507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5427, col 30 to line 5427, col 66 of module ScenarioIII: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5427, col 30 to line 5427, col 43 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5427, col 47 to line 5427, col 66 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5428, col 30 to line 5428, col 62 of module ScenarioIII: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5428, col 30 to line 5428, col 39 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5428, col 43 to line 5428, col 62 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5429, col 30 to line 5429, col 77 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5430, col 30 to line 5477, col 74 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCThreadGetNextIR line 5479, col 1 to line 5479, col 24 of module ScenarioIII>: 450:460
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5479, col 32 to line 5479, col 62 of module ScenarioIII: 201175
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5479, col 32 to line 5479, col 39 of module ScenarioIII: 200715
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5480, col 32 to line 5480, col 68 of module ScenarioIII: 920
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5480, col 32 to line 5480, col 45 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5480, col 49 to line 5480, col 68 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5481, col 32 to line 5481, col 64 of module ScenarioIII: 920
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5481, col 32 to line 5481, col 41 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5481, col 45 to line 5481, col 64 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5482, col 32 to line 5482, col 50 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5483, col 32 to line 5483, col 110 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5484, col 32 to line 5484, col 109 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5485, col 32 to line 5485, col 94 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5486, col 32 to line 5486, col 82 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5487, col 32 to line 5536, col 76 of module ScenarioIII: 460
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCUpdateIRQueueIRTag line 5538, col 1 to line 5538, col 27 of module ScenarioIII>: 729:739
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5538, col 35 to line 5538, col 68 of module ScenarioIII: 201453
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5538, col 35 to line 5538, col 42 of module ScenarioIII: 200714
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5539, col 35 to line 5539, col 71 of module ScenarioIII: 1551
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5539, col 35 to line 5539, col 48 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5539, col 52 to line 5539, col 71 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5540, col 35 to line 5540, col 67 of module ScenarioIII: 1551
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5540, col 35 to line 5540, col 44 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5540, col 48 to line 5540, col 67 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2327, col 22 to line 2327, col 70 of module ScenarioIII: 1551
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 22 to line 2327, col 58 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 62 to line 2327, col 70 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5541, col 43 to line 5541, col 53 of module ScenarioIII: 812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5542, col 35 to line 5542, col 133 of module ScenarioIII: 739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5543, col 35 to line 5543, col 132 of module ScenarioIII: 739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5544, col 35 to line 5544, col 76 of module ScenarioIII: 739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5545, col 35 to line 5545, col 84 of module ScenarioIII: 739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5546, col 35 to line 5600, col 79 of module ScenarioIII: 739
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCStartSchedulingIR line 5602, col 1 to line 5602, col 26 of module ScenarioIII>: 2787:3066
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5602, col 34 to line 5602, col 66 of module ScenarioIII: 203779
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5602, col 34 to line 5602, col 41 of module ScenarioIII: 200713
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5603, col 34 to line 5603, col 70 of module ScenarioIII: 6132
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5603, col 34 to line 5603, col 47 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5603, col 51 to line 5603, col 70 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5604, col 34 to line 5604, col 66 of module ScenarioIII: 6132
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5604, col 34 to line 5604, col 43 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5604, col 47 to line 5604, col 66 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5605, col 38 to line 5605, col 109 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5607, col 47 to line 5607, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5608, col 42 to line 5608, col 101 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5609, col 38 to line 5609, col 64 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5610, col 45 to line 5610, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5611, col 45 to line 5611, col 162 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5612, col 45 to line 5612, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5613, col 45 to line 5613, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5614, col 49 to line 5614, col 75 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5615, col 56 to line 5615, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5616, col 56 to line 5616, col 173 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5617, col 56 to line 5617, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5618, col 56 to line 5618, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5619, col 59 to line 5619, col 109 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5620, col 64 to line 5621, col 118 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5622, col 67 to line 5622, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5623, col 67 to line 5623, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5624, col 56 to line 5625, col 98 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5626, col 34 to line 5676, col 78 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadRemoveQueue1 line 5678, col 1 to line 5678, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5678, col 42 to line 5678, col 82 of module ScenarioIII: 200712
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5681, col 42 to line 5681, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5682, col 42 to line 5682, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5684, col 42 to line 5684, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5685, col 42 to line 5685, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5686, col 42 to line 5686, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5687, col 42 to line 5687, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5688, col 42 to line 5757, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadSendIR line 5759, col 1 to line 5759, col 28 of module ScenarioIII>: 2854:2925
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5759, col 36 to line 5759, col 70 of module ScenarioIII: 203637
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5759, col 36 to line 5759, col 43 of module ScenarioIII: 200712
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5760, col 36 to line 5760, col 72 of module ScenarioIII: 5991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5760, col 36 to line 5760, col 49 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5760, col 53 to line 5760, col 72 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5761, col 36 to line 5761, col 68 of module ScenarioIII: 5991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5761, col 36 to line 5761, col 45 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5761, col 49 to line 5761, col 68 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5762, col 40 to line 5763, col 119 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5764, col 53 to line 5764, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5765, col 53 to line 5765, col 170 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5767, col 53 to line 5767, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5768, col 47 to line 5768, col 50 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5769, col 47 to line 5770, col 89 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5771, col 40 to line 5771, col 85 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5772, col 50 to line 5772, col 139 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5773, col 58 to line 5773, col 124 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5773, col 73 to line 5773, col 124 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2327, col 22 to line 2327, col 70 of module ScenarioIII: 5991
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 22 to line 2327, col 58 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 62 to line 2327, col 70 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5774, col 66 to line 5774, col 76 of module ScenarioIII: 3066
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5775, col 58 to line 5775, col 194 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5776, col 58 to line 5776, col 183 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5777, col 58 to line 5777, col 99 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5778, col 58 to line 5778, col 117 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5779, col 58 to line 5779, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5780, col 58 to line 5783, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5784, col 47 to line 5784, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5785, col 47 to line 5787, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5788, col 36 to line 5842, col 80 of module ScenarioIII: 2925
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadForwardIRInner line 5844, col 1 to line 5844, col 36 of module ScenarioIII>: 7090:7139
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5844, col 44 to line 5844, col 86 of module ScenarioIII: 207850
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5844, col 44 to line 5844, col 51 of module ScenarioIII: 200711
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5845, col 44 to line 5845, col 80 of module ScenarioIII: 14278
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5845, col 44 to line 5845, col 57 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5845, col 61 to line 5845, col 80 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5846, col 44 to line 5846, col 76 of module ScenarioIII: 14278
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5846, col 44 to line 5846, col 53 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5846, col 57 to line 5846, col 76 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5847, col 48 to line 5847, col 119 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5849, col 57 to line 5849, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5850, col 52 to line 5850, col 111 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5851, col 48 to line 5851, col 74 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5852, col 55 to line 5854, col 214 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5855, col 58 to line 5855, col 119 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5856, col 66 to line 5856, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5857, col 63 to line 5857, col 122 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5858, col 55 to line 5860, col 69 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5862, col 55 to line 5863, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5864, col 48 to line 5864, col 74 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5865, col 55 to line 5865, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5866, col 55 to line 5866, col 172 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5867, col 55 to line 5867, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5868, col 55 to line 5868, col 115 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5869, col 55 to line 5870, col 97 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5871, col 44 to line 5943, col 70 of module ScenarioIII: 7139
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadUnlockSemaphore line 5945, col 1 to line 5945, col 37 of module ScenarioIII>: 15468:41812
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5945, col 45 to line 5945, col 88 of module ScenarioIII: 242522
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5945, col 45 to line 5945, col 52 of module ScenarioIII: 200710
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5946, col 45 to line 5946, col 81 of module ScenarioIII: 90416
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5946, col 45 to line 5946, col 58 of module ScenarioIII: 48604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5946, col 62 to line 5946, col 81 of module ScenarioIII: 48604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5947, col 45 to line 5947, col 77 of module ScenarioIII: 90416
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5947, col 45 to line 5947, col 54 of module ScenarioIII: 48604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5947, col 58 to line 5947, col 77 of module ScenarioIII: 48604
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5948, col 49 to line 5949, col 128 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5950, col 62 to line 5950, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5951, col 62 to line 5951, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5953, col 62 to line 5953, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5954, col 56 to line 5954, col 59 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5955, col 56 to line 5956, col 98 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5957, col 49 to line 5957, col 94 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5958, col 59 to line 5958, col 107 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5959, col 64 to line 5959, col 151 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5961, col 67 to line 5961, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5962, col 56 to line 5962, col 110 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5963, col 56 to line 5963, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5964, col 56 to line 5964, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5965, col 45 to line 6044, col 71 of module ScenarioIII: 41812
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCRemoveIRFromIRQueueOFC line 6046, col 1 to line 6046, col 31 of module ScenarioIII>: 21463:35293
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6046, col 39 to line 6046, col 76 of module ScenarioIII: 236002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6046, col 39 to line 6046, col 46 of module ScenarioIII: 200709
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6047, col 39 to line 6047, col 75 of module ScenarioIII: 73355
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6047, col 39 to line 6047, col 52 of module ScenarioIII: 38062
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6047, col 56 to line 6047, col 75 of module ScenarioIII: 38062
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6048, col 39 to line 6048, col 71 of module ScenarioIII: 73355
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6048, col 39 to line 6048, col 48 of module ScenarioIII: 38062
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6048, col 52 to line 6048, col 71 of module ScenarioIII: 38062
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6049, col 42 to line 6049, col 106 of module ScenarioIII: 38062
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6050, col 54 to line 6050, col 125 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6052, col 63 to line 6052, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6053, col 61 to line 6053, col 117 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6053, col 81 to line 6053, col 117 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6054, col 54 to line 6054, col 80 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6055, col 61 to line 6055, col 157 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6055, col 74 to line 6055, col 157 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6056, col 61 to line 6056, col 117 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6056, col 75 to line 6056, col 117 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2327, col 22 to line 2327, col 70 of module ScenarioIII: 73235
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 22 to line 2327, col 58 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2327, col 62 to line 2327, col 70 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6057, col 69 to line 6057, col 79 of module ScenarioIII: 38002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6058, col 61 to line 6058, col 143 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6059, col 61 to line 6059, col 155 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6060, col 61 to line 6060, col 102 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6062, col 61 to line 6066, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6067, col 54 to line 6067, col 80 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6068, col 61 to line 6068, col 144 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6069, col 61 to line 6069, col 178 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6070, col 61 to line 6070, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6071, col 61 to line 6071, col 106 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6072, col 61 to line 6073, col 103 of module ScenarioIII: 35233
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6074, col 50 to line 6074, col 95 of module ScenarioIII: 60
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6075, col 50 to line 6081, col 68 of module ScenarioIII: 60
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6082, col 39 to line 6142, col 65 of module ScenarioIII: 35293
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadStateReconciliation line 6144, col 1 to line 6144, col 41 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6144, col 49 to line 6144, col 96 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6152, col 49 to line 6152, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6155, col 71 to line 6155, col 142 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6157, col 71 to line 6157, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6159, col 71 to line 6159, col 166 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6161, col 71 to line 6161, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6162, col 60 to line 6162, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6164, col 71 to line 6164, col 246 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6166, col 82 to line 6166, col 177 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6168, col 82 to line 6168, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6170, col 71 to line 6171, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6172, col 60 to line 6172, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6173, col 49 to line 6173, col 94 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6174, col 49 to line 6264, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerProc line 6277, col 1 to line 6277, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6277, col 40 to line 6277, col 78 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6278, col 40 to line 6278, col 66 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6279, col 40 to line 6279, col 55 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6280, col 40 to line 6280, col 64 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6283, col 40 to line 6283, col 117 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6285, col 51 to line 6285, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6287, col 62 to line 6287, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6288, col 62 to line 6288, col 132 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6289, col 40 to line 6356, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEvenHanlderRemoveEventFromQueue line 6358, col 1 to line 6358, col 47 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6358, col 55 to line 6358, col 108 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6363, col 68 to line 6363, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6364, col 66 to line 6364, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6366, col 66 to line 6366, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6368, col 77 to line 6368, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6370, col 77 to line 6370, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6372, col 66 to line 6373, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6375, col 66 to line 6375, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6376, col 66 to line 6376, col 183 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6377, col 66 to line 6377, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6378, col 66 to line 6378, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6379, col 66 to line 6380, col 108 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6381, col 55 to line 6474, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSuspendSW line 6476, col 1 to line 6476, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6476, col 33 to line 6476, col 64 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6481, col 50 to line 6481, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6482, col 50 to line 6482, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6484, col 50 to line 6484, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6486, col 44 to line 6487, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6489, col 44 to line 6489, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6490, col 44 to line 6490, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6491, col 44 to line 6491, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6492, col 44 to line 6492, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6493, col 33 to line 6541, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerFreeSuspendedSW line 6543, col 1 to line 6543, col 31 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6543, col 39 to line 6543, col 76 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6548, col 52 to line 6548, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6549, col 50 to line 6549, col 100 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6551, col 50 to line 6551, col 169 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6553, col 61 to line 6553, col 148 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6555, col 61 to line 6555, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6557, col 50 to line 6558, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6560, col 50 to line 6560, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6561, col 50 to line 6561, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6562, col 50 to line 6562, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6563, col 50 to line 6563, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6564, col 50 to line 6565, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6566, col 39 to line 6626, col 65 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerCheckIfThisIsLastEvent line 6628, col 1 to line 6628, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6628, col 46 to line 6628, col 90 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6633, col 63 to line 6633, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6634, col 63 to line 6634, col 180 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6636, col 63 to line 6636, col 131 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6638, col 57 to line 6639, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6642, col 68 to line 6642, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6643, col 68 to line 6643, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6644, col 57 to line 6644, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6645, col 46 to line 6731, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<getIRsToBeChecked line 6733, col 1 to line 6733, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6733, col 31 to line 6733, col 60 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6738, col 48 to line 6738, col 131 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6739, col 48 to line 6739, col 165 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6741, col 48 to line 6741, col 116 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6743, col 42 to line 6744, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6746, col 42 to line 6746, col 134 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6748, col 53 to line 6748, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6749, col 53 to line 6749, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6750, col 42 to line 6750, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6751, col 42 to line 6751, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6752, col 31 to line 6798, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ResetAllIRs line 6800, col 1 to line 6800, col 17 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6800, col 25 to line 6800, col 48 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6805, col 42 to line 6805, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6806, col 42 to line 6806, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6808, col 42 to line 6808, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6810, col 36 to line 6811, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6813, col 36 to line 6813, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6814, col 36 to line 6814, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6816, col 47 to line 6816, col 103 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6818, col 47 to line 6818, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6820, col 47 to line 6820, col 117 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6821, col 47 to line 6821, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6822, col 36 to line 6822, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6823, col 36 to line 6824, col 58 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6825, col 25 to line 6861, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerEventHandlerStateReconciliation line 6863, col 1 to line 6863, col 47 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6863, col 55 to line 6863, col 108 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6870, col 55 to line 6870, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6872, col 66 to line 6872, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6874, col 66 to line 6874, col 93 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6875, col 55 to line 6875, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6876, col 55 to line 6972, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCMonitorCheckIfMastr line 6983, col 1 to line 6983, col 28 of module ScenarioIII>: 23328:24514
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6983, col 36 to line 6983, col 70 of module ScenarioIII: 225222
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6983, col 36 to line 6983, col 43 of module ScenarioIII: 200708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2308, col 42 to line 2308, col 90 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2309, col 42 to line 2309, col 60 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2309, col 65 to line 2309, col 92 of module ScenarioIII: 146184
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2309, col 65 to line 2309, col 80 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6984, col 55 to line 6984, col 61 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2307, col 25 to line 2307, col 73 of module ScenarioIII: 146184
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2307, col 25 to line 2307, col 61 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2307, col 65 to line 2307, col 73 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6985, col 47 to line 6985, col 50 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6986, col 36 to line 6986, col 59 of module ScenarioIII: 146184
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6986, col 36 to line 6986, col 52 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6986, col 56 to line 6986, col 59 of module ScenarioIII: 121670
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6987, col 39 to line 6987, col 59 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6988, col 39 to line 6988, col 75 of module ScenarioIII: 49028
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6988, col 39 to line 6988, col 52 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6988, col 56 to line 6988, col 75 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6989, col 36 to line 6989, col 68 of module ScenarioIII: 49028
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6989, col 36 to line 6989, col 45 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6989, col 49 to line 6989, col 68 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6990, col 36 to line 6990, col 73 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6991, col 36 to line 6991, col 88 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6992, col 36 to line 6993, col 89 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6994, col 36 to line 6995, col 89 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6996, col 39 to line 6996, col 78 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6997, col 44 to line 6997, col 95 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7000, col 47 to line 7000, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7001, col 36 to line 7058, col 80 of module ScenarioIII: 24514
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<MonitoringServerRemoveFromQueue line 7060, col 1 to line 7060, col 37 of module ScenarioIII>: 54537:56723
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7060, col 45 to line 7060, col 88 of module ScenarioIII: 257430
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7060, col 45 to line 7060, col 52 of module ScenarioIII: 200707
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7061, col 45 to line 7061, col 81 of module ScenarioIII: 113446
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7061, col 45 to line 7061, col 58 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7061, col 62 to line 7061, col 81 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7062, col 45 to line 7062, col 77 of module ScenarioIII: 113446
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7062, col 45 to line 7062, col 54 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7062, col 58 to line 7062, col 77 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7063, col 49 to line 7064, col 128 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7065, col 62 to line 7065, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7066, col 62 to line 7066, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7068, col 62 to line 7068, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7069, col 56 to line 7069, col 59 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7070, col 56 to line 7071, col 98 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7072, col 49 to line 7072, col 94 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7073, col 53 to line 7074, col 107 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7075, col 56 to line 7075, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7076, col 56 to line 7076, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7077, col 45 to line 7156, col 71 of module ScenarioIII: 56723
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerUpdateIR2 line 7158, col 1 to line 7158, col 25 of module ScenarioIII>: 21967:22315
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7158, col 33 to line 7158, col 64 of module ScenarioIII: 223021
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7158, col 33 to line 7158, col 40 of module ScenarioIII: 200706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7159, col 33 to line 7159, col 69 of module ScenarioIII: 44630
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7159, col 33 to line 7159, col 46 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7159, col 50 to line 7159, col 69 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7160, col 33 to line 7160, col 65 of module ScenarioIII: 44630
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7160, col 33 to line 7160, col 42 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7160, col 46 to line 7160, col 65 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7161, col 37 to line 7162, col 116 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7163, col 50 to line 7163, col 133 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7164, col 50 to line 7164, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7166, col 50 to line 7166, col 118 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7167, col 44 to line 7167, col 47 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7168, col 44 to line 7169, col 86 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7170, col 37 to line 7170, col 82 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7171, col 41 to line 7177, col 104 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7178, col 44 to line 7178, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7179, col 44 to line 7182, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7183, col 33 to line 7230, col 75 of module ScenarioIII: 22315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<IRCriticalSection line 7369, col 1 to line 7369, col 17 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7372, col 25 to line 7375, col 107 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<RedundantInstallation line 7377, col 1 to line 7377, col 21 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7377, col 26 to line 7378, col 70 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7377, col 49 to line 7378, col 70 of module ScenarioIII: 445548
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 7377, col 52 to line 7377, col 72 of module ScenarioIII: 445548
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 7378, col 52 to line 7378, col 70 of module ScenarioIII: 397030
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7377, col 35 to line 7377, col 46 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<ConsistencyReq line 7380, col 1 to line 7380, col 14 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7380, col 19 to line 7384, col 91 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7380, col 55 to line 7384, col 91 of module ScenarioIII: 172245
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7380, col 31 to line 7380, col 52 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2205, col 18 to line 2205, col 43 of module ScenarioIII: 222774:911754
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2205, col 19 to line 2205, col 24 of module ScenarioIII: 172245
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2205, col 33 to line 2205, col 42 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 7380, col 40 to line 7380, col 51 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<Debug line 7385, col 1 to line 7385, col 5 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7385, col 11 to line 7385, col 25 of module ScenarioIII: 222774
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2777:0 @!@!@
End of statistics (please note that for performance reasons large models
are best checked with coverage and cost statistics disabled).
@!@!@ENDMSG 2777 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(53) at 2021-04-04 17:39:39: 760,634 states generated (119,551 s/min), 222,774 distinct states found (35,014 ds/min), 22,069 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2199:0 @!@!@
760634 states generated, 222774 distinct states found, 22069 states left on queue.
@!@!@ENDMSG 2199 @!@!@
@!@!@STARTMSG 2186:0 @!@!@
Finished in 381748ms at (2021-04-04 17:39:39)
@!@!@ENDMSG 2186 @!@!@

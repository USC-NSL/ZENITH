@!@!@STARTMSG 2262:0 @!@!@
TLC2 Version 2.16 of 31 December 2020 (rev: cdddf55)
@!@!@ENDMSG 2262 @!@!@
@!@!@STARTMSG 2187:0 @!@!@
Running breadth-first search Model-Checking with fp 0 and seed 6656192034752133704 with 2 workers on 4 cores with 1433MB heap and 3221MB offheap memory [pid: 2357] (Mac OS X 10.14.4 x86_64, AdoptOpenJDK 14.0.1 x86_64, OffHeapDiskFPSet, DiskStateQueue).
@!@!@ENDMSG 2187 @!@!@
@!@!@STARTMSG 2220:0 @!@!@
Starting SANY...
@!@!@ENDMSG 2220 @!@!@
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/RCOFCNIBFailover/ScenarioIII.toolbox/Model_SnapShot_1613371972005/MC.tla
Parsing file /Users/zmy/Documents/codes/RoutingConsistency/RCOFCNIBFailover/ScenarioIII.toolbox/Model_SnapShot_1613371972005/ScenarioIII.tla
Warning: symbols were renamed.
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/TLC.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Integers.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Sequences.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/FiniteSets.tla
Parsing file /Applications/TLA+ Toolbox.app/Contents/Eclipse/plugins/org.lamport.tlatools_1.0.0.202012311918/tla2sany/StandardModules/Naturals.tla
Semantic processing of module Naturals
Semantic processing of module Integers
Semantic processing of module Sequences
Semantic processing of module FiniteSets
Semantic processing of module TLC
Semantic processing of module ScenarioIII
Semantic processing of module MC
@!@!@STARTMSG 2219:0 @!@!@
SANY finished.
@!@!@ENDMSG 2219 @!@!@
@!@!@STARTMSG 2185:0 @!@!@
Starting... (2021-04-11 21:11:31)
@!@!@ENDMSG 2185 @!@!@
@!@!@STARTMSG 2212:0 @!@!@
Implied-temporal checking--satisfiability problem has 1 branches.
@!@!@ENDMSG 2212 @!@!@
@!@!@STARTMSG 2189:0 @!@!@
Computing initial states...
@!@!@ENDMSG 2189 @!@!@
@!@!@STARTMSG 2190:0 @!@!@
Finished computing initial states: 1 distinct state generated at 2021-04-11 21:11:35.
@!@!@ENDMSG 2190 @!@!@
@!@!@STARTMSG 2192:0 @!@!@
Checking temporal properties for the current state space with 373 total distinct states at (2021-04-11 21:11:38)
@!@!@ENDMSG 2192 @!@!@
@!@!@STARTMSG 2267:0 @!@!@
Finished checking temporal properties in 00s at 2021-04-11 21:11:38
@!@!@ENDMSG 2267 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(15) at 2021-04-11 21:11:38: 1,254 states generated (1,254 s/min), 437 distinct states found (437 ds/min), 64 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2110:1 @!@!@
Invariant RedundantInstallation is violated.
@!@!@ENDMSG 2110 @!@!@
@!@!@STARTMSG 2121:1 @!@!@
The behavior up to this point is:
@!@!@ENDMSG 2121 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
1: <Initial predicate>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> <<>>)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> ""])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendReadTransaction" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
2: <NIBEventHandling line 3822, col 27 to line 3872, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> <<>>)
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> ""])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendReadTransaction" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
3: <RCSendReadTransaction line 4857, col 32 to line 4924, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> ""])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "SeqReadNIBStates"]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
4: <NIBDequeueTransaction line 3874, col 32 to line 3941, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBProcessTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> NULL)
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
5: <NIBProcessTransaction line 3943, col 32 to line 4188, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2RC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
6: <NIBSendBackIfAny line 4190, col 27 to line 4256, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
7: <NIBEventHandling line 3822, col 27 to line 3872, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<[value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> TRUE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
8: <RCNIBEventHanderProc line 4684, col 31 to line 4775, col 78 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
9: <SequencerProc line 4926, col 24 to line 4979, col 53 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCComputeNextIR2Schedule" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = TRUE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
10: <RCComputeNextIR2Schedule line 4981, col 35 to line 5058, col 64 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 0)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SchedulerMechanism" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {1})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
11: <SchedulerMechanism line 5060, col 29 to line 5124, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "SeqReadNIBStates"])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "RCSendPrepareIR2NIB" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
12: <RCSendPrepareIR2NIB line 5126, col 30 to line 5192, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "SeqReadNIBStates"])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBDequeueTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<[name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
13: <NIBDequeueTransaction line 3874, col 32 to line 3941, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBProcessTransaction" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
14: <NIBProcessTransaction line 3943, col 32 to line 4188, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBSendBackIfAny" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "NIB2OFC")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
15: <NIBSendBackIfAny line 4190, col 27 to line 4256, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<[value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]]>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [x |-> <<>>]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
16: <OFCNIBEventHanderProc line 5651, col 32 to line 5726, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
17: <ControllerThread line 5807, col 27 to line 5860, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 0)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadGetNextIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> -1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
18: <OFCThreadGetNextIR line 5862, col 29 to line 5925, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCUpdateIRQueueIRTag" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [table |-> ""])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> <<>>)
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
19: <OFCUpdateIRQueueIRTag line 5927, col 32 to line 5996, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
20: <OFCThreadSendIR line 5998, col 26 to line 6055, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [table |-> ""])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadNotifyNIBIRSent" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
21: <OFCThreadNotifyNIBIRSent line 6057, col 35 to line 6134, col 64 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThreadForwardIRInner" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
22: <ControllerThreadForwardIRInner line 6136, col 41 to line 6229, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<SW_SIMPLE_ID, s0>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
23: <ghostProc line 3757, col 20 to line 3818, col 49 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "OFCFailure" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
24: <OFCFailure line 5364, col 21 to line 5411, col 50 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> Failed @@ <<ofc0, CONT_MONITOR>> :> Failed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> Failed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHanderProc" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = FALSE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
25: <OFCNIBEventHanderProc line 5651, col 32 to line 5726, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> Failed @@ <<ofc0, CONT_MONITOR>> :> Failed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> Failed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFC" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
26: <OFCRemoveIRFromIRQueueOFC line 6231, col 36 to line 6305, col 65 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = FALSE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> Failed @@ <<ofc0, CONT_MONITOR>> :> Failed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> Failed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCRemoveIRFromIRQueueOFCLocal" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
27: <OFCRemoveIRFromIRQueueOFCLocal line 6307, col 41 to line 6394, col 70 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> Failed @@ <<ofc0, CONT_MONITOR>> :> Failed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> Failed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = FALSE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
28: <OFCMonitorCheckIfMastr line 6560, col 33 to line 6637, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> Failed @@ <<ofc0, CONT_MONITOR>> :> Failed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> Failed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCFailoverResetStates")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
29: <OFCFailoverResetStates line 5415, col 33 to line 5490, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> InReconciliation @@ <<ofc0, CONT_MONITOR>> :> InReconciliation @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> InReconciliation @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCReadSwitches")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
30: <OFCReadSwitches line 5492, col 26 to line 5545, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> InReconciliation @@ <<ofc0, CONT_MONITOR>> :> InReconciliation @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> InReconciliation @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCReadNIB")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<[IR |-> 1, type |-> INSTALL_FLOW, to |-> s0]>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [type |-> 0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
31: <SwitchSimpleProcess line 2570, col 30 to line 2640, col 77 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> InReconciliation @@ <<ofc0, CONT_MONITOR>> :> InReconciliation @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> InReconciliation @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCReadNIB")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
32: <OFCReadNIB line 5547, col 21 to line 5592, col 50 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> InReconciliation @@ <<ofc0, CONT_MONITOR>> :> InReconciliation @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> InReconciliation @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "OFCBack2Normal")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
33: <OFCBack2Normal line 5594, col 25 to line 5645, col 54 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCWorkerFailover" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
34: <OFCWorkerFailover line 6492, col 28 to line 6547, col 75 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "ControllerThread" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
35: <ControllerThread line 5807, col 27 to line 5860, col 74 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadGetNextIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
36: <OFCThreadGetNextIR line 5862, col 29 to line 5925, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCUpdateIRQueueIRTag" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
37: <OFCUpdateIRQueueIRTag line 5927, col 32 to line 5996, col 79 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorFailover" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
38: <OFCMonitorFailover line 6934, col 29 to line 6990, col 76 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [type |-> 0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorCheckIfMastr" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
39: <OFCMonitorCheckIfMastr line 6560, col 33 to line 6637, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCMonitorUpdateIRDone" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
40: <OFCMonitorUpdateIRDone line 6639, col 33 to line 6706, col 80 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<0>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_NONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCUpdateIRDone" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
41: <OFCUpdateIRDone line 6708, col 26 to line 6767, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<1>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_DONE>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadSendIR" @@ <<ofc0, CONT_MONITOR>> :> "OFCUpdateNIBIRDONE" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2217:4 @!@!@
42: <OFCThreadSendIR line 5998, col 26 to line 6055, col 73 of module ScenarioIII>
/\ transaction = (<<ofc0, CONT_MONITOR>> :> <<>>)
/\ RC_READY = FALSE
/\ egressMsg = (<<NIC_ASIC_OUT, s0>> :> [type |-> 0] @@ <<NIC_ASIC_OUT, s1>> :> [type |-> 0])
/\ FirstInstallNIB = <<0>>
/\ OFCThreadID = <<ofc0, t0>>
/\ nextIRToSent = (<<ofc0, t0>> :> 1)
/\ IRStatus = <<IR_NONE>>
/\ FlagOFCWorkerFailover = TRUE
/\ ofaInMsg = (<<OFA_IN, s0>> :> [type |-> 0] @@ <<OFA_IN, s1>> :> [type |-> 0])
/\ rowRemove = (<<ofc0, t0>> :> -1)
/\ idThreadWorkingOnIR = <<IR_UNLOCK>>
/\ installedIRs = <<1>>
/\ NIBIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {1})
/\ IR2SW = <<s0>>
/\ ofaOutConfirmation = (<<OFA_OUT, s0>> :> 0 @@ <<OFA_OUT, s1>> :> 0)
/\ transaction_ = (<<rc0, CONT_SEQ>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ SwProcSet = {<<SW_RESOLVE_PROC, s0>>, <<SW_RESOLVE_PROC, s1>>, <<NIC_ASIC_IN, s0>>, <<NIC_ASIC_IN, s1>>, <<SW_FAILURE_PROC, s0>>, <<SW_FAILURE_PROC, s1>>, <<INSTALLER, s0>>, <<INSTALLER, s1>>, <<OFA_IN, s0>>, <<OFA_IN, s1>>, <<OFA_OUT, s0>>, <<OFA_OUT, s1>>, <<NIC_ASIC_OUT, s0>>, <<NIC_ASIC_OUT, s1>>}
/\ FirstInstallOFC = <<1>>
/\ failedElem = (<<SW_FAILURE_PROC, s0>> :> "" @@ <<SW_FAILURE_PROC, s1>> :> "")
/\ IRQueueNIB = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ controllerSubmoduleFailStat = (<<ofc0, t0>> :> NotFailed @@ <<ofc0, CONT_MONITOR>> :> NotFailed @@ <<ofc0, CONT_EVENT>> :> NotFailed @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> NotFailed @@ <<rc0, CONT_SEQ>> :> NotFailed @@ <<rc0, CONT_RC_NIB_EVENT>> :> NotFailed @@ <<nib0, CONT_NIB_RC_EVENT>> :> NotFailed)
/\ nextTrans = (<<nib0, CONT_NIB_RC_EVENT>> :> [name |-> "RCScheduleIRInOneStep", ops |-> <<[value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE]>>])
/\ switchStatus = ( s0 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] @@
  s1 :>
      [ nicAsic |-> NotFailed,
        cpu |-> NotFailed,
        ofa |-> NotFailed,
        installer |-> NotFailed ] )
/\ op_ir_status_change_ = (<<ofc0, t0>> :> [value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS])
/\ ContProcSet = {<<ofc0, t0>>, <<ofc0, CONT_MONITOR>>, <<ofc0, CONT_EVENT>>, <<ofc0, CONT_OFC_NIB_EVENT>>, <<rc0, CONT_SEQ>>, <<rc0, CONT_RC_NIB_EVENT>>, <<nib0, CONT_NIB_RC_EVENT>>}
/\ op_first_install = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ controllerStateNIB = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ Installer2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ IRQueue = (<<ofc0, t0>> :> <<>>)
/\ swSeqChangedStatus = <<>>
/\ controlMsgCounter = (s0 :> 0 @@ s1 :> 0)
/\ switch2Controller = <<[IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0]>>
/\ key = (<<rc0, CONT_SEQ>> :> "")
/\ TCAM = (s0 :> <<1>> @@ s1 :> <<>>)
/\ masterState = [ofc0 |-> "primary", rc0 |-> "primary"]
/\ sw_fail_ordering_var = <<>>
/\ IRQueueOFC = <<[tag |-> <<ofc0, t0>>, IR |-> 1]>>
/\ msg = (<<ofc0, CONT_MONITOR>> :> [IR |-> 1, type |-> INSTALLED_SUCCESSFULLY, from |-> s0])
/\ stepOfFailure_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ Ofa2InstallerBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ NIB2RC = <<>>
/\ Ofa2NicAsicBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ controllerStateOFC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ dependencyGraph = {}
/\ failedSet = (<<SW_RESOLVE_PROC, s0>> :> {} @@ <<SW_RESOLVE_PROC, s1>> :> {})
/\ recoveredElem = (<<SW_RESOLVE_PROC, s0>> :> "" @@ <<SW_RESOLVE_PROC, s1>> :> "")
/\ NIBThreadID = <<nib0, CONT_NIB_RC_EVENT>>
/\ op_ir_status_change = (<<ofc0, CONT_MONITOR>> :> [table |-> ""])
/\ SwSuspensionStatus = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagNIBFailover = FALSE
/\ SwSuspensionStatusOFC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ SetScheduledIRsOFC = (s0 :> {} @@ s1 :> {})
/\ NIB2OFC = <<>>
/\ controllerSubmoduleFailNum = (ofc0 :> 0 @@ rc0 :> 0 @@ nib0 :> 0)
/\ OFC_READY = FALSE
/\ NIBMsg = (<<ofc0, t0>> :> [value |-> [x |-> <<>>]])
/\ IRStatusOFC = <<IR_SENT>>
/\ ingressIR = (<<NIC_ASIC_IN, s0>> :> [type |-> 0] @@ <<NIC_ASIC_IN, s1>> :> [type |-> 0])
/\ nextIR = (<<rc0, CONT_SEQ>> :> 1)
/\ X2NIB_len = 0
/\ isBootStrap = (<<ofc0, CONT_OFC_NIB_EVENT>> :> TRUE)
/\ pc = (<<SW_RESOLVE_PROC, s0>> :> "SwitchResolveFailure" @@ <<SW_RESOLVE_PROC, s1>> :> "SwitchResolveFailure" @@ <<NIC_ASIC_IN, s0>> :> "SwitchRcvPacket" @@ <<NIC_ASIC_IN, s1>> :> "SwitchRcvPacket" @@ <<ofc0, t0>> :> "OFCThreadNotifyNIBIRSent" @@ <<ofc0, CONT_MONITOR>> :> "OFCUpdateNIBIRDONE" @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> "OFCNIBEventHandlerFailover" @@ <<SW_FAILURE_PROC, s0>> :> "SwitchFailure" @@ <<SW_FAILURE_PROC, s1>> :> "SwitchFailure" @@ <<GHOST_UNLOCK_PROC, s0>> :> "ghostProc" @@ <<GHOST_UNLOCK_PROC, s1>> :> "ghostProc" @@ <<INSTALLER, s0>> :> "SwitchInstallerProc" @@ <<INSTALLER, s1>> :> "SwitchInstallerProc" @@ <<SW_SIMPLE_ID, s0>> :> "SwitchSimpleProcess" @@ <<SW_SIMPLE_ID, s1>> :> "SwitchSimpleProcess" @@ <<OFA_IN, s0>> :> "SwitchOfaProcIn" @@ <<OFA_IN, s1>> :> "SwitchOfaProcIn" @@ <<rc0, CONT_SEQ>> :> "SequencerProc" @@ <<rc0, CONT_RC_NIB_EVENT>> :> "RCNIBEventHanderProc" @@ <<OFA_OUT, s0>> :> "SwitchOfaProcOut" @@ <<OFA_OUT, s1>> :> "SwitchOfaProcOut" @@ <<NIC_ASIC_OUT, s0>> :> "SwitchFromOFAPacket" @@ <<NIC_ASIC_OUT, s1>> :> "SwitchFromOFAPacket" @@ <<nib0, CONT_NIB_RC_EVENT>> :> "NIBEventHandling" @@ <<"proc", RC_FAILOVER>> :> "RCFailoverResetStates" @@ <<"proc", RC_OFC_NIB_FAILURE>> :> "Done" @@ <<"proc", OFC_FAILOVER>> :> "Done")
/\ notFailedSet = (<<SW_FAILURE_PROC, s0>> :> {} @@ <<SW_FAILURE_PROC, s1>> :> {})
/\ stepOfFailure = (<<ofc0, t0>> :> 0)
/\ op1 = (<<ofc0, t0>> :> [value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE])
/\ op2 = (<<rc0, CONT_SEQ>> :> [table |-> ""])
/\ workerThreadRanking = (t0 :> 1)
/\ transaction_c = (<<ofc0, t0>> :> [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>])
/\ NIBMsg_ = (<<rc0, CONT_RC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ RCThreadID = <<rc0, CONT_SEQ>>
/\ NicAsic2OfaBuff = (s0 :> <<>> @@ s1 :> <<>>)
/\ stepOfFailure_c = (<<rc0, CONT_SEQ>> :> 0)
/\ NIBUpdateForRC = FALSE
/\ toBeScheduledIRs = (<<rc0, CONT_SEQ>> :> {})
/\ FlagRCNIBEventHandlerFailover = FALSE
/\ isBootStrap_ = (<<rc0, CONT_RC_NIB_EVENT>> :> FALSE)
/\ op1_ = (<<rc0, CONT_SEQ>> :> [value |-> [tag |-> NO_TAG, IR |-> 1], key |-> NULL, table |-> NIBT_IR_QUEUE])
/\ controller2Switch = (s0 :> <<>> @@ s1 :> <<>>)
/\ SetScheduledIRs = (s0 :> {} @@ s1 :> {})
/\ send_NIB_back = (<<nib0, CONT_NIB_RC_EVENT>> :> "")
/\ rowIndex = (<<ofc0, t0>> :> 1)
/\ switchLock = <<NO_LOCK, NO_LOCK>>
/\ controllerStateRC = (<<ofc0, t0>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_MONITOR>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_EVENT>> :> [type |-> NO_STATUS] @@ <<ofc0, CONT_OFC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_SEQ>> :> [type |-> NO_STATUS] @@ <<rc0, CONT_RC_NIB_EVENT>> :> [type |-> NO_STATUS] @@ <<nib0, CONT_NIB_RC_EVENT>> :> [type |-> NO_STATUS])
/\ ingressPkt = (<<SW_SIMPLE_ID, s0>> :> [IR |-> 1, type |-> INSTALL_FLOW, to |-> s0] @@ <<SW_SIMPLE_ID, s1>> :> [type |-> 0])
/\ FlagOFCMonitorFailover = TRUE
/\ statusResolveMsg = (<<SW_RESOLVE_PROC, s0>> :> <<>> @@ <<SW_RESOLVE_PROC, s1>> :> <<>>)
/\ installerInIR = (<<INSTALLER, s0>> :> 0 @@ <<INSTALLER, s1>> :> 0)
/\ switchOrdering = (s0 :> 1 @@ s1 :> 2)
/\ NIBMsg_O = (<<ofc0, CONT_OFC_NIB_EVENT>> :> [value |-> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)]])
/\ X2NIB = <<[name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>], [name |-> "OFCChangeIRStatus2Sent", ops |-> <<[value |-> IR_SENT, key |-> 1, table |-> NIBT_IR_STATUS]>>], [name |-> "UpdateIRTag", ops |-> <<[value |-> <<ofc0, t0>>, key |-> 1, table |-> NIBT_IR_QUEUE]>>]>>
/\ statusMsg = (<<SW_FAILURE_PROC, s0>> :> <<>> @@ <<SW_FAILURE_PROC, s1>> :> <<>>)
/\ IRStatusRC = <<IR_NONE>>
/\ value = (<<nib0, CONT_NIB_RC_EVENT>> :> [IRQueueNIB |-> <<[tag |-> NO_TAG, IR |-> 1]>>, IRStatusNIB |-> <<IR_NONE>>, SetScheduledIRsNIB |-> (s0 :> {} @@ s1 :> {}), SwSuspensionStatusNIB |-> (s0 :> SW_RUN @@ s1 :> SW_RUN)])
/\ FlagRCSequencerFailover = FALSE
/\ controllerLock = <<NO_LOCK, NO_LOCK>>
/\ IR2Remove = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ IRQueueRC = <<[tag |-> NO_TAG, IR |-> 1]>>
/\ rowRemove_ = (<<nib0, CONT_NIB_RC_EVENT>> :> 0)
/\ localIRSet = (<<ofc0, CONT_OFC_NIB_EVENT>> :> {})
/\ IRIndex = (<<nib0, CONT_NIB_RC_EVENT>> :> -1)
/\ SetScheduledIRsRC = (s0 :> {1} @@ s1 :> {})
/\ SwSuspensionStatusRC = (s0 :> SW_RUN @@ s1 :> SW_RUN)
/\ FlagOFCNIBEventHandlerFailover = TRUE

@!@!@ENDMSG 2217 @!@!@
@!@!@STARTMSG 2201:0 @!@!@
The coverage statistics at 2021-04-11 21:12:20
@!@!@ENDMSG 2201 @!@!@
@!@!@STARTMSG 2773:0 @!@!@
<Init line 2426, col 1 to line 2426, col 4 of module ScenarioIII>: 2:2
@!@!@ENDMSG 2773 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2427, col 12 to line 2427, col 44 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2428, col 12 to line 2428, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2429, col 12 to line 2429, col 55 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2430, col 12 to line 2430, col 55 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2431, col 12 to line 2431, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2432, col 12 to line 2435, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2436, col 12 to line 2439, col 59 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2440, col 12 to line 2440, col 36 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2441, col 12 to line 2441, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2442, col 12 to line 2442, col 35 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2443, col 12 to line 2444, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2445, col 12 to line 2445, col 30 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2446, col 12 to line 2446, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2447, col 12 to line 2447, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2448, col 12 to line 2448, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2449, col 12 to line 2449, col 50 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2450, col 12 to line 2450, col 37 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2451, col 12 to line 2451, col 47 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2452, col 12 to line 2452, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2453, col 12 to line 2453, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2454, col 30 to line 2454, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2454, col 71 to line 2454, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2454, col 72 to line 2454, col 107 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2454, col 88 to line 2454, col 107 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2454, col 88 to line 2454, col 92 of module ScenarioIII: 12
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2454, col 97 to line 2454, col 107 of module ScenarioIII: 6
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2454, col 84 to line 2454, col 85 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2454, col 43 to line 2454, col 68 of module ScenarioIII: 2:28
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2455, col 32 to line 2455, col 65 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |line 2232, col 28 to line 2247, col 114 of module ScenarioIII: 2:4
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2232, col 52 to line 2247, col 113 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2232, col 55 to line 2232, col 81 of module ScenarioIII: 4
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2233, col 55 to line 2234, col 88 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2235, col 55 to line 2236, col 88 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2237, col 55 to line 2239, col 98 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2240, col 55 to line 2243, col 126 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2244, col 55 to line 2244, col 90 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2245, col 56 to line 2247, col 113 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2232, col 35 to line 2232, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2455, col 53 to line 2455, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2456, col 12 to line 2457, col 126 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2458, col 12 to line 2458, col 33 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2459, col 12 to line 2459, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2460, col 12 to line 2460, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2461, col 12 to line 2461, col 27 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2462, col 12 to line 2462, col 55 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2463, col 12 to line 2463, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2464, col 12 to line 2464, col 48 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2465, col 12 to line 2465, col 42 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2466, col 12 to line 2466, col 27 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2467, col 12 to line 2467, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2468, col 12 to line 2468, col 159 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2469, col 12 to line 2469, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2470, col 12 to line 2470, col 57 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2471, col 12 to line 2471, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2472, col 12 to line 2472, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2473, col 12 to line 2473, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2474, col 12 to line 2474, col 40 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2475, col 12 to line 2475, col 41 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2476, col 12 to line 2476, col 49 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2477, col 12 to line 2477, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2478, col 12 to line 2478, col 25 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2479, col 12 to line 2479, col 24 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2480, col 12 to line 2480, col 23 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2481, col 12 to line 2481, col 34 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2482, col 12 to line 2482, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2483, col 12 to line 2483, col 64 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2484, col 12 to line 2484, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2485, col 12 to line 2485, col 54 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2486, col 12 to line 2486, col 53 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2487, col 12 to line 2487, col 28 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2488, col 12 to line 2488, col 46 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2490, col 12 to line 2490, col 52 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2491, col 12 to line 2491, col 41 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2493, col 12 to line 2493, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2495, col 12 to line 2495, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2497, col 12 to line 2497, col 73 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2499, col 12 to line 2499, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2501, col 12 to line 2501, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2503, col 12 to line 2503, col 63 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2505, col 12 to line 2505, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2506, col 12 to line 2506, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2507, col 12 to line 2507, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2509, col 12 to line 2509, col 66 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2510, col 12 to line 2510, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2511, col 12 to line 2511, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2513, col 12 to line 2513, col 83 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2514, col 12 to line 2514, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2515, col 12 to line 2515, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2516, col 12 to line 2516, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2517, col 12 to line 2517, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2518, col 12 to line 2518, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2519, col 12 to line 2519, col 70 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2521, col 12 to line 2521, col 91 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2522, col 12 to line 2522, col 76 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2524, col 12 to line 2524, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2525, col 12 to line 2525, col 56 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2526, col 12 to line 2526, col 69 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2527, col 12 to line 2527, col 68 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2528, col 12 to line 2528, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2529, col 12 to line 2529, col 58 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2530, col 12 to line 2530, col 67 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2532, col 12 to line 2532, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2533, col 12 to line 2533, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2534, col 12 to line 2534, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2535, col 12 to line 2535, col 72 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2537, col 12 to line 2537, col 77 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2538, col 12 to line 2538, col 74 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2539, col 12 to line 2539, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2540, col 12 to line 2540, col 78 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2541, col 12 to line 2541, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2542, col 12 to line 2542, col 94 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2543, col 12 to line 2543, col 81 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2544, col 12 to line 2544, col 75 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2545, col 12 to line 2545, col 98 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2547, col 12 to line 2547, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2548, col 12 to line 2548, col 89 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2549, col 12 to line 2549, col 86 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2550, col 12 to line 2550, col 71 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2551, col 12 to line 2568, col 107 of module ScenarioIII: 2
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchSimpleProcess line 2570, col 1 to line 2570, col 25 of module ScenarioIII>: 402:3742
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2570, col 33 to line 2570, col 64 of module ScenarioIII: 43005
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2570, col 33 to line 2570, col 40 of module ScenarioIII: 39263
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2571, col 33 to line 2571, col 75 of module ScenarioIII: 43005
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2571, col 33 to line 2571, col 57 of module ScenarioIII: 39263
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2571, col 61 to line 2571, col 75 of module ScenarioIII: 39263
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2572, col 33 to line 2572, col 67 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2572, col 33 to line 2572, col 63 of module ScenarioIII: 39263
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 7484
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2573, col 41 to line 2573, col 51 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2574, col 33 to line 2574, col 69 of module ScenarioIII: 7484
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2574, col 33 to line 2574, col 46 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2574, col 50 to line 2574, col 69 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2575, col 33 to line 2575, col 75 of module ScenarioIII: 7484
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2575, col 33 to line 2575, col 42 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2575, col 48 to line 2575, col 75 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2576, col 33 to line 2576, col 108 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2577, col 33 to line 2578, col 86 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2579, col 33 to line 2579, col 125 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2580, col 33 to line 2580, col 90 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2581, col 33 to line 2581, col 110 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2582, col 33 to line 2584, col 109 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2585, col 33 to line 2587, col 124 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2585, col 40 to line 2586, col 65 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2585, col 43 to line 2585, col 65 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2586, col 43 to line 2586, col 65 of module ScenarioIII: 3343
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2588, col 33 to line 2588, col 66 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2589, col 33 to line 2589, col 81 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2590, col 33 to line 2640, col 77 of module ScenarioIII: 3742
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchRcvPacket line 2644, col 1 to line 2644, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2644, col 29 to line 2644, col 56 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2645, col 29 to line 2645, col 72 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2648, col 29 to line 2648, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2654, col 29 to line 2654, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2655, col 29 to line 2655, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2656, col 29 to line 2656, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2657, col 29 to line 2703, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicInsertToOfaBuff line 2705, col 1 to line 2705, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2705, col 42 to line 2705, col 82 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2709, col 53 to line 2709, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2710, col 53 to line 2710, col 158 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2711, col 53 to line 2711, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2712, col 53 to line 2712, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2713, col 53 to line 2713, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2714, col 53 to line 2714, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2715, col 53 to line 2716, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2717, col 42 to line 2786, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFromOFAPacket line 2791, col 1 to line 2791, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2791, col 33 to line 2791, col 64 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2792, col 33 to line 2792, col 60 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2793, col 33 to line 2793, col 65 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2794, col 33 to line 2794, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2797, col 33 to line 2797, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2802, col 33 to line 2802, col 119 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2803, col 33 to line 2803, col 85 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2804, col 33 to line 2855, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchNicAsicSendOutMsg line 2857, col 1 to line 2857, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2857, col 37 to line 2857, col 72 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2864, col 48 to line 2864, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2865, col 48 to line 2865, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2866, col 48 to line 2866, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2867, col 48 to line 2867, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2868, col 48 to line 2868, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2869, col 48 to line 2869, col 96 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2870, col 48 to line 2871, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2872, col 37 to line 2933, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcIn line 2938, col 1 to line 2938, col 21 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2938, col 29 to line 2938, col 56 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2939, col 29 to line 2939, col 55 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2940, col 29 to line 2940, col 61 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2943, col 29 to line 2943, col 46 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2944, col 29 to line 2944, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2949, col 29 to line 2949, col 115 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2950, col 29 to line 2950, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2951, col 29 to line 2997, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcessPacket line 2999, col 1 to line 2999, col 28 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2999, col 36 to line 2999, col 70 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3003, col 47 to line 3003, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3005, col 58 to line 3005, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3008, col 58 to line 3008, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3009, col 47 to line 3009, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3010, col 47 to line 3010, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3011, col 47 to line 3011, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3012, col 47 to line 3012, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3013, col 47 to line 3014, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3015, col 36 to line 3074, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchOfaProcOut line 3079, col 1 to line 3079, col 22 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3079, col 30 to line 3079, col 58 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3080, col 30 to line 3080, col 56 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3081, col 30 to line 3081, col 62 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3084, col 30 to line 3084, col 47 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3085, col 30 to line 3085, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3086, col 30 to line 3086, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3089, col 30 to line 3089, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3090, col 30 to line 3137, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SendInstallationConfirmation line 3139, col 1 to line 3139, col 34 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3139, col 42 to line 3139, col 82 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3143, col 53 to line 3143, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3144, col 53 to line 3146, col 176 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3147, col 53 to line 3147, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3148, col 53 to line 3148, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3149, col 53 to line 3149, col 113 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3150, col 53 to line 3150, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3151, col 53 to line 3152, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3153, col 42 to line 3221, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerProc line 3226, col 1 to line 3226, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3226, col 33 to line 3226, col 64 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3227, col 33 to line 3227, col 56 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3228, col 33 to line 3228, col 67 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3231, col 33 to line 3231, col 50 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3232, col 33 to line 3232, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3235, col 33 to line 3235, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3236, col 33 to line 3236, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3237, col 33 to line 3288, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerInsert2TCAM line 3290, col 1 to line 3290, col 32 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3290, col 40 to line 3290, col 78 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3294, col 51 to line 3294, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3295, col 51 to line 3295, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3296, col 51 to line 3296, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3297, col 51 to line 3297, col 111 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3298, col 51 to line 3298, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3299, col 51 to line 3299, col 101 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3300, col 51 to line 3300, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3301, col 51 to line 3303, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3304, col 40 to line 3372, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchInstallerSendConfirmation line 3374, col 1 to line 3374, col 37 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3374, col 45 to line 3374, col 88 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3378, col 56 to line 3378, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3379, col 56 to line 3379, col 171 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3380, col 56 to line 3380, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3381, col 56 to line 3381, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3382, col 56 to line 3382, col 106 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3383, col 56 to line 3383, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3384, col 56 to line 3385, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3386, col 45 to line 3466, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchFailure line 3472, col 1 to line 3472, col 19 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3472, col 27 to line 3472, col 52 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3473, col 27 to line 3473, col 112 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3473, col 43 to line 3473, col 112 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3473, col 44 to line 3473, col 55 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3473, col 64 to line 3473, col 111 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3473, col 74 to line 3473, col 111 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2269, col 38 to line 2269, col 101 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2269, col 70 to line 2269, col 100 of module ScenarioIII: 157048
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2269, col 45 to line 2269, col 67 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3473, col 104 to line 3473, col 110 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3474, col 27 to line 3474, col 50 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3475, col 27 to line 3475, col 37 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3476, col 27 to line 3478, col 55 of module ScenarioIII: 39118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3479, col 65 to line 3479, col 85 of module ScenarioIII: 19559
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3479, col 36 to line 3479, col 62 of module ScenarioIII: 38719
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3480, col 27 to line 3480, col 53 of module ScenarioIII: 19559
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3485, col 38 to line 3485, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3486, col 38 to line 3486, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3488, col 29 to line 3488, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3493, col 38 to line 3495, col 104 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3496, col 38 to line 3496, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3497, col 38 to line 3497, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3498, col 38 to line 3498, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3499, col 38 to line 3499, col 98 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3501, col 49 to line 3501, col 139 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3502, col 49 to line 3504, col 127 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3505, col 49 to line 3505, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3507, col 49 to line 3509, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3510, col 38 to line 3510, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3515, col 49 to line 3515, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3517, col 60 to line 3517, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3518, col 60 to line 3520, col 138 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3521, col 60 to line 3521, col 125 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3523, col 60 to line 3525, col 84 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3526, col 49 to line 3526, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3531, col 60 to line 3531, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3535, col 71 to line 3535, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3536, col 71 to line 3539, col 199 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3540, col 71 to line 3540, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3542, col 71 to line 3544, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3545, col 60 to line 3545, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3550, col 71 to line 3550, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3551, col 71 to line 3551, col 135 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3552, col 71 to line 3552, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3553, col 71 to line 3555, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3556, col 71 to line 3556, col 136 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3559, col 71 to line 3563, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3564, col 38 to line 3567, col 70 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3568, col 27 to line 3568, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3569, col 27 to line 3608, col 53 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SwitchResolveFailure line 3612, col 1 to line 3612, col 26 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3612, col 34 to line 3612, col 66 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3613, col 34 to line 3613, col 110 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3613, col 47 to line 3613, col 110 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3613, col 48 to line 3613, col 56 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3613, col 65 to line 3613, col 109 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 3613, col 75 to line 3613, col 109 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2274, col 35 to line 2276, col 102 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2274, col 67 to line 2276, col 101 of module ScenarioIII: 157048
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2274, col 42 to line 2274, col 64 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 3613, col 102 to line 3613, col 108 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3614, col 34 to line 3614, col 66 of module ScenarioIII: 39262
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3619, col 36 to line 3619, col 89 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3624, col 45 to line 3626, col 114 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3627, col 45 to line 3627, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3628, col 45 to line 3628, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3629, col 45 to line 3629, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3630, col 45 to line 3630, col 105 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3632, col 56 to line 3632, col 146 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3633, col 56 to line 3636, col 198 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3637, col 56 to line 3637, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3639, col 56 to line 3641, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3642, col 45 to line 3642, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3647, col 56 to line 3647, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3648, col 56 to line 3648, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3650, col 67 to line 3650, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3651, col 67 to line 3653, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3654, col 67 to line 3654, col 157 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3655, col 67 to line 3658, col 209 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3659, col 56 to line 3659, col 128 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3664, col 67 to line 3664, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3666, col 78 to line 3666, col 168 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3667, col 78 to line 3670, col 220 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3671, col 78 to line 3671, col 150 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3673, col 78 to line 3675, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3680, col 78 to line 3680, col 147 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3684, col 89 to line 3684, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3685, col 89 to line 3688, col 231 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3689, col 89 to line 3689, col 161 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3691, col 89 to line 3693, col 120 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3696, col 78 to line 3699, col 109 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3700, col 56 to line 3700, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3701, col 45 to line 3704, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3705, col 34 to line 3705, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3706, col 34 to line 3753, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ghostProc line 3757, col 1 to line 3757, col 15 of module ScenarioIII>: 248:399
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3757, col 23 to line 3757, col 44 of module ScenarioIII: 39660
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3757, col 23 to line 3757, col 30 of module ScenarioIII: 39261
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3758, col 26 to line 3758, col 58 of module ScenarioIII: 39660
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3758, col 26 to line 3758, col 35 of module ScenarioIII: 39261
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3758, col 39 to line 3758, col 58 of module ScenarioIII: 39261
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3759, col 26 to line 3759, col 48 of module ScenarioIII: 1196
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3759, col 26 to line 3759, col 38 of module ScenarioIII: 797
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3759, col 42 to line 3759, col 48 of module ScenarioIII: 797
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3760, col 26 to line 3760, col 62 of module ScenarioIII: 798
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3760, col 26 to line 3760, col 39 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3760, col 43 to line 3760, col 62 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3761, col 23 to line 3774, col 70 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3775, col 23 to line 3777, col 114 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3778, col 23 to line 3778, col 56 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3779, col 23 to line 3779, col 61 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3780, col 23 to line 3818, col 49 of module ScenarioIII: 399
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBEventHandling line 3822, col 1 to line 3822, col 22 of module ScenarioIII>: 95:6709
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3822, col 30 to line 3822, col 58 of module ScenarioIII: 26339
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3822, col 30 to line 3822, col 37 of module ScenarioIII: 19630
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3823, col 30 to line 3823, col 80 of module ScenarioIII: 6709
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3824, col 30 to line 3872, col 74 of module ScenarioIII: 6709
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBDequeueTransaction line 3874, col 1 to line 3874, col 27 of module ScenarioIII>: 86:4353
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3874, col 35 to line 3874, col 68 of module ScenarioIII: 23981
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3874, col 35 to line 3874, col 42 of module ScenarioIII: 19628
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3875, col 38 to line 3875, col 53 of module ScenarioIII: 5745
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3876, col 46 to line 3876, col 57 of module ScenarioIII: 10098
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3876, col 46 to line 3876, col 50 of module ScenarioIII: 5745
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3876, col 54 to line 3876, col 57 of module ScenarioIII: 5745
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3877, col 46 to line 3877, col 98 of module ScenarioIII: 4353
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3878, col 46 to line 3878, col 65 of module ScenarioIII: 4353
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3879, col 46 to line 3879, col 96 of module ScenarioIII: 4353
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3880, col 46 to line 3880, col 70 of module ScenarioIII: 4353
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3881, col 46 to line 3881, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3882, col 46 to line 3882, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3883, col 46 to line 3883, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3884, col 35 to line 3941, col 79 of module ScenarioIII: 4353
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBProcessTransaction line 3943, col 1 to line 3943, col 27 of module ScenarioIII>: 111:3671
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3943, col 35 to line 3943, col 68 of module ScenarioIII: 23297
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 3943, col 35 to line 3943, col 42 of module ScenarioIII: 19626
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3944, col 38 to line 3944, col 53 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3945, col 50 to line 3945, col 83 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3950, col 57 to line 3950, col 166 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3953, col 57 to line 3953, col 160 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3954, col 57 to line 3961, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3962, col 61 to line 3962, col 95 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3965, col 68 to line 3965, col 129 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3970, col 68 to line 3970, col 177 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3971, col 68 to line 3974, col 153 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3975, col 68 to line 3975, col 126 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3976, col 68 to line 3981, col 90 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3982, col 72 to line 3982, col 117 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3983, col 79 to line 3984, col 171 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3985, col 79 to line 3985, col 140 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3986, col 79 to line 3989, col 164 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3990, col 79 to line 3990, col 137 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3991, col 79 to line 3997, col 101 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3998, col 83 to line 3998, col 123 of module ScenarioIII: 3612
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 3999, col 90 to line 4002, col 175 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4003, col 90 to line 4003, col 147 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4004, col 90 to line 4011, col 112 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4012, col 94 to line 4012, col 134 of module ScenarioIII: 3553
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4013, col 101 to line 4016, col 186 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4017, col 101 to line 4017, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4018, col 101 to line 4025, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4026, col 105 to line 4026, col 150 of module ScenarioIII: 3553
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4031, col 112 to line 4031, col 221 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4032, col 112 to line 4040, col 134 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4041, col 116 to line 4041, col 148 of module ScenarioIII: 3553
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4042, col 123 to line 4043, col 217 of module ScenarioIII: 187
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4044, col 123 to line 4044, col 190 of module ScenarioIII: 187
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4045, col 126 to line 4045, col 188 of module ScenarioIII: 187
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4046, col 131 to line 4047, col 191 of module ScenarioIII: 187
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4049, col 134 to line 4050, col 159 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4051, col 123 to line 4056, col 145 of module ScenarioIII: 187
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4057, col 127 to line 4057, col 173 of module ScenarioIII: 3366
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4058, col 134 to line 4059, col 228 of module ScenarioIII: 1071
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4060, col 134 to line 4061, col 228 of module ScenarioIII: 1071
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4062, col 134 to line 4062, col 223 of module ScenarioIII: 1071
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4063, col 134 to line 4066, col 219 of module ScenarioIII: 1071
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4067, col 134 to line 4067, col 191 of module ScenarioIII: 1071
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4068, col 134 to line 4071, col 156 of module ScenarioIII: 1071
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4072, col 138 to line 4072, col 183 of module ScenarioIII: 2295
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4077, col 145 to line 4077, col 248 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4078, col 145 to line 4083, col 167 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4084, col 149 to line 4084, col 184 of module ScenarioIII: 2295
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4085, col 156 to line 4086, col 250 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4087, col 156 to line 4088, col 250 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4089, col 156 to line 4090, col 250 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4091, col 156 to line 4091, col 270 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4092, col 156 to line 4093, col 250 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4094, col 156 to line 4094, col 241 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4095, col 156 to line 4098, col 184 of module ScenarioIII: 2202
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4099, col 160 to line 4099, col 198 of module ScenarioIII: 93
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4100, col 164 to line 4112, col 224 of module ScenarioIII: 93
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4114, col 167 to line 4117, col 195 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4118, col 156 to line 4119, col 178 of module ScenarioIII: 93
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4120, col 145 to line 4120, col 169 of module ScenarioIII: 2295
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4121, col 123 to line 4122, col 147 of module ScenarioIII: 3366
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4123, col 112 to line 4123, col 139 of module ScenarioIII: 3553
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4124, col 46 to line 4124, col 91 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4125, col 46 to line 4125, col 70 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4126, col 46 to line 4126, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4127, col 46 to line 4127, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4128, col 46 to line 4135, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4136, col 35 to line 4188, col 79 of module ScenarioIII: 3671
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBSendBackIfAny line 4190, col 1 to line 4190, col 22 of module ScenarioIII>: 108:3473
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4190, col 30 to line 4190, col 58 of module ScenarioIII: 23097
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4190, col 30 to line 4190, col 37 of module ScenarioIII: 19624
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4191, col 33 to line 4191, col 48 of module ScenarioIII: 3505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4192, col 44 to line 4192, col 73 of module ScenarioIII: 3505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2338, col 15 to line 2338, col 71 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2338, col 15 to line 2338, col 59 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2338, col 63 to line 2338, col 71 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2339, col 16 to line 2339, col 81 of module ScenarioIII: 1950
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2339, col 16 to line 2339, col 69 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2339, col 73 to line 2339, col 81 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4194, col 52 to line 4194, col 100 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4195, col 52 to line 4195, col 68 of module ScenarioIII: 975
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4196, col 55 to line 4196, col 85 of module ScenarioIII: 2530
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2296, col 25 to line 2296, col 76 of module ScenarioIII: 578
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 25 to line 2296, col 64 of module ScenarioIII: 305
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 68 to line 2296, col 76 of module ScenarioIII: 305
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2297, col 25 to line 2297, col 86 of module ScenarioIII: 546
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 25 to line 2297, col 74 of module ScenarioIII: 273
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 78 to line 2297, col 86 of module ScenarioIII: 273
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2298, col 25 to line 2298, col 92 of module ScenarioIII: 546
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 25 to line 2298, col 80 of module ScenarioIII: 273
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 84 to line 2298, col 92 of module ScenarioIII: 273
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4198, col 63 to line 4198, col 113 of module ScenarioIII: 273
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4199, col 63 to line 4199, col 66 of module ScenarioIII: 2225
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4200, col 63 to line 4200, col 79 of module ScenarioIII: 2225
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4201, col 52 to line 4201, col 67 of module ScenarioIII: 2498
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4202, col 41 to line 4202, col 92 of module ScenarioIII: 3473
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4203, col 41 to line 4203, col 86 of module ScenarioIII: 3473
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4204, col 41 to line 4204, col 65 of module ScenarioIII: 3473
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4205, col 41 to line 4205, col 63 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4206, col 41 to line 4206, col 87 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4207, col 41 to line 4208, col 69 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4209, col 30 to line 4256, col 74 of module ScenarioIII: 3473
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBReconciliation line 4258, col 1 to line 4258, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4258, col 31 to line 4258, col 60 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4259, col 31 to line 4259, col 124 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4261, col 31 to line 4261, col 44 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4262, col 31 to line 4262, col 45 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4263, col 31 to line 4263, col 43 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4264, col 31 to line 4264, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4265, col 31 to line 4265, col 48 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4266, col 31 to line 4266, col 47 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4267, col 31 to line 4267, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4268, col 31 to line 4316, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBFailoverReadOFC line 4318, col 1 to line 4318, col 24 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4318, col 32 to line 4318, col 62 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4319, col 32 to line 4319, col 54 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4320, col 32 to line 4320, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4321, col 32 to line 4321, col 55 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4322, col 32 to line 4322, col 48 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4323, col 32 to line 4323, col 78 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4324, col 32 to line 4374, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<NIBFailoverReadRC line 4376, col 1 to line 4376, col 23 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4376, col 31 to line 4376, col 60 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4378, col 31 to line 4378, col 66 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4379, col 31 to line 4379, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4380, col 31 to line 4430, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ChangeNIBStatusToNormal line 4432, col 1 to line 4432, col 29 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4432, col 37 to line 4432, col 72 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4433, col 37 to line 4433, col 123 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4434, col 37 to line 4437, col 122 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4438, col 37 to line 4438, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4439, col 37 to line 4439, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4440, col 37 to line 4440, col 82 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4441, col 37 to line 4502, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCFailoverResetStates line 4513, col 1 to line 4513, col 27 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4513, col 35 to line 4513, col 68 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4514, col 35 to line 4514, col 71 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4515, col 35 to line 4515, col 67 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4516, col 35 to line 4517, col 99 of module ScenarioIII: 19224
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4518, col 35 to line 4519, col 149 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4521, col 35 to line 4521, col 48 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4522, col 35 to line 4522, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4523, col 35 to line 4523, col 51 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4524, col 35 to line 4524, col 51 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4525, col 35 to line 4525, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4526, col 35 to line 4581, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCReadNIB line 4583, col 1 to line 4583, col 15 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4583, col 23 to line 4583, col 44 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4586, col 23 to line 4586, col 44 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4587, col 23 to line 4587, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4588, col 23 to line 4588, col 45 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4589, col 23 to line 4589, col 38 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4590, col 23 to line 4590, col 65 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4591, col 23 to line 4628, col 49 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCBack2Normal line 4630, col 1 to line 4630, col 19 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4630, col 27 to line 4630, col 52 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4631, col 27 to line 4632, col 134 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4633, col 27 to line 4633, col 48 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4634, col 27 to line 4634, col 60 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4635, col 27 to line 4679, col 53 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHanderProc line 4684, col 1 to line 4684, col 26 of module ScenarioIII>: 53:1708
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4684, col 34 to line 4684, col 66 of module ScenarioIII: 21330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4684, col 34 to line 4684, col 41 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4685, col 34 to line 4685, col 70 of module ScenarioIII: 21330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4685, col 34 to line 4685, col 47 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4685, col 51 to line 4685, col 70 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4686, col 34 to line 4686, col 66 of module ScenarioIII: 21330
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4686, col 34 to line 4686, col 43 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4686, col 47 to line 4686, col 66 of module ScenarioIII: 19622
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4687, col 37 to line 4687, col 52 of module ScenarioIII: 19224
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4688, col 45 to line 4688, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4689, col 45 to line 4689, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4690, col 45 to line 4695, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4696, col 45 to line 4696, col 57 of module ScenarioIII: 20932
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4696, col 45 to line 4696, col 50 of module ScenarioIII: 19224
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4696, col 54 to line 4696, col 57 of module ScenarioIII: 19224
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4697, col 45 to line 4697, col 94 of module ScenarioIII: 1708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4698, col 45 to line 4698, col 66 of module ScenarioIII: 1708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4699, col 48 to line 4699, col 72 of module ScenarioIII: 1708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4700, col 56 to line 4700, col 101 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4701, col 56 to line 4701, col 99 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4702, col 56 to line 4702, col 121 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4703, col 56 to line 4703, col 77 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4704, col 56 to line 4704, col 108 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4705, col 56 to line 4705, col 82 of module ScenarioIII: 117
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4706, col 61 to line 4707, col 126 of module ScenarioIII: 1591
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4708, col 64 to line 4715, col 88 of module ScenarioIII: 1591
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4717, col 67 to line 4721, col 99 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4722, col 56 to line 4722, col 77 of module ScenarioIII: 1591
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4723, col 45 to line 4723, col 94 of module ScenarioIII: 1708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4724, col 45 to line 4724, col 83 of module ScenarioIII: 1708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4725, col 34 to line 4775, col 78 of module ScenarioIII: 1708
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCNIBEventHandlerFailover line 4777, col 1 to line 4777, col 31 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4777, col 39 to line 4777, col 76 of module ScenarioIII: 19621
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4782, col 39 to line 4782, col 90 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4783, col 39 to line 4783, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4784, col 39 to line 4852, col 65 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendReadTransaction line 4857, col 1 to line 4857, col 27 of module ScenarioIII>: 2:59
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4857, col 35 to line 4857, col 68 of module ScenarioIII: 19680
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4857, col 35 to line 4857, col 42 of module ScenarioIII: 19621
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4858, col 35 to line 4858, col 71 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4858, col 35 to line 4858, col 48 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4858, col 52 to line 4858, col 71 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4859, col 35 to line 4859, col 67 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4859, col 35 to line 4859, col 44 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4859, col 48 to line 4859, col 67 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4860, col 38 to line 4860, col 53 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4861, col 46 to line 4861, col 76 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4862, col 46 to line 4862, col 94 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4863, col 46 to line 4863, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4864, col 54 to line 4864, col 64 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4865, col 46 to line 4865, col 122 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4866, col 46 to line 4866, col 86 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4867, col 46 to line 4867, col 88 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4868, col 46 to line 4868, col 78 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4869, col 35 to line 4924, col 79 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SequencerProc line 4926, col 1 to line 4926, col 19 of module ScenarioIII>: 14:10027
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4926, col 27 to line 4926, col 52 of module ScenarioIII: 29647
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4926, col 27 to line 4926, col 34 of module ScenarioIII: 19620
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4927, col 27 to line 4927, col 63 of module ScenarioIII: 20267
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4927, col 27 to line 4927, col 40 of module ScenarioIII: 10240
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4927, col 44 to line 4927, col 63 of module ScenarioIII: 10240
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4928, col 27 to line 4928, col 59 of module ScenarioIII: 20267
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4928, col 27 to line 4928, col 36 of module ScenarioIII: 10240
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4928, col 40 to line 4928, col 59 of module ScenarioIII: 10240
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2288, col 42 to line 2288, col 59 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2288, col 64 to line 2288, col 90 of module ScenarioIII: 20054
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2288, col 64 to line 2288, col 78 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4929, col 46 to line 4929, col 52 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4930, col 30 to line 4930, col 45 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4931, col 38 to line 4931, col 68 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4932, col 38 to line 4932, col 86 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4933, col 38 to line 4933, col 91 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4934, col 38 to line 4934, col 70 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4935, col 27 to line 4979, col 53 of module ScenarioIII: 10027
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCComputeNextIR2Schedule line 4981, col 1 to line 4981, col 30 of module ScenarioIII>: 16:569
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4981, col 38 to line 4981, col 74 of module ScenarioIII: 20188
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4981, col 38 to line 4981, col 45 of module ScenarioIII: 19619
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4982, col 38 to line 4982, col 74 of module ScenarioIII: 9773
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4982, col 38 to line 4982, col 51 of module ScenarioIII: 9204
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4982, col 55 to line 4982, col 74 of module ScenarioIII: 9204
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4983, col 38 to line 4983, col 70 of module ScenarioIII: 9773
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4983, col 38 to line 4983, col 47 of module ScenarioIII: 9204
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4983, col 51 to line 4983, col 70 of module ScenarioIII: 9204
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4984, col 41 to line 4984, col 56 of module ScenarioIII: 9019
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4985, col 49 to line 4985, col 79 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4986, col 49 to line 4986, col 97 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4987, col 49 to line 4988, col 80 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4989, col 49 to line 4989, col 62 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4990, col 49 to line 4990, col 142 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 4990, col 69 to line 4990, col 142 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4990, col 70 to line 4990, col 85 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4990, col 94 to line 4990, col 141 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 4990, col 104 to line 4990, col 141 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  |||line 2329, col 40 to line 2332, col 98 of module ScenarioIII: 569:736
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2329, col 61 to line 2332, col 97 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2329, col 61 to line 2331, col 100 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2329, col 61 to line 2330, col 87 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2329, col 61 to line 2329, col 86 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||||line 2330, col 62 to line 2330, col 87 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||||line 2331, col 62 to line 2331, col 100 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2332, col 62 to line 2332, col 97 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2329, col 47 to line 2329, col 58 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4991, col 49 to line 4991, col 71 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4992, col 52 to line 4992, col 79 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4993, col 57 to line 4993, col 113 of module ScenarioIII: 510
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4994, col 57 to line 4994, col 107 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4995, col 49 to line 4995, col 81 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 4996, col 38 to line 5058, col 64 of module ScenarioIII: 569
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<SchedulerMechanism line 5060, col 1 to line 5060, col 24 of module ScenarioIII>: 2:59
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5060, col 32 to line 5060, col 62 of module ScenarioIII: 19677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5060, col 32 to line 5060, col 39 of module ScenarioIII: 19618
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5061, col 32 to line 5061, col 68 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5061, col 32 to line 5061, col 45 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5061, col 49 to line 5061, col 68 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5062, col 32 to line 5062, col 64 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5062, col 32 to line 5062, col 41 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5062, col 45 to line 5062, col 64 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5063, col 35 to line 5063, col 50 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5064, col 43 to line 5064, col 73 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5065, col 43 to line 5065, col 91 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5066, col 43 to line 5069, col 64 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5070, col 43 to line 5070, col 119 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5071, col 43 to line 5071, col 176 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5072, col 43 to line 5072, col 136 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5073, col 43 to line 5073, col 112 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5074, col 43 to line 5074, col 91 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5075, col 43 to line 5075, col 75 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5076, col 32 to line 5124, col 76 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSendPrepareIR2NIB line 5126, col 1 to line 5126, col 25 of module ScenarioIII>: 3:59
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5126, col 33 to line 5126, col 64 of module ScenarioIII: 19676
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5126, col 33 to line 5126, col 40 of module ScenarioIII: 19617
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5127, col 33 to line 5127, col 69 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5127, col 33 to line 5127, col 46 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5127, col 50 to line 5127, col 69 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5128, col 33 to line 5128, col 65 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5128, col 33 to line 5128, col 42 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5128, col 46 to line 5128, col 65 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5129, col 36 to line 5129, col 51 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5130, col 44 to line 5130, col 74 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5131, col 44 to line 5131, col 92 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5132, col 44 to line 5133, col 71 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 118
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5134, col 52 to line 5134, col 62 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5135, col 44 to line 5135, col 163 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5136, col 44 to line 5136, col 150 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5137, col 44 to line 5137, col 84 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5138, col 47 to line 5138, col 73 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5139, col 52 to line 5139, col 97 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5140, col 55 to line 5140, col 102 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5141, col 44 to line 5141, col 76 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5142, col 33 to line 5192, col 77 of module ScenarioIII: 59
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerSeqStateReconciliation line 5194, col 1 to line 5194, col 38 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5194, col 46 to line 5194, col 90 of module ScenarioIII: 19616
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5200, col 46 to line 5200, col 83 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5202, col 57 to line 5202, col 227 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5204, col 57 to line 5204, col 81 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5205, col 46 to line 5205, col 88 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5206, col 46 to line 5293, col 72 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<RCSequencerFailover line 5295, col 1 to line 5295, col 25 of module ScenarioIII>: 0:0
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5295, col 33 to line 5295, col 64 of module ScenarioIII: 19616
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5298, col 33 to line 5298, col 90 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5301, col 33 to line 5301, col 75 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5302, col 33 to line 5354, col 77 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCFailure line 5364, col 1 to line 5364, col 16 of module ScenarioIII>: 975:1335
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5364, col 24 to line 5364, col 46 of module ScenarioIII: 20951
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5364, col 24 to line 5364, col 31 of module ScenarioIII: 19616
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5365, col 24 to line 5365, col 60 of module ScenarioIII: 2696
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5365, col 24 to line 5365, col 37 of module ScenarioIII: 1361
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5365, col 41 to line 5365, col 60 of module ScenarioIII: 1361
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5366, col 24 to line 5366, col 56 of module ScenarioIII: 2696
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5366, col 24 to line 5366, col 33 of module ScenarioIII: 1361
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5366, col 37 to line 5366, col 56 of module ScenarioIII: 1361
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5367, col 24 to line 5369, col 130 of module ScenarioIII: 1335
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5370, col 24 to line 5370, col 57 of module ScenarioIII: 1335
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5371, col 24 to line 5411, col 50 of module ScenarioIII: 1335
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCFailoverResetStates line 5415, col 1 to line 5415, col 28 of module ScenarioIII>: 463:476
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5415, col 36 to line 5415, col 70 of module ScenarioIII: 20091
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5415, col 36 to line 5415, col 43 of module ScenarioIII: 19615
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5416, col 36 to line 5416, col 72 of module ScenarioIII: 8706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5416, col 36 to line 5416, col 49 of module ScenarioIII: 8230
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5416, col 53 to line 5416, col 72 of module ScenarioIII: 8230
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5417, col 36 to line 5417, col 68 of module ScenarioIII: 8706
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5417, col 36 to line 5417, col 45 of module ScenarioIII: 8230
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5417, col 49 to line 5417, col 68 of module ScenarioIII: 8230
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5418, col 36 to line 5418, col 84 of module ScenarioIII: 8680
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5418, col 36 to line 5418, col 75 of module ScenarioIII: 8204
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5418, col 79 to line 5418, col 84 of module ScenarioIII: 8204
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5419, col 41 to line 5419, col 99 of module ScenarioIII: 7346
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5419, col 41 to line 5419, col 90 of module ScenarioIII: 6870
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5419, col 94 to line 5419, col 99 of module ScenarioIII: 6870
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5420, col 41 to line 5420, col 105 of module ScenarioIII: 7346
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5420, col 41 to line 5420, col 96 of module ScenarioIII: 6870
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5420, col 100 to line 5420, col 105 of module ScenarioIII: 6870
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5421, col 36 to line 5423, col 152 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5421, col 67 to line 5423, col 152 of module ScenarioIII: 6870
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5424, col 36 to line 5424, col 116 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5425, col 36 to line 5425, col 50 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5426, col 36 to line 5428, col 91 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5429, col 36 to line 5429, col 53 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5430, col 36 to line 5430, col 53 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5431, col 36 to line 5431, col 80 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5432, col 36 to line 5490, col 80 of module ScenarioIII: 476
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCReadSwitches line 5492, col 1 to line 5492, col 21 of module ScenarioIII>: 421:488
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5492, col 29 to line 5492, col 56 of module ScenarioIII: 20102
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5492, col 29 to line 5492, col 36 of module ScenarioIII: 19614
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5493, col 29 to line 5495, col 80 of module ScenarioIII: 488
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5496, col 29 to line 5496, col 68 of module ScenarioIII: 488
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5497, col 29 to line 5545, col 73 of module ScenarioIII: 488
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCReadNIB line 5547, col 1 to line 5547, col 16 of module ScenarioIII>: 429:438
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5547, col 24 to line 5547, col 46 of module ScenarioIII: 20051
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5547, col 24 to line 5547, col 31 of module ScenarioIII: 19613
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5548, col 24 to line 5548, col 97 of module ScenarioIII: 438
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5549, col 24 to line 5549, col 67 of module ScenarioIII: 438
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5550, col 24 to line 5592, col 50 of module ScenarioIII: 438
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCBack2Normal line 5594, col 1 to line 5594, col 20 of module ScenarioIII>: 465:487
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5594, col 28 to line 5594, col 54 of module ScenarioIII: 20099
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5594, col 28 to line 5594, col 35 of module ScenarioIII: 19612
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5595, col 28 to line 5597, col 137 of module ScenarioIII: 487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5598, col 28 to line 5598, col 61 of module ScenarioIII: 487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5599, col 28 to line 5645, col 54 of module ScenarioIII: 487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCNIBEventHanderProc line 5651, col 1 to line 5651, col 27 of module ScenarioIII>: 962:4068
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5651, col 35 to line 5651, col 68 of module ScenarioIII: 23679
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5651, col 35 to line 5651, col 42 of module ScenarioIII: 19611
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5652, col 35 to line 5652, col 71 of module ScenarioIII: 13644
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5652, col 35 to line 5652, col 48 of module ScenarioIII: 9576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5652, col 52 to line 5652, col 71 of module ScenarioIII: 9576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5653, col 35 to line 5653, col 67 of module ScenarioIII: 13644
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5653, col 35 to line 5653, col 44 of module ScenarioIII: 9576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5653, col 48 to line 5653, col 67 of module ScenarioIII: 9576
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5654, col 38 to line 5654, col 54 of module ScenarioIII: 9366
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 9366
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 9366
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 9366
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 3587
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 3587
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5655, col 46 to line 5655, col 83 of module ScenarioIII: 3587
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5656, col 46 to line 5656, col 101 of module ScenarioIII: 3587
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5657, col 46 to line 5659, col 69 of module ScenarioIII: 3587
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5660, col 46 to line 5660, col 59 of module ScenarioIII: 6260
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5660, col 46 to line 5660, col 52 of module ScenarioIII: 5779
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5660, col 56 to line 5660, col 59 of module ScenarioIII: 5779
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5661, col 46 to line 5661, col 98 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5662, col 46 to line 5662, col 69 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5663, col 46 to line 5663, col 132 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5663, col 60 to line 5663, col 132 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5663, col 61 to line 5663, col 70 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5663, col 79 to line 5663, col 131 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5663, col 89 to line 5663, col 131 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5663, col 90 to line 5663, col 105 of module ScenarioIII: 302
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5663, col 114 to line 5663, col 130 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5664, col 46 to line 5664, col 172 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5665, col 49 to line 5665, col 83 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5666, col 54 to line 5668, col 111 of module ScenarioIII: 179
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5669, col 57 to line 5669, col 60 of module ScenarioIII: 302
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5670, col 57 to line 5670, col 76 of module ScenarioIII: 302
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5671, col 46 to line 5671, col 96 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5672, col 46 to line 5672, col 85 of module ScenarioIII: 481
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5673, col 35 to line 5726, col 79 of module ScenarioIII: 4068
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCNIBEventHandlerFailover line 5728, col 1 to line 5728, col 32 of module ScenarioIII>: 427:5155
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5728, col 40 to line 5728, col 78 of module ScenarioIII: 24764
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5728, col 40 to line 5728, col 47 of module ScenarioIII: 19609
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5729, col 40 to line 5729, col 76 of module ScenarioIII: 15190
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5729, col 40 to line 5729, col 53 of module ScenarioIII: 10035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5729, col 57 to line 5729, col 76 of module ScenarioIII: 10035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5730, col 40 to line 5730, col 72 of module ScenarioIII: 15190
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5730, col 40 to line 5730, col 49 of module ScenarioIII: 10035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5730, col 53 to line 5730, col 72 of module ScenarioIII: 10035
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2296, col 25 to line 2296, col 76 of module ScenarioIII: 15002
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 25 to line 2296, col 64 of module ScenarioIII: 9847
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 68 to line 2296, col 76 of module ScenarioIII: 9847
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2297, col 25 to line 2297, col 86 of module ScenarioIII: 10310
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 25 to line 2297, col 74 of module ScenarioIII: 5155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 78 to line 2297, col 86 of module ScenarioIII: 5155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2298, col 25 to line 2298, col 92 of module ScenarioIII: 10310
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 25 to line 2298, col 80 of module ScenarioIII: 5155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 84 to line 2298, col 92 of module ScenarioIII: 5155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5732, col 40 to line 5732, col 90 of module ScenarioIII: 5155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5733, col 40 to line 5802, col 66 of module ScenarioIII: 5155
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThread line 5807, col 1 to line 5807, col 22 of module ScenarioIII>: 1469:3497
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5807, col 30 to line 5807, col 58 of module ScenarioIII: 23106
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5807, col 30 to line 5807, col 37 of module ScenarioIII: 19609
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2288, col 42 to line 2288, col 90 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2289, col 42 to line 2289, col 60 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2289, col 65 to line 2289, col 92 of module ScenarioIII: 6994
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2289, col 65 to line 2289, col 80 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5808, col 49 to line 5808, col 55 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5809, col 30 to line 5809, col 66 of module ScenarioIII: 6994
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5809, col 30 to line 5809, col 43 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5809, col 47 to line 5809, col 66 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5810, col 30 to line 5810, col 62 of module ScenarioIII: 6994
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5810, col 30 to line 5810, col 39 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5810, col 43 to line 5810, col 62 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5811, col 30 to line 5811, col 77 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5812, col 30 to line 5860, col 74 of module ScenarioIII: 3497
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCThreadGetNextIR line 5862, col 1 to line 5862, col 24 of module ScenarioIII>: 758:1660
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5862, col 32 to line 5862, col 62 of module ScenarioIII: 21267
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5862, col 32 to line 5862, col 39 of module ScenarioIII: 19607
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5863, col 32 to line 5863, col 68 of module ScenarioIII: 4509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5863, col 32 to line 5863, col 45 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5863, col 49 to line 5863, col 68 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5864, col 32 to line 5864, col 64 of module ScenarioIII: 4509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5864, col 32 to line 5864, col 41 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5864, col 45 to line 5864, col 64 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5865, col 35 to line 5865, col 51 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 2849
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 979
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 979
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5866, col 43 to line 5866, col 71 of module ScenarioIII: 979
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5867, col 43 to line 5867, col 89 of module ScenarioIII: 979
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5868, col 43 to line 5869, col 80 of module ScenarioIII: 979
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5870, col 43 to line 5870, col 61 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5870, col 43 to line 5870, col 57 of module ScenarioIII: 1870
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5871, col 43 to line 5871, col 121 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5871, col 55 to line 5871, col 121 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5871, col 56 to line 5871, col 63 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5871, col 72 to line 5871, col 120 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 5871, col 82 to line 5871, col 120 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2308, col 45 to line 2311, col 96 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2308, col 74 to line 2311, col 96 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2308, col 74 to line 2308, col 101 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||||line 2309, col 71 to line 2311, col 96 of module ScenarioIII: 509
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||||line 2308, col 58 to line 2308, col 71 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5871, col 104 to line 5871, col 107 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 5871, col 110 to line 5871, col 119 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5872, col 43 to line 5872, col 120 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5873, col 43 to line 5873, col 105 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5874, col 43 to line 5874, col 93 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5875, col 43 to line 5875, col 73 of module ScenarioIII: 681
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5876, col 32 to line 5925, col 76 of module ScenarioIII: 1660
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCUpdateIRQueueIRTag line 5927, col 1 to line 5927, col 27 of module ScenarioIII>: 237:418
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5927, col 35 to line 5927, col 68 of module ScenarioIII: 20023
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5927, col 35 to line 5927, col 42 of module ScenarioIII: 19605
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5928, col 35 to line 5928, col 71 of module ScenarioIII: 836
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5928, col 35 to line 5928, col 48 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5928, col 52 to line 5928, col 71 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5929, col 35 to line 5929, col 67 of module ScenarioIII: 836
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5929, col 35 to line 5929, col 44 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5929, col 48 to line 5929, col 67 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5930, col 38 to line 5930, col 54 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 16
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 16
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5931, col 46 to line 5931, col 74 of module ScenarioIII: 16
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5932, col 46 to line 5932, col 92 of module ScenarioIII: 16
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5933, col 46 to line 5934, col 64 of module ScenarioIII: 16
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 804
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5935, col 54 to line 5935, col 64 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5936, col 46 to line 5936, col 144 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5937, col 46 to line 5937, col 143 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5938, col 46 to line 5938, col 87 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5939, col 46 to line 5939, col 90 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5940, col 46 to line 5940, col 76 of module ScenarioIII: 402
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5941, col 35 to line 5996, col 79 of module ScenarioIII: 418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCThreadSendIR line 5998, col 1 to line 5998, col 21 of module ScenarioIII>: 285:505
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5998, col 29 to line 5998, col 56 of module ScenarioIII: 20107
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5998, col 29 to line 5998, col 36 of module ScenarioIII: 19603
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 5999, col 29 to line 5999, col 65 of module ScenarioIII: 1009
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5999, col 29 to line 5999, col 42 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 5999, col 46 to line 5999, col 65 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6000, col 29 to line 6000, col 61 of module ScenarioIII: 1009
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6000, col 29 to line 6000, col 38 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6000, col 42 to line 6000, col 61 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6001, col 32 to line 6001, col 48 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 505
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6002, col 40 to line 6002, col 68 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6003, col 40 to line 6003, col 86 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6004, col 40 to line 6004, col 60 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6005, col 40 to line 6005, col 106 of module ScenarioIII: 456
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6005, col 55 to line 6005, col 106 of module ScenarioIII: 457
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6006, col 40 to line 6006, col 93 of module ScenarioIII: 456
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6006, col 46 to line 6006, col 93 of module ScenarioIII: 457
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6007, col 40 to line 6007, col 70 of module ScenarioIII: 456
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6008, col 29 to line 6055, col 73 of module ScenarioIII: 504
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCThreadNotifyNIBIRSent line 6057, col 1 to line 6057, col 30 of module ScenarioIII>: 266:437
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6057, col 38 to line 6057, col 74 of module ScenarioIII: 20037
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6057, col 38 to line 6057, col 45 of module ScenarioIII: 19600
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6058, col 38 to line 6058, col 74 of module ScenarioIII: 874
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6058, col 38 to line 6058, col 51 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6058, col 55 to line 6058, col 74 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6059, col 38 to line 6059, col 70 of module ScenarioIII: 874
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6059, col 38 to line 6059, col 47 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6059, col 51 to line 6059, col 70 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6060, col 41 to line 6060, col 57 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6061, col 49 to line 6061, col 77 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6062, col 49 to line 6062, col 95 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6063, col 49 to line 6065, col 84 of module ScenarioIII: 48
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 778
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6066, col 57 to line 6066, col 67 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6067, col 49 to line 6067, col 185 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6068, col 49 to line 6068, col 174 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6069, col 49 to line 6069, col 90 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6070, col 49 to line 6070, col 108 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6071, col 49 to line 6071, col 79 of module ScenarioIII: 389
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6072, col 38 to line 6134, col 64 of module ScenarioIII: 437
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<ControllerThreadForwardIRInner line 6136, col 1 to line 6136, col 36 of module ScenarioIII>: 529:584
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6136, col 44 to line 6136, col 86 of module ScenarioIII: 20183
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6136, col 44 to line 6136, col 51 of module ScenarioIII: 19599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6137, col 44 to line 6137, col 80 of module ScenarioIII: 1168
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6137, col 44 to line 6137, col 57 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6137, col 61 to line 6137, col 80 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6138, col 44 to line 6138, col 76 of module ScenarioIII: 1168
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6138, col 44 to line 6138, col 53 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6138, col 57 to line 6138, col 76 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6139, col 47 to line 6139, col 63 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6140, col 55 to line 6140, col 83 of module ScenarioIII: 104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6141, col 55 to line 6141, col 101 of module ScenarioIII: 104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6142, col 55 to line 6143, col 87 of module ScenarioIII: 104
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6144, col 55 to line 6146, col 214 of module ScenarioIII: 480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6147, col 58 to line 6147, col 119 of module ScenarioIII: 480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6148, col 66 to line 6148, col 121 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6149, col 63 to line 6149, col 122 of module ScenarioIII: 480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6150, col 55 to line 6150, col 109 of module ScenarioIII: 480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6151, col 55 to line 6151, col 85 of module ScenarioIII: 480
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6152, col 44 to line 6229, col 70 of module ScenarioIII: 584
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCRemoveIRFromIRQueueOFC line 6231, col 1 to line 6231, col 31 of module ScenarioIII>: 576:1972
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6231, col 39 to line 6231, col 76 of module ScenarioIII: 21570
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6231, col 39 to line 6231, col 46 of module ScenarioIII: 19598
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6232, col 39 to line 6232, col 75 of module ScenarioIII: 4342
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6232, col 39 to line 6232, col 52 of module ScenarioIII: 2370
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6232, col 56 to line 6232, col 75 of module ScenarioIII: 2370
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6233, col 39 to line 6233, col 71 of module ScenarioIII: 4342
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6233, col 39 to line 6233, col 48 of module ScenarioIII: 2370
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6233, col 52 to line 6233, col 71 of module ScenarioIII: 2370
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6234, col 42 to line 6234, col 106 of module ScenarioIII: 1972
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6235, col 47 to line 6235, col 109 of module ScenarioIII: 1972
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6236, col 50 to line 6236, col 95 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6237, col 39 to line 6305, col 65 of module ScenarioIII: 1972
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCRemoveIRFromIRQueueOFCLocal line 6307, col 1 to line 6307, col 36 of module ScenarioIII>: 735:1718
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6307, col 44 to line 6307, col 86 of module ScenarioIII: 21315
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6307, col 44 to line 6307, col 51 of module ScenarioIII: 19597
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6308, col 47 to line 6308, col 63 of module ScenarioIII: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 725
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 725
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6309, col 55 to line 6309, col 83 of module ScenarioIII: 725
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6310, col 55 to line 6310, col 101 of module ScenarioIII: 725
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6311, col 55 to line 6312, col 79 of module ScenarioIII: 725
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6313, col 55 to line 6313, col 151 of module ScenarioIII: 993
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6314, col 55 to line 6314, col 111 of module ScenarioIII: 993
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6315, col 55 to line 6315, col 115 of module ScenarioIII: 993
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6316, col 55 to line 6316, col 85 of module ScenarioIII: 993
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6317, col 44 to line 6394, col 70 of module ScenarioIII: 1718
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCRemoveIRFromIRQueueOFCRemote line 6396, col 1 to line 6396, col 37 of module ScenarioIII>: 708:1487
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6396, col 45 to line 6396, col 88 of module ScenarioIII: 21083
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6396, col 45 to line 6396, col 52 of module ScenarioIII: 19596
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6397, col 48 to line 6397, col 64 of module ScenarioIII: 1487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 1487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 1487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 1487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6398, col 56 to line 6398, col 84 of module ScenarioIII: 677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6399, col 56 to line 6399, col 102 of module ScenarioIII: 677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6400, col 56 to line 6402, col 74 of module ScenarioIII: 677
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 1620
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6403, col 64 to line 6403, col 74 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6404, col 56 to line 6404, col 138 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6405, col 56 to line 6405, col 150 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6406, col 56 to line 6406, col 97 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6407, col 56 to line 6407, col 101 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6408, col 56 to line 6408, col 86 of module ScenarioIII: 810
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6409, col 45 to line 6490, col 71 of module ScenarioIII: 1487
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCWorkerFailover line 6492, col 1 to line 6492, col 23 of module ScenarioIII>: 887:1949
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6492, col 31 to line 6492, col 60 of module ScenarioIII: 21545
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6492, col 31 to line 6492, col 38 of module ScenarioIII: 19596
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6493, col 31 to line 6493, col 67 of module ScenarioIII: 7693
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6493, col 31 to line 6493, col 44 of module ScenarioIII: 5744
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6493, col 48 to line 6493, col 67 of module ScenarioIII: 5744
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6494, col 31 to line 6494, col 63 of module ScenarioIII: 7693
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6494, col 31 to line 6494, col 40 of module ScenarioIII: 5744
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6494, col 44 to line 6494, col 63 of module ScenarioIII: 5744
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2296, col 25 to line 2296, col 76 of module ScenarioIII: 7693
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 25 to line 2296, col 64 of module ScenarioIII: 5744
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 68 to line 2296, col 76 of module ScenarioIII: 5744
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2297, col 25 to line 2297, col 86 of module ScenarioIII: 3898
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 25 to line 2297, col 74 of module ScenarioIII: 1949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 78 to line 2297, col 86 of module ScenarioIII: 1949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2298, col 25 to line 2298, col 92 of module ScenarioIII: 3898
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 25 to line 2298, col 80 of module ScenarioIII: 1949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 84 to line 2298, col 92 of module ScenarioIII: 1949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6496, col 31 to line 6496, col 76 of module ScenarioIII: 1949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6497, col 31 to line 6547, col 75 of module ScenarioIII: 1949
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCMonitorCheckIfMastr line 6560, col 1 to line 6560, col 28 of module ScenarioIII>: 3433:3689
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6560, col 36 to line 6560, col 70 of module ScenarioIII: 23284
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6560, col 36 to line 6560, col 43 of module ScenarioIII: 19595
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2288, col 42 to line 2288, col 90 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2289, col 42 to line 2289, col 60 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2289, col 65 to line 2289, col 92 of module ScenarioIII: 10288
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2289, col 65 to line 2289, col 80 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6561, col 55 to line 6561, col 61 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6562, col 39 to line 6562, col 55 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 6599
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 2271
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 2271
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6563, col 47 to line 6563, col 76 of module ScenarioIII: 2271
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6564, col 47 to line 6564, col 94 of module ScenarioIII: 2271
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6565, col 47 to line 6565, col 81 of module ScenarioIII: 2271
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6566, col 47 to line 6566, col 70 of module ScenarioIII: 5746
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6566, col 47 to line 6566, col 63 of module ScenarioIII: 4328
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6566, col 67 to line 6566, col 70 of module ScenarioIII: 4328
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6567, col 50 to line 6567, col 70 of module ScenarioIII: 1419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6568, col 50 to line 6568, col 86 of module ScenarioIII: 2837
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6568, col 50 to line 6568, col 63 of module ScenarioIII: 1419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6568, col 67 to line 6568, col 86 of module ScenarioIII: 1419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6569, col 47 to line 6569, col 79 of module ScenarioIII: 2837
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6569, col 47 to line 6569, col 56 of module ScenarioIII: 1419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6569, col 60 to line 6569, col 79 of module ScenarioIII: 1419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6570, col 47 to line 6570, col 84 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6571, col 47 to line 6571, col 99 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6572, col 47 to line 6573, col 101 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6574, col 47 to line 6575, col 101 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6576, col 47 to line 6576, col 98 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6577, col 47 to line 6577, col 78 of module ScenarioIII: 1418
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6578, col 36 to line 6637, col 80 of module ScenarioIII: 3689
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCMonitorUpdateIRDone line 6639, col 1 to line 6639, col 28 of module ScenarioIII>: 1383:1444
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6639, col 36 to line 6639, col 70 of module ScenarioIII: 21037
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6639, col 36 to line 6639, col 43 of module ScenarioIII: 19593
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6640, col 39 to line 6640, col 77 of module ScenarioIII: 1444
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6641, col 44 to line 6641, col 91 of module ScenarioIII: 1444
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6644, col 47 to line 6644, col 107 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6645, col 36 to line 6706, col 80 of module ScenarioIII: 1444
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCUpdateIRDone line 6708, col 1 to line 6708, col 21 of module ScenarioIII>: 1088:1160
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6708, col 29 to line 6708, col 56 of module ScenarioIII: 20752
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6708, col 29 to line 6708, col 36 of module ScenarioIII: 19592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6709, col 29 to line 6709, col 65 of module ScenarioIII: 2320
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6709, col 29 to line 6709, col 42 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6709, col 46 to line 6709, col 65 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6710, col 29 to line 6710, col 61 of module ScenarioIII: 2320
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6710, col 29 to line 6710, col 38 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6710, col 42 to line 6710, col 61 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6711, col 32 to line 6711, col 48 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6712, col 40 to line 6712, col 69 of module ScenarioIII: 419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6713, col 40 to line 6713, col 87 of module ScenarioIII: 419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6714, col 40 to line 6715, col 66 of module ScenarioIII: 419
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6716, col 40 to line 6716, col 100 of module ScenarioIII: 741
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6717, col 40 to line 6717, col 102 of module ScenarioIII: 741
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6718, col 40 to line 6718, col 87 of module ScenarioIII: 741
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6719, col 40 to line 6719, col 71 of module ScenarioIII: 741
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6720, col 29 to line 6767, col 73 of module ScenarioIII: 1160
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCUpdateNIBIRDONE line 6769, col 1 to line 6769, col 24 of module ScenarioIII>: 872:895
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6769, col 32 to line 6769, col 62 of module ScenarioIII: 20486
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6769, col 32 to line 6769, col 39 of module ScenarioIII: 19591
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6770, col 35 to line 6770, col 51 of module ScenarioIII: 895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2299, col 26 to line 2301, col 89 of module ScenarioIII: 895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2299, col 26 to line 2300, col 83 of module ScenarioIII: 895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2299, col 26 to line 2299, col 77 of module ScenarioIII: 895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2300, col 25 to line 2300, col 83 of module ScenarioIII: 388
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 2301, col 25 to line 2301, col 89 of module ScenarioIII: 388
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6771, col 43 to line 6771, col 72 of module ScenarioIII: 388
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6772, col 43 to line 6772, col 90 of module ScenarioIII: 388
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6773, col 43 to line 6776, col 69 of module ScenarioIII: 388
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2316, col 22 to line 2316, col 70 of module ScenarioIII: 1014
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 22 to line 2316, col 58 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2316, col 62 to line 2316, col 70 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6777, col 51 to line 6777, col 61 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6778, col 43 to line 6778, col 171 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6779, col 43 to line 6779, col 163 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6780, col 43 to line 6781, col 153 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6782, col 43 to line 6782, col 82 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6783, col 43 to line 6783, col 103 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6784, col 43 to line 6784, col 74 of module ScenarioIII: 507
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6785, col 32 to line 6833, col 72 of module ScenarioIII: 895
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<MonitoringServerRemoveFromQueue line 6835, col 1 to line 6835, col 37 of module ScenarioIII>: 955:980
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6835, col 45 to line 6835, col 88 of module ScenarioIII: 20571
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6835, col 45 to line 6835, col 52 of module ScenarioIII: 19591
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6836, col 45 to line 6836, col 81 of module ScenarioIII: 1960
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6836, col 45 to line 6836, col 58 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6836, col 62 to line 6836, col 81 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6837, col 45 to line 6837, col 77 of module ScenarioIII: 1960
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6837, col 45 to line 6837, col 54 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6837, col 58 to line 6837, col 77 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6838, col 49 to line 6839, col 128 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6838, col 49 to line 6838, col 93 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6839, col 57 to line 6839, col 128 of module ScenarioIII: 468
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6840, col 62 to line 6840, col 145 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6841, col 62 to line 6841, col 179 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6843, col 62 to line 6843, col 130 of module ScenarioIII: 0
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6844, col 56 to line 6844, col 59 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6845, col 56 to line 6846, col 98 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6847, col 49 to line 6847, col 94 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6848, col 53 to line 6849, col 107 of module ScenarioIII: 468
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6850, col 56 to line 6850, col 107 of module ScenarioIII: 512
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6851, col 56 to line 6851, col 82 of module ScenarioIII: 512
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6852, col 45 to line 6932, col 71 of module ScenarioIII: 980
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2772:0 @!@!@
<OFCMonitorFailover line 6934, col 1 to line 6934, col 24 of module ScenarioIII>: 3480:4075
@!@!@ENDMSG 2772 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6934, col 32 to line 6934, col 62 of module ScenarioIII: 23666
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6934, col 32 to line 6934, col 39 of module ScenarioIII: 19591
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6935, col 32 to line 6935, col 68 of module ScenarioIII: 12592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6935, col 32 to line 6935, col 45 of module ScenarioIII: 8517
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6935, col 49 to line 6935, col 68 of module ScenarioIII: 8517
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6936, col 32 to line 6936, col 64 of module ScenarioIII: 12592
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6936, col 32 to line 6936, col 41 of module ScenarioIII: 8517
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 6936, col 45 to line 6936, col 64 of module ScenarioIII: 8517
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2296, col 25 to line 2296, col 76 of module ScenarioIII: 12387
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 25 to line 2296, col 64 of module ScenarioIII: 8312
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2296, col 68 to line 2296, col 76 of module ScenarioIII: 8312
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2297, col 25 to line 2297, col 86 of module ScenarioIII: 8150
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 25 to line 2297, col 74 of module ScenarioIII: 4075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2297, col 78 to line 2297, col 86 of module ScenarioIII: 4075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 2298, col 25 to line 2298, col 92 of module ScenarioIII: 8150
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 25 to line 2298, col 80 of module ScenarioIII: 4075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 2298, col 84 to line 2298, col 92 of module ScenarioIII: 4075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6938, col 32 to line 6938, col 83 of module ScenarioIII: 4075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 6939, col 32 to line 6990, col 76 of module ScenarioIII: 4075
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<IRCriticalSection line 7132, col 1 to line 7132, col 17 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7135, col 25 to line 7138, col 107 of module ScenarioIII: 22944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<RedundantInstallation line 7140, col 1 to line 7140, col 21 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7140, col 26 to line 7141, col 73 of module ScenarioIII: 22944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7140, col 49 to line 7141, col 73 of module ScenarioIII: 22944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 7140, col 52 to line 7140, col 75 of module ScenarioIII: 22944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 7141, col 52 to line 7141, col 73 of module ScenarioIII: 14934
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7140, col 35 to line 7140, col 46 of module ScenarioIII: 22944
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<ConsistencyReq line 7143, col 1 to line 7143, col 14 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7143, col 19 to line 7147, col 91 of module ScenarioIII: 22943
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7143, col 55 to line 7147, col 91 of module ScenarioIII: 14693
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |line 7143, col 31 to line 7143, col 52 of module ScenarioIII: 22943
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2775:0 @!@!@
  ||line 2185, col 18 to line 2185, col 43 of module ScenarioIII: 22943:81715
@!@!@ENDMSG 2775 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2185, col 19 to line 2185, col 24 of module ScenarioIII: 14700
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  |||line 2185, col 33 to line 2185, col 42 of module ScenarioIII: 22943
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  ||line 7143, col 40 to line 7143, col 51 of module ScenarioIII: 22943
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2774:0 @!@!@
<Debug line 7148, col 1 to line 7148, col 5 of module ScenarioIII>
@!@!@ENDMSG 2774 @!@!@
@!@!@STARTMSG 2221:0 @!@!@
  line 7148, col 11 to line 7148, col 25 of module ScenarioIII: 22943
@!@!@ENDMSG 2221 @!@!@
@!@!@STARTMSG 2202:0 @!@!@
End of statistics.
@!@!@ENDMSG 2202 @!@!@
@!@!@STARTMSG 2200:0 @!@!@
Progress(42) at 2021-04-11 21:12:20: 73,627 states generated (83,827 s/min), 22,944 distinct states found (26,122 ds/min), 3,352 states left on queue.
@!@!@ENDMSG 2200 @!@!@
@!@!@STARTMSG 2199:0 @!@!@
73627 states generated, 22944 distinct states found, 3352 states left on queue.
@!@!@ENDMSG 2199 @!@!@
@!@!@STARTMSG 2194:0 @!@!@
The depth of the complete state graph search is 42.
@!@!@ENDMSG 2194 @!@!@
@!@!@STARTMSG 2268:0 @!@!@
The average outdegree of the complete state graph is 1 (minimum is 0, the maximum 5 and the 95th percentile is 3).
@!@!@ENDMSG 2268 @!@!@
@!@!@STARTMSG 2186:0 @!@!@
Finished in 52706ms at (2021-04-11 21:12:20)
@!@!@ENDMSG 2186 @!@!@
